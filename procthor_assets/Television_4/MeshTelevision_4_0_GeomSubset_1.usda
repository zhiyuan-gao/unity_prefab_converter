#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshTelevision_4_0_GeomSubset_1"
    {
        def Mesh "MeshTelevision_4_0_GeomSubset_1"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [4, 5, 7, 6, 42, 43, 44, 45, 46, 47, 48, 49, 51, 50, 52, 53, 49, 42, 45, 46, 48, 47, 52, 50, 44, 43, 51, 53, 20, 26, 32, 33, 27, 21, 35, 34, 20, 31, 43, 42, 30, 26, 49, 48, 21, 27, 50, 51, 26, 20, 42, 49, 27, 30, 48, 50, 31, 21, 51, 43, 33, 32, 54, 55, 34, 35, 57, 56, 26, 30, 59, 58, 32, 26, 58, 54, 31, 20, 60, 61, 20, 33, 55, 60, 30, 27, 62, 59, 27, 34, 56, 62, 21, 31, 61, 63, 35, 21, 63, 57, 55, 54, 64, 67, 56, 57, 69, 68, 58, 59, 71, 70, 54, 58, 70, 64, 61, 60, 72, 73, 60, 55, 67, 72, 59, 62, 74, 71, 62, 56, 68, 74, 63, 61, 73, 75, 57, 63, 75, 69]
            rel material:binding = </root/_materials/M_Television_4_1>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.010387071, -0.999946, 0), (0, -1, 0), (0, -1, 0), (0.010387071, -0.999946, 0), (0.010387071, 0.999946, 0), (0, 1, 0), (0, 1, 0), (0.010387071, 0.999946, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (-0.010387071, 0.999946, 0), (-0.010387071, 0.999946, 0), (0, -1, 0), (0, -1, 0), (-0.010387071, -0.999946, 0), (-0.010387071, -0.999946, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1.2825528e-8, 0, 1), (0, 0, 1), (0, 0, 1), (-1.27375e-8, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1.2825528e-8, 0, 1), (0, 0, 1), (0, 0, 1), (1.27375e-8, 0, 1), (0, 0, 1), (-1.2825528e-8, 0, 1), (-1.27375e-8, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1.2825528e-8, 0, 1), (1.27375e-8, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-0.00039750373, 0.99998736, 0.0050051454), (0, 0.9999836, 0.005733146), (0, 0.9999836, 0.005733146), (-0.00041137222, 0.99998754, 0.0049764235), (-0.0026921208, 0.99999636, 0.00031759002), (-0.00039750373, 0.99998736, 0.0050051454), (-0.00041137222, 0.99998754, 0.0049764235), (-0.0026921208, 0.99999636, 0.00031759002), (0, -0.9941192, -0.10829134), (-0.00010509654, -0.9940964, -0.10850032), (-0.00010510383, -0.9940964, -0.10850033), (0, -0.9941192, -0.10829134), (-0.00010509654, -0.9940964, -0.10850032), (-0.000210204, -0.99407357, -0.10870932), (-0.000210204, -0.99407357, -0.10870932), (-0.00010510383, -0.9940964, -0.10850033), (0, 0.9999836, 0.005733146), (0.0003975036, 0.99998736, 0.0050051454), (0.0004110927, 0.99998754, 0.00497629), (0, 0.9999836, 0.005733146), (0.0003975036, 0.99998736, 0.0050051454), (0.0026921208, 0.99999636, 0.00031759002), (0.0026921208, 0.99999636, 0.00031759002), (0.0004110927, 0.99998754, 0.00497629), (0.00010509654, -0.9940964, -0.10850032), (0, -0.9941192, -0.10829134), (0, -0.9941192, -0.10829134), (0.00010510383, -0.9940964, -0.10850033), (0.000210204, -0.99407357, -0.10870932), (0.00010509654, -0.9940964, -0.10850032), (0.00010510383, -0.9940964, -0.10850033), (0.000210204, -0.99407357, -0.10870932), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-0.99999994, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000799, -0.004588, 0.069715), (0.000799, -0.004588, 0.069715), (-0.000799, -0.002989, 0.069715), (0.000799, -0.002989, 0.069715), (-0.000799, -0.004588, 0.069715), (0.000799, -0.004588, 0.069715), (-0.000799, -0.002989, 0.069715), (0.000799, -0.002989, 0.069715), (-0.000799, -0.004588, 0.069715), (0.000799, -0.004588, 0.069715), (-0.000799, -0.002989, 0.069715), (0.000799, -0.002989, 0.069715), (-0.000799, -0.004588, 0.069715), (0.000799, -0.004588, 0.069715), (-0.000799, -0.002989, 0.069715), (0.000799, -0.002989, 0.069715), (-0.000799, -0.004588, 0.069715), (0.000799, -0.004588, 0.069715), (-0.000799, -0.002989, 0.069715), (0.000799, -0.002989, 0.069715), (-0.546104, -0.040837, -0.201353), (0.546104, -0.040837, -0.201353), (-0.546104, -0.040837, 0.390669), (0.546104, -0.040837, 0.390669), (-0.546104, -0.003789, 0.390669), (0.546104, -0.003789, 0.390669), (-0.546104, -0.003789, -0.201353), (0.546104, -0.003789, -0.201353), (0, -0.040837, 0.390669), (0, -0.003789, 0.390669), (0, -0.003789, -0.201353), (0, -0.040837, -0.201353), (-0.546104, -0.003732, -0.296062), (-0.546104, -0.030482, -0.296062), (0.546104, -0.003732, -0.296062), (0.546104, -0.030482, -0.296062), (-0.546104, -0.040837, -0.193929), (-0.546104, -0.003789, -0.193929), (0, -0.003789, -0.193929), (0.546104, -0.003789, -0.193929), (0.546104, -0.040837, -0.193929), (0, -0.040837, -0.193929), (-0.540547, -0.03522, -0.201353), (-0, -0.029605, -0.201353), (-0, -0.029605, -0.193929), (-0.540547, -0.03522, -0.193929), (-0.540547, -0.009403, -0.193929), (-0, -0.015018, -0.193929), (-0, -0.015018, -0.201353), (-0.540547, -0.009403, -0.201353), (0.540547, -0.009403, -0.201353), (0.540547, -0.03522, -0.201353), (0.540547, -0.009403, -0.193929), (0.540547, -0.03522, -0.193929), (-0.536104, -0.003732, -0.296062), (-0.536104, -0.030482, -0.296062), (0.536104, -0.003732, -0.296062), (0.536104, -0.030482, -0.296062), (-0.536104, -0.003732, -0.211295), (0, -0.003732, -0.211295), (-0.536104, -0.039754, -0.211295), (0, -0.039754, -0.211295), (0.536104, -0.003732, -0.211295), (0.536104, -0.039754, -0.211295), (-0.536104, -0.007537, -0.292062), (-0, -0.007537, -0.292062), (-0, -0.026889, -0.292062), (-0.536104, -0.026889, -0.292062), (0.536104, -0.007537, -0.292062), (0.536104, -0.026889, -0.292062), (-0.536104, -0.007537, -0.211295), (0, -0.007537, -0.211295), (-0.536104, -0.035738, -0.211295), (0, -0.035738, -0.211295), (0.536104, -0.007537, -0.211295), (0.536104, -0.035738, -0.211295), (0, -0.031688, -0.174929), (0, -0.031688, 0.37167), (0.527104, -0.031688, -0.174929), (0.527104, -0.031688, 0.37167), (-0.527104, -0.031688, -0.174929), (-0.527104, -0.031688, 0.37167), (0, -0.031688, -0.137929), (0, -0.031688, 0.33467), (0.490104, -0.031688, -0.137929), (0.490104, -0.031688, 0.33467), (-0.490104, -0.031688, -0.137929), (-0.490104, -0.031688, 0.33467), (0, -0.024634, -0.137929), (0, -0.024634, 0.33467), (0.490104, -0.024634, -0.137929), (0.490104, -0.024634, 0.33467), (-0.490104, -0.024634, -0.137929), (-0.490104, -0.024634, 0.33467), (0, -0.04474, -0.183177), (0, -0.04474, -0.174929), (0.534841, -0.04474, -0.183177), (0.527104, -0.04474, -0.174929), (0.534841, -0.04474, 0.379917), (0.527104, -0.04474, 0.37167), (0, -0.04474, 0.379917), (0, -0.04474, 0.37167), (-0.534841, -0.04474, -0.183177), (-0.527104, -0.04474, -0.174929), (-0.534841, -0.04474, 0.379917), (-0.527104, -0.04474, 0.37167)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-31.065247, -18.17474), (-31.06379, -18.17474), (-31.06379, -18.173283), (-31.065247, -18.173283), (-31.333117, 1.550957), (-31.333117, 0.494933), (-31.31862, 0.494933), (-31.31862, 1.550957), (-31.320627, 1.550957), (-31.320627, 0.494932), (-31.306131, 0.494932), (-31.306131, 1.550957), (-31.094086, 0.038977), (-31.094086, -0.01145), (-31.079586, -0.01145), (-31.079586, 0.038977), (-31.081596, 0.038975), (-31.081596, -0.011448), (-31.067097, -0.011448), (-31.067097, 0.038975), (-31.306131, 0.494932), (-31.320627, 0.494932), (-31.320627, -0.561092), (-31.306131, -0.561092), (-31.31862, 0.494933), (-31.333117, 0.494933), (-31.333117, -0.561092), (-31.31862, -0.561092), (-31.229715, 0.137664), (-31.302076, 0.137664), (-31.30219, -0.047312), (-31.249945, -0.047312), (-31.1888, 0.137667), (-31.261156, 0.137667), (-31.240944, -0.047314), (-31.188696, -0.047314), (-31.573484, 1.566759), (-31.573484, 0.5), (-31.551544, 0.5), (-31.56251, 1.555903), (-31.50112, 0.5), (-31.50112, 1.566759), (-31.512077, 1.555903), (-31.523043, 0.5), (-31.573484, -0.566758), (-31.50112, -0.566758), (-31.512077, -0.555903), (-31.56251, -0.555903), (-31.50112, 1.566759), (-31.573484, 1.566759), (-31.56251, 1.555903), (-31.512077, 1.555903), (-31.50112, -0.566758), (-31.50112, 0.5), (-31.523043, 0.5), (-31.512077, -0.555903), (-31.573484, 0.5), (-31.573484, -0.566758), (-31.56251, -0.555903), (-31.551544, 0.5), (-31.127535, 0.040313), (-31.127535, -0.011934), (-31.108004, -0.011934), (-31.108004, 0.040313), (-31.091948, -0.011934), (-31.091948, 0.040313), (-31.111479, 0.040313), (-31.111479, -0.011934), (-31.564066, 1.566448), (-31.564066, 0.5), (-31.544641, 0.5), (-31.544641, 1.54692), (-31.379107, 1.566448), (-31.564066, 1.566448), (-31.544641, 1.54692), (-31.379107, 1.54692), (-31.286068, 0.5), (-31.286068, 1.569755), (-31.305546, 1.550166), (-31.305546, 0.5), (-31.286068, 1.569755), (-31.471592, 1.569755), (-31.471592, 1.550166), (-31.305546, 1.550166), (-31.564066, 0.5), (-31.564066, -0.566448), (-31.544641, -0.54692), (-31.544641, 0.5), (-31.564066, -0.566448), (-31.379107, -0.566448), (-31.379107, -0.54692), (-31.544641, -0.54692), (-31.286068, -0.569754), (-31.286068, 0.5), (-31.305546, 0.5), (-31.305546, -0.550166), (-31.471592, -0.569754), (-31.286068, -0.569754), (-31.305546, -0.550166), (-31.471592, -0.550166), (-31.20146, -0.042133), (-31.149216, -0.042133), (-31.156649, -0.034321), (-31.194443, -0.034321), (-31.180325, -0.042138), (-31.128077, -0.042138), (-31.135096, -0.034326), (-31.172892, -0.034326), (-31.306263, 1.537282), (-31.306263, 0.490881), (-31.298824, 0.490881), (-31.298824, 1.537282), (-31.149216, -0.042133), (-31.149216, 0.123418), (-31.156649, 0.123418), (-31.156649, -0.034321), (-31.28782, 0.490881), (-31.28782, 1.538022), (-31.295664, 1.538022), (-31.295664, 0.490881), (-31.21957, 0.123418), (-31.20146, -0.042133), (-31.194443, -0.034321), (-31.21173, 0.123418), (-31.306263, 0.490881), (-31.306263, -0.555519), (-31.298824, -0.555519), (-31.298824, 0.490881), (-31.180325, 0.123423), (-31.180325, -0.042138), (-31.172892, -0.034326), (-31.172892, 0.123423), (-31.28782, -0.55626), (-31.28782, 0.490881), (-31.295664, 0.490881), (-31.295664, -0.55626), (-31.128077, -0.042138), (-31.109974, 0.123423), (-31.117815, 0.123423), (-31.135096, -0.034326)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_Television_4_1"
        {
            token outputs:surface.connect = </root/_materials/M_Television_4_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_Television_4_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_Television_4_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_Television_4_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_Television_4_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

