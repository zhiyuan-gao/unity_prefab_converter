#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer4C6"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer4C6" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(0.000154, -0.185926, -0.841603), (0.447011, 0.119722, 0.152826)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 52, 53, 70, 63, 58, 37, 41, 57, 63, 34, 35, 62, 62, 35, 36, 64, 57, 41, 40, 69, 71, 38, 39, 70, 69, 40, 38, 71, 64, 36, 37, 58, 70, 39, 34, 63, 28, 34, 39, 29, 58, 77, 76, 64, 71, 79, 78, 69, 71, 70, 53, 80, 79, 57, 69, 78, 81, 62, 64, 76, 82, 62, 82, 83, 52, 63, 77, 58, 57, 81, 53, 52, 83, 80, 85, 84, 28, 29, 95, 94, 93, 92, 35, 34, 28, 84, 88, 89, 36, 35, 88, 40, 41, 86, 90, 38, 91, 85, 29, 39, 91, 38, 40, 90, 37, 36, 89, 87, 41, 37, 92, 93, 37, 87, 95, 92, 87, 86, 94, 95, 86, 41, 93, 94, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 67, 68, 72, 73, 66, 67, 73, 74, 65, 66, 74, 75, 56, 65, 75, 59, 61, 72, 68, 60, 54, 55, 61, 60, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 76, 77, 59, 75, 74, 73, 72, 61, 78, 79, 54, 60, 79, 80, 54, 78, 60, 68, 67, 66, 65, 56, 81, 76, 61, 55, 82, 82, 55, 83, 56, 59, 77, 81, 80, 83, 55, 54, 85, 33, 30, 84, 87, 44, 43, 86, 88, 84, 30, 89, 88, 30, 31, 90, 86, 43, 47, 49, 51, 42, 32, 85, 91, 33, 90, 32, 33, 91, 89, 31, 45, 50, 48, 46, 44, 87, 20, 21, 23, 22, 24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer4C6_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.0000018394785, -0.865403, 0.5010764), (-0.0000030733645, -0.8654086, 0.50106674), (-0.0000023527764, -0.9598854, 0.2803927), (-0.0000023527764, -0.9598854, 0.2803927), (-0.026202872, -0.09868682, 0.99477357), (-0.008712432, -0.026817469, 0.9996024), (0.008713414, -0.026819982, 0.9996023), (0.026206512, -0.098580115, 0.99478406), (-9.323371e-7, 0, 1), (-0.0000010093388, 0, 1), (-9.4378703e-7, 0, 1), (-9.281262e-7, 0, 1), (-9.281262e-7, 0, 1), (-9.4378703e-7, 0, 1), (-0.06199855, 0.0026977016, 0.99807256), (-0.061998587, 0.0027001228, 0.9980725), (0.026206512, -0.098580115, 0.99478406), (0.008713414, -0.026819982, 0.9996023), (0.062001113, 0.002700262, 0.9980724), (0.062001355, 0.0026997908, 0.99807245), (-3.4806777e-7, 0, 1), (-3.5394305e-7, 0, 1), (-3.7849284e-7, 0, 1), (-3.4966146e-7, 0, 1), (0.062001355, 0.0026997908, 0.99807245), (0.062001113, 0.002700262, 0.9980724), (-3.5394305e-7, 0, 1), (-3.4806777e-7, 0, 1), (-0.061998587, 0.0027001228, 0.9980725), (-0.06199855, 0.0026977016, 0.99807256), (-0.008712432, -0.026817469, 0.9996024), (-0.026202872, -0.09868682, 0.99477357), (-3.4966146e-7, 0, 1), (-3.7849284e-7, 0, 1), (-0.0000010093388, 0, 1), (-9.323371e-7, 0, 1), (-0.000037778085, 0.9155205, -0.40227145), (0.00000238206, 1, 0), (0.00000238206, 1, 0), (0.000002892892, 0.9155198, -0.40227288), (0.99945176, -0.013438896, -0.030258708), (0.99982667, -0.013700495, -0.01260134), (0.99983203, -0.013478316, -0.012421977), (0.9994566, -0.013210629, -0.03019964), (-0.99250656, 0.08199366, -0.09059716), (-0.99621606, 0.0832948, -0.024805486), (-0.99983203, -0.013480183, -0.012419889), (-0.99945676, -0.0132019725, -0.030199062), (-0.99250656, 0.08199366, -0.09059716), (-0.9915422, 0.08812649, -0.09527733), (-0.9915422, 0.08812649, -0.09527733), (-0.99518985, 0.09219803, -0.03311656), (-0.99621606, 0.0832948, -0.024805486), (-0.9994526, -0.013432218, -0.03023409), (-0.99945676, -0.0132019725, -0.030199062), (-0.99983203, -0.013480183, -0.012419889), (-0.9998269, -0.013700824, -0.012588099), (0.992506, 0.08199692, -0.09060033), (0.9994566, -0.013210629, -0.03019964), (0.99983203, -0.013478316, -0.012421977), (0.99621636, 0.083292656, -0.024802519), (0.992506, 0.08199692, -0.09060033), (0.99621636, 0.083292656, -0.024802519), (0.9951905, 0.09220071, -0.033085424), (0.9915399, 0.08812451, -0.09530386), (0.9915399, 0.08812451, -0.09530386), (3.662426e-7, 0.99725056, 0.07410381), (0.0000036267427, 0.9823192, 0.18721405), (0.0000036267427, 0.9823192, 0.18721405), (0.0004940338, 0.9972502, 0.07410668), (-0.0000030733645, -0.8654086, 0.50106674), (0.0000018394785, -0.865403, 0.5010764), (0.0013952196, -0.9674296, 0.25313622), (-8.6822547e-7, -0.9674323, 0.2531297), (-0.000107544045, 0.96469957, -0.26335308), (0.0000031735033, 0.9646999, -0.26335162), (-0.000037778085, 0.9155205, -0.40227145), (0.000002892892, 0.9155198, -0.40227288), (-0.0000023465234, -0.98569256, -0.16855288), (-0.0000023465234, -0.98569256, -0.16855288), (-0.0000023465234, -0.98569256, -0.16855288), (-0.0000023465234, -0.98569256, -0.16855288), (-1, -1.22663755e-8, 0), (-1, -2.453275e-8, 0), (-1, -2.453275e-8, 0), (-1, -1.5170915e-8, 0), (-1, 5.4501506e-8, 0), (-1, 0.0000023278612, 1.7382385e-7), (-1, 0.000002225362, 1.9031067e-7), (-1, -1.22663755e-8, 0), (-1, 5.4501506e-8, 0), (1, -0.000002179951, -1.8717678e-7), (1, -0.0000019448694, -1.6699201e-7), (1, -0.0000030825167, -2.4054776e-7), (1, -0.0000022068243, -1.709388e-7), (1, 9.813149e-8, 0), (1, 4.9065747e-8, 0), (1, 1.2136891e-7, 0), (1, 1.9626297e-7, 0), (1, 1.9626297e-7, 0), (1, 4.9065747e-8, 0), (1, 9.813149e-8, 0), (1, -0.000002179951, -1.8717678e-7), (1, -0.0000022068243, -1.709388e-7), (-1, 0.0000019854535, 1.6979392e-7), (-1, 0.000002225362, 1.9031067e-7), (-1, 0.0000023278612, 1.7382385e-7), (-1, 0.000003165456, 2.4460118e-7), (0.008713414, -0.026819982, 0.9996023), (-0.008712432, -0.026817469, 0.9996024), (-8.615783e-9, 0, 1), (-8.615783e-9, 0, 1), (-1, 0.0000019854535, 1.6979392e-7), (-1, 0.000003165456, 2.4460118e-7), (-1, 0, 0), (-1, 0, 0), (-8.78975e-9, 0, -1), (-8.78975e-9, 0, -1), (-8.78975e-9, 0, -1), (-8.78975e-9, 0, -1), (1, -0.0000030825167, -2.4054776e-7), (1, -0.0000019448694, -1.6699201e-7), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-9.0953836e-7, 0.35202846, 0.9359893), (-3.8405415e-7, 0.013805274, 0.99990475), (0.00081041997, 0.013803586, 0.99990445), (0.0000010016629, 0.3520151, 0.9359944), (0.0000017225824, 0.7071076, 0.70710593), (-9.0953836e-7, 0.35202846, 0.9359893), (0.0000010016629, 0.3520151, 0.9359944), (0.0000017225818, 0.70710725, 0.70710623), (0.0000022477284, 0.94167936, 0.33651137), (0.0000017225824, 0.7071076, 0.70710593), (0.0000017225818, 0.70710725, 0.70710623), (-7.6866127e-7, 0.9416836, 0.33649972), (-0.00058835483, 0.9978919, 0.06489457), (0.0000022477284, 0.94167936, 0.33651137), (-7.6866127e-7, 0.9416836, 0.33649972), (8.017232e-7, 0.9978925, 0.06488797), (-7.7066943e-7, 0.0047606938, 0.9999886), (0.00081041997, 0.013803586, 0.99990445), (-3.8405415e-7, 0.013805274, 0.99990475), (-5.274882e-7, 0.0047605783, 0.9999887), (-0.000001168076, -0.47574216, 0.8795848), (-0.000001168076, -0.47574216, 0.8795848), (-7.7066943e-7, 0.0047606938, 0.9999886), (-5.274882e-7, 0.0047605783, 0.9999887), (0.0000017063068, 0.47579545, -0.879556), (-3.1816853e-7, 0.012266755, -0.9999247), (0.00009029941, 0.01226306, -0.9999248), (0.0000017063068, 0.47579545, -0.879556), (0.00009029941, 0.01226306, -0.9999248), (-3.1816853e-7, 0.012266755, -0.9999247), (-2.2297833e-7, -0.007018931, -0.9999754), (2.3793275e-7, -0.007018946, -0.9999754), (-0.0000023686412, -0.9981072, -0.06149877), (1.4070929e-7, -0.9981072, -0.061498776), (-0.0000022040733, -0.92385554, -0.38274142), (-0.0000022040733, -0.92385554, -0.38274118), (-0.0000022040733, -0.92385554, -0.38274118), (-0.0000022040733, -0.92385554, -0.38274142), (-0.0000016960208, -0.70714796, -0.70706564), (-0.0000016960214, -0.70714825, -0.7070653), (-0.0000016960214, -0.70714825, -0.7070653), (-0.0000016960208, -0.70714796, -0.70706564), (-9.19461e-7, -0.38273194, -0.9238594), (-9.1946225e-7, -0.38273248, -0.92385924), (-9.1946225e-7, -0.38273248, -0.92385924), (-9.19461e-7, -0.38273194, -0.9238594), (2.3793275e-7, -0.007018946, -0.9999754), (-2.2297833e-7, -0.007018931, -0.9999754), (0.99983203, -0.013478316, -0.012421977), (0.99982667, -0.013700495, -0.01260134), (0.99985015, -0.013750455, -0.010511119), (0.99985015, -0.013750455, -0.010511119), (0.99985015, -0.013750455, -0.010511119), (0.99985015, -0.013750455, -0.010511119), (0.99985015, -0.013750455, -0.010511119), (0.9998522, -0.013611547, -0.010499262), (-0.99983203, -0.013480183, -0.012419889), (-0.99621606, 0.0832948, -0.024805486), (-0.9989656, 0.04407149, -0.011198712), (-0.9998528, -0.013611165, -0.010441817), (-0.99621606, 0.0832948, -0.024805486), (-0.99518985, 0.09219803, -0.03311656), (-0.9989656, 0.04407149, -0.011198712), (-0.99983203, -0.013480183, -0.012419889), (-0.9998528, -0.013611165, -0.010441817), (-0.9998504, -0.013740969, -0.010510802), (-0.9998504, -0.013740969, -0.010510802), (-0.9998504, -0.013740969, -0.010510802), (-0.9998504, -0.013740969, -0.010510802), (-0.9998504, -0.013740969, -0.010510802), (-0.9998269, -0.013700824, -0.012588099), (0.99983203, -0.013478316, -0.012421977), (0.9998522, -0.013611547, -0.010499262), (0.99897045, 0.043989338, -0.011098862), (0.99621636, 0.083292656, -0.024802519), (0.99621636, 0.083292656, -0.024802519), (0.99897045, 0.043989338, -0.011098862), (0.9951905, 0.09220071, -0.033085424), (-0.00058835483, 0.9978919, 0.06489457), (8.017232e-7, 0.9978925, 0.06488797), (3.662426e-7, 0.99725056, 0.07410381), (0.0004940338, 0.9972502, 0.07410668), (-8.6822547e-7, -0.9674323, 0.2531297), (0.0013952196, -0.9674296, 0.25313622), (-0.0000023879495, -0.9738737, 0.22709043), (-0.0000023879495, -0.9738737, 0.22709043), (-0.000107544045, 0.96469957, -0.26335308), (0.0000034794489, 0.97033453, -0.24176605), (0.0000034794489, 0.97033453, -0.24176605), (0.0000031735033, 0.9646999, -0.26335162), (-0.0000023783991, -0.9983957, -0.056622695), (1.4070929e-7, -0.9981072, -0.061498776), (-0.0000023686412, -0.9981072, -0.06149877), (-0.0000023783991, -0.9983957, -0.056622695), (-1, 5.4501506e-8, 0), (-1, -1.5170915e-8, 0), (-1, 2.1691469e-7, 0), (-1, 0.0000023278612, 1.7382385e-7), (-1, 5.4501506e-8, 0), (-1, 2.1691469e-7, 0), (-1, 0.0000028404788, 1.8683065e-7), (1, -0.0000022068243, -1.709388e-7), (1, -0.0000030825167, -2.4054776e-7), (1, -0.0000044673952, -3.0940166e-7), (1, -0.0000044673952, -3.0940166e-7), (1, -0.0000044673952, -3.0940166e-7), (1, -0.0000044673952, -3.0940166e-7), (1, -0.0000044673952, -3.0940166e-7), (1, -0.000002652321, -1.8369374e-7), (1, 1.2136891e-7, 0), (1, 4.9065747e-8, 0), (1, 0, 0), (1, -0.0000022068243, -1.709388e-7), (1, -0.000002652321, -1.8369374e-7), (1, 0, 0), (1, 4.9065747e-8, 0), (-1, 0.0000023278612, 1.7382385e-7), (-1, 0.0000028404788, 1.8683065e-7), (-1, 0.0000046181826, 3.1467408e-7), (-1, 0.0000046181826, 3.1467408e-7), (-1, 0.0000046181826, 3.1467408e-7), (-1, 0.0000046181826, 3.1467408e-7), (-1, 0.0000046181826, 3.1467408e-7), (-1, 0.000003165456, 2.4460118e-7), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.000154, 0.015229, -0.841603), (0.000163, 0.015229, -0.841603), (0.000154, 0.015237, -0.841603), (0.000163, 0.015237, -0.841603), (0.000154, 0.015229, -0.841603), (0.000163, 0.015229, -0.841603), (0.000154, 0.015237, -0.841603), (0.000163, 0.015237, -0.841603), (0.000154, 0.015229, -0.841603), (0.000163, 0.015229, -0.841603), (0.000154, 0.015237, -0.841603), (0.000163, 0.015237, -0.841603), (0.000154, 0.015229, -0.841603), (0.000163, 0.015229, -0.841603), (0.000154, 0.015237, -0.841603), (0.000163, 0.015237, -0.841603), (0.000154, 0.015229, -0.841603), (0.000163, 0.015229, -0.841603), (0.000154, 0.015237, -0.841603), (0.000163, 0.015237, -0.841603), (0.000154, 0.015229, -0.841603), (0.000163, 0.015229, -0.841603), (0.000154, 0.015237, -0.841603), (0.000163, 0.015237, -0.841603), (0.000154, 0.015229, -0.841603), (0.000163, 0.015229, -0.841603), (0.000154, 0.015237, -0.841603), (0.000163, 0.015237, -0.841603), (0.027887, 0.119722, 0.14523), (0.447011, 0.119721, 0.14523), (0.027887, 0.057353, -0.083298), (0.027887, 0.052915, -0.085699), (0.447011, 0.052913, -0.085699), (0.447011, 0.057352, -0.083298), (0.027887, 0.119722, 0.151774), (0.027887, 0.057353, 0.151774), (0.027887, 0.052915, 0.151774), (0.027886, -0.173477, 0.151774), (0.447011, 0.057352, 0.151774), (0.447011, 0.119721, 0.151774), (0.447011, 0.052913, 0.151774), (0.44701, -0.173479, 0.151774), (0.44701, -0.140436, -0.085699), (0.44701, -0.158768, -0.067367), (0.027886, -0.158767, -0.067367), (0.027886, -0.140435, -0.085699), (0.027886, -0.157371, -0.074382), (0.44701, -0.157372, -0.074382), (0.027886, -0.153397, -0.080329), (0.44701, -0.153398, -0.080329), (0.027886, -0.14745, -0.084304), (0.44701, -0.147451, -0.084304), (0.032441, 0.112222, 0.147464), (0.442457, 0.112221, 0.147464), (0.439942, 0.053192, -0.078777), (0.034956, 0.053193, -0.078777), (0.442607, -0.151005, -0.065931), (0.440049, -0.167327, 0.152826), (0.034848, -0.167325, 0.152826), (0.032289, -0.151004, -0.065931), (0.439942, 0.051406, -0.079743), (0.034956, 0.051407, -0.079743), (0.037732, 0.057353, 0.151774), (0.034849, 0.113481, 0.151774), (0.037732, 0.052915, 0.151774), (0.442539, -0.150107, -0.071373), (0.442539, -0.147838, -0.074769), (0.442539, -0.144442, -0.077038), (0.44259, -0.139663, -0.07785), (0.437166, 0.052913, 0.151774), (0.44005, 0.11348, 0.151774), (0.437166, 0.057352, 0.151774), (0.032306, -0.139661, -0.07785), (0.032358, -0.144441, -0.077038), (0.032358, -0.147837, -0.074769), (0.032358, -0.150106, -0.071373), (0.037169, 0.052609, 0.131809), (0.03422, -0.16332, 0.131809), (0.437729, 0.052607, 0.131809), (0.437735, 0.056499, 0.131809), (0.442034, 0.102297, 0.131809), (0.440676, -0.163321, 0.131809), (0.037163, 0.0565, 0.131809), (0.032864, 0.102298, 0.131809), (0.027887, 0.110949, 0.131809), (0.447011, 0.110947, 0.131809), (0.44701, -0.170064, 0.131809), (0.027886, -0.170063, 0.131809), (0.027887, 0.057353, 0.131809), (0.027887, 0.052915, 0.131809), (0.447011, 0.052913, 0.131809), (0.447011, 0.057352, 0.131809), (0.027886, -0.185925, 0.151774), (0.44701, -0.185926, 0.151774), (0.44701, -0.182512, 0.131809), (0.027886, -0.182511, 0.131809)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-170.84894, -110.532585), (-170.84894, -110.53267), (-170.84885, -110.53267), (-170.84885, -110.532585), (-170.27785, 0.749148), (-170.27785, -0.673762), (-170.26288, -0.665407), (-170.26288, 0.740792), (-171.14839, 0.701471), (-171.16829, 0.723996), (-171.16829, -0.6321), (-171.14839, -0.609576), (-170.23982, 0.701471), (-170.2196, 0.723996), (-170.4214, 0.723996), (-170.4214, 0.69214), (-170.4214, 0.69214), (-170.4214, 0.723996), (-170.43579, 0.723996), (-170.43579, 0.69214), (-171.14839, -0.609576), (-171.16829, -0.6321), (-170.43579, -0.6321), (-170.43579, -0.600245), (-170.4214, -0.600245), (-170.4214, -0.6321), (-170.2196, -0.6321), (-170.23982, -0.609576), (-170.43579, -0.600245), (-170.43579, -0.6321), (-170.4214, -0.6321), (-170.4214, -0.600245), (-170.43579, 0.69214), (-170.43579, 0.723996), (-171.16829, 0.723996), (-171.14839, 0.701471), (-170.23982, -0.609576), (-170.2196, -0.6321), (-170.2196, 0.723996), (-170.23982, 0.701471), (-170.42448, 0.766106), (-170.44696, 0.766106), (-170.44696, -0.67421), (-170.42448, -0.67421), (-170.09798, 0.932186), (-170.16599, 0.919232), (-170.16599, 0.220964), (-170.1014, 0.219975), (-170.14487, 0.750715), (-170.20946, 0.747958), (-170.20946, 0.735372), (-170.14487, 0.736361), (-170.14487, 0.750715), (-170.14487, 0.932247), (-170.15884, 0.928176), (-170.20946, 0.89608), (-170.20946, 0.747958), (-170.14148, 0.024055), (-170.14487, 0.736361), (-170.20946, 0.735372), (-170.20946, 0.037011), (-170.1014, 0.205622), (-170.1014, 0.219975), (-170.16599, 0.220964), (-170.16599, 0.208379), (-170.1014, 0.205622), (-170.16599, 0.208379), (-170.16599, 0.060278), (-170.11533, 0.028186), (-170.1014, 0.024116), (-170.21935, 0.697061), (-170.28786, 0.695014), (-170.28786, -0.626082), (-170.21935, -0.628128), (-170.27785, -0.673762), (-170.27785, 0.749148), (-170.33215, 0.747681), (-170.33215, -0.672295), (-170.37837, -0.67421), (-170.37837, 0.766106), (-170.42448, 0.766106), (-170.42448, -0.67421), (-170.40218, 0.728055), (-170.40218, -0.636159), (-170.3372, -0.636159), (-170.3372, 0.728055), (-170.17763, 0.235369), (-170.17763, 0.436895), (-170.19878, 0.436895), (-170.24214, 0.408546), (-170.24214, 0.235369), (-170.24214, 0.221029), (-170.17763, 0.221029), (-170.17763, 0.235369), (-170.24214, 0.235369), (-170.13467, -0.334849), (-170.13467, 0.3967), (-170.19917, 0.385667), (-170.19917, -0.334849), (-170.13467, -0.349191), (-170.19917, -0.349191), (-170.19917, -0.522376), (-170.15579, -0.550727), (-170.13467, -0.550727), (-170.19917, -0.349191), (-170.13467, -0.349191), (-170.13467, -0.334849), (-170.19917, -0.334849), (-170.17763, -0.51048), (-170.17763, 0.221029), (-170.24214, 0.221029), (-170.24214, -0.499448), (-171.16829, -0.6321), (-171.16829, 0.723996), (-171.20857, 0.723996), (-171.20857, -0.6321), (-170.17763, -0.51048), (-170.24214, -0.499448), (-170.24214, -0.539668), (-170.17763, -0.5507), (-170.35365, 0.72313), (-170.35365, -0.631235), (-170.31343, -0.631235), (-170.31343, 0.72313), (-170.19917, 0.385667), (-170.13467, 0.3967), (-170.13467, 0.436923), (-170.19917, 0.42589), (-143.95569, -107.3105), (-143.95569, -113.009964), (-138.83612, -113.009964), (-138.83612, -107.3105), (-118.5394, -108.98873), (-118.5394, -112.8919), (-115.04002, -112.8919), (-115.04002, -108.98873), (-88.71502, -110.12652), (-88.71502, -113.31285), (-85.85206, -113.31285), (-85.85206, -110.12652), (-68.866554, -111.45752), (-68.866554, -111.45753), (-68.86655, -111.45753), (-68.86655, -111.45752), (-71.44027, -0.66131), (-71.42575, -0.661468), (-71.42575, 0.585117), (-71.44027, 0.58496), (-71.45059, -0.66131), (-71.44027, -0.66131), (-71.44027, 0.58496), (-71.45059, 0.58496), (-71.45749, -0.66131), (-71.45059, -0.66131), (-71.45059, 0.58496), (-71.45749, 0.58496), (-70.920654, -1.08163), (-70.90422, -1.081422), (-70.90422, 0.157624), (-70.920654, 0.15783), (-70.84522, 0.577069), (-71.42575, 0.585117), (-71.42575, -0.661468), (-70.84522, -0.653419), (-70.8398, -0.653419), (-70.8398, 0.577069), (-70.84522, 0.577069), (-70.84522, -0.653419), (-72.20315, -1.097223), (-72.18959, -1.097223), (-72.18959, 0.182437), (-72.20315, 0.182437), (-72.18959, 0.182437), (-72.18959, -1.097223), (-71.599266, -1.097223), (-71.599266, 0.182437), (-71.94337, -1.090415), (-71.94337, 0.175629), (-71.96456, 0.175629), (-71.96456, -1.090415), (-71.547554, -1.097223), (-71.547554, 0.182437), (-71.559685, 0.182437), (-71.559685, -1.097223), (-71.559685, -1.097223), (-71.559685, 0.182437), (-71.57784, 0.182437), (-71.57784, -1.097223), (-71.57784, -1.097223), (-71.57784, 0.182437), (-71.599266, 0.182437), (-71.599266, -1.097223), (-71.55772, -0.062675), (-71.55772, 0.58904), (-72.15454, 0.551868), (-72.17096, 0.54916), (-72.18121, 0.54231), (-72.188065, 0.53206), (-72.19051, 0.517635), (-72.19623, -0.059047), (-71.33482, 0.439067), (-71.33482, 0.450813), (-71.97041, 0.440831), (-71.97333, 0.43544), (-71.33482, 0.450813), (-71.33482, 0.589042), (-71.97041, 0.440831), (-71.33482, 0.439067), (-71.97333, 0.43544), (-71.96762, -0.141245), (-71.96517, -0.155669), (-71.95832, -0.165919), (-71.94807, -0.172769), (-71.93165, -0.175478), (-71.33482, -0.21265), (-71.55772, -0.062675), (-72.19623, -0.059047), (-72.193306, -0.064438), (-71.55772, -0.074421), (-71.55772, -0.074421), (-72.193306, -0.064438), (-71.55772, -0.212648), (-70.920654, -1.08163), (-70.920654, 0.15783), (-71.517975, 0.151999), (-71.517975, -1.075798), (-71.04431, -0.655261), (-71.04431, 0.595798), (-71.68819, 0.5894), (-71.68819, -0.648864), (-71.76083, -1.099306), (-71.10194, -1.099306), (-71.10194, 0.18452), (-71.76083, 0.18452), (-71.34172, 0.175629), (-71.94337, 0.175629), (-71.94337, -1.090415), (-71.34172, -1.090415), (-71.26298, 0.166919), (-71.26298, 0.328635), (-71.912025, 0.166919), (-71.26298, 0.153527), (-71.26298, 0.166919), (-71.912025, 0.166919), (-71.91927, 0.153527), (-71.491394, -0.344166), (-71.491394, 0.328636), (-72.09238, 0.29455), (-72.11354, 0.29034), (-72.13149, 0.278349), (-72.14348, 0.260404), (-72.14769, 0.239237), (-72.14769, -0.344166), (-71.491394, -0.519274), (-71.491394, -0.357557), (-72.14044, -0.357557), (-71.491394, -0.344166), (-72.14769, -0.344166), (-72.14044, -0.357557), (-71.491394, -0.357557), (-71.26298, 0.153527), (-71.91927, 0.153527), (-71.91927, -0.429874), (-71.91506, -0.451041), (-71.90307, -0.468987), (-71.885124, -0.480977), (-71.86395, -0.485188), (-71.26298, -0.519273), (5.646933, -120.60234), (7.358486, -120.60234), (7.358486, -118.890785), (5.646933, -118.890785), (-5.253075, -117.08902), (-3.54152, -117.08902), (-3.54152, -115.377464), (-5.253075, -115.377464)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer4C6_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
                rel material:binding = </root/_materials/M_FridgeDrawer4C6_0>
            }

            def GeomSubset "M_FridgeDrawer4C6_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer4C6_1>
            }

            def GeomSubset "M_FridgeDrawer4C6_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer4C6_2>
            }

            def GeomSubset "M_FridgeDrawer4C6_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33]
                rel material:binding = </root/_materials/M_FridgeDrawer4C6_3>
            }

            def GeomSubset "M_FridgeDrawer4C6_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]
                rel material:binding = </root/_materials/M_FridgeDrawer4C6_4>
            }

            def GeomSubset "M_FridgeDrawer4C6_5" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [63]
                rel material:binding = </root/_materials/M_FridgeDrawer4C6_5>
            }

            def GeomSubset "M_FridgeDrawer4C6_6" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [64]
                rel material:binding = </root/_materials/M_FridgeDrawer4C6_6>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer4C6_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C6_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.1834451, 0.21323532, 0.21323532)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C6_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge.tga@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C6_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer4C6_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C6_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C6_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C6_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C6_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C6_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C6_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C6_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C6_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C6_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C6_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C6_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C6_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C6_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.8014706, 0.8014706, 0.8014706)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C6_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C6_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer4C6_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C6_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_FridgeDrawer4C6_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C6_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C6_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C6_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C6_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C6_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C6_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C6_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C6_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C6_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C6_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C6_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

