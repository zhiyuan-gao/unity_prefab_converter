#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer1_15_FridgeDrawer1C3_1_GeomSubset_2"
    {
        def Mesh "FridgeDrawer1_15_FridgeDrawer1C3_1_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer1C3_2>
            normal3f[] normals = [(0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.000162, 0.042564, -0.884604), (0.000172, 0.042564, -0.884604), (0.000162, 0.042573, -0.884604), (0.000172, 0.042573, -0.884604), (0.000162, 0.042564, -0.884604), (0.000172, 0.042564, -0.884604), (0.000162, 0.042573, -0.884604), (0.000172, 0.042573, -0.884604), (0.000162, 0.042564, -0.884604), (0.000172, 0.042564, -0.884604), (0.000162, 0.042573, -0.884604), (0.000172, 0.042573, -0.884604), (0.000162, 0.042564, -0.884604), (0.000172, 0.042564, -0.884604), (0.000162, 0.042573, -0.884604), (0.000172, 0.042573, -0.884604), (0.000162, 0.042564, -0.884604), (0.000172, 0.042564, -0.884604), (0.000162, 0.042573, -0.884604), (0.000172, 0.042573, -0.884604), (0.000162, 0.042564, -0.884604), (0.000172, 0.042564, -0.884604), (0.000162, 0.042573, -0.884604), (0.000172, 0.042573, -0.884604), (0.000162, 0.042564, -0.884604), (0.000172, 0.042564, -0.884604), (0.000162, 0.042573, -0.884604), (0.000172, 0.042573, -0.884604), (-0.470219, 0.157253, 0.046485), (-0.029045, 0.157252, 0.046485), (-0.47022, 0.088799, -0.053823), (-0.47022, 0.083927, -0.056348), (-0.029045, 0.083926, -0.056348), (-0.029045, 0.088797, -0.053823), (-0.470219, 0.157253, 0.053365), (-0.47022, 0.088799, 0.053365), (-0.47022, 0.083927, 0.053365), (-0.47022, -0.164552, 0.053365), (-0.029045, 0.088797, 0.053365), (-0.029045, 0.157252, 0.053365), (-0.029045, 0.083926, 0.053365), (-0.029046, -0.164553, 0.053365), (-0.029046, -0.128286, -0.056348), (-0.029046, -0.148407, -0.037075), (-0.47022, -0.148406, -0.037074), (-0.47022, -0.128285, -0.056348), (-0.47022, -0.146874, -0.04445), (-0.029046, -0.146875, -0.04445), (-0.47022, -0.142512, -0.050702), (-0.029046, -0.142514, -0.050702), (-0.47022, -0.135985, -0.05488), (-0.029046, -0.135986, -0.05488), (-0.465426, 0.149021, 0.048834), (-0.033839, 0.14902, 0.048834), (-0.036486, 0.084232, -0.04907), (-0.462779, 0.084233, -0.04907), (-0.033681, -0.139887, -0.035565), (-0.036374, -0.157801, 0.054471), (-0.462892, -0.157799, 0.054471), (-0.465585, -0.139885, -0.035565), (-0.036486, 0.082271, -0.050086), (-0.462779, 0.082273, -0.050086), (-0.459856, 0.088799, 0.053365), (-0.462891, 0.150403, 0.053365), (-0.459856, 0.083927, 0.053365), (-0.033753, -0.138902, -0.041286), (-0.033753, -0.136411, -0.044856), (-0.033753, -0.132683, -0.047242), (-0.033698, -0.127438, -0.048095), (-0.039409, 0.083926, 0.053365), (-0.036373, 0.150401, 0.053365), (-0.039409, 0.088797, 0.053365), (-0.465568, -0.127437, -0.048095), (-0.465513, -0.132682, -0.047242), (-0.465513, -0.13641, -0.044856), (-0.465513, -0.1389, -0.041286), (-0.460449, 0.083592, 0.032374), (-0.463553, -0.153403, 0.032374), (-0.038816, 0.08359, 0.032374), (-0.03881, 0.087862, 0.032374), (-0.034284, 0.138128, 0.032374), (-0.035713, -0.153404, 0.032374), (-0.460455, 0.087863, 0.032374), (-0.464981, 0.138129, 0.032374), (-0.470219, 0.147623, 0.032374), (-0.029045, 0.147622, 0.032374), (-0.029046, -0.160805, 0.032374), (-0.47022, -0.160804, 0.032374), (-0.47022, 0.088799, 0.032374), (-0.47022, 0.083927, 0.032374), (-0.029045, 0.083926, 0.032374), (-0.029045, 0.088797, 0.032374), (-0.47022, -0.178214, 0.053365), (-0.029046, -0.178215, 0.053365), (-0.029046, -0.174467, 0.032374), (-0.47022, -0.174466, 0.032374)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-118.539085, -109.61047), (-118.539085, -113.51364), (-114.8868, -113.51364), (-114.8868, -109.61047)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer1C3_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C3_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C3_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C3_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

