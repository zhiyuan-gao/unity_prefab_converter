#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer1C3"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer1C3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.000172, -0.178215, -0.884604), (0.47022, 0.157253, 0.054471)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 52, 53, 70, 63, 58, 37, 41, 57, 63, 34, 35, 62, 62, 35, 36, 64, 57, 41, 40, 69, 71, 38, 39, 70, 69, 40, 38, 71, 64, 36, 37, 58, 70, 39, 34, 63, 28, 34, 39, 29, 58, 77, 76, 64, 71, 79, 78, 69, 71, 70, 53, 80, 79, 57, 69, 78, 81, 62, 64, 76, 82, 62, 82, 83, 52, 63, 77, 58, 57, 81, 53, 52, 83, 80, 85, 84, 28, 29, 95, 94, 93, 92, 35, 34, 28, 84, 88, 89, 36, 35, 88, 40, 41, 86, 90, 38, 91, 85, 29, 39, 91, 38, 40, 90, 37, 36, 89, 87, 41, 37, 92, 93, 37, 87, 95, 92, 87, 86, 94, 95, 86, 41, 93, 94, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 67, 68, 72, 73, 66, 67, 73, 74, 65, 66, 74, 75, 56, 65, 75, 59, 61, 72, 68, 60, 54, 55, 61, 60, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 76, 77, 59, 75, 74, 73, 72, 61, 78, 79, 54, 60, 79, 80, 54, 78, 60, 68, 67, 66, 65, 56, 81, 76, 61, 55, 82, 82, 55, 83, 56, 59, 77, 81, 80, 83, 55, 54, 85, 33, 30, 84, 87, 44, 43, 86, 88, 84, 30, 89, 88, 30, 31, 90, 86, 43, 47, 49, 51, 42, 32, 85, 91, 33, 90, 32, 33, 91, 89, 31, 45, 50, 48, 46, 44, 87, 20, 21, 23, 22, 24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer1C3_0>
            normal3f[] normals = [(0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0.0000041939784, 0.92894524, -0.3702171), (8.866191e-7, 0.92893106, -0.37025303), (-0.0000033367842, 0.95652646, -0.29164568), (-0.0000033367842, 0.95652646, -0.29164568), (-0.035997964, 0.06899696, -0.99696714), (-0.025189707, 0.04958556, -0.9984522), (0.025188312, 0.049583394, -0.99845237), (0.03599793, 0.06900065, -0.99696684), (2.0343994e-7, 0, -1), (2.1298337e-7, 0, -1), (2.0421858e-7, 0, -1), (2.0097127e-7, 0, -1), (2.0097127e-7, 0, -1), (2.0421858e-7, 0, -1), (-0.0017946344, -0.00010089774, -0.9999984), (-0.00079935975, -5.081529e-7, -0.99999976), (0.03599793, 0.06900065, -0.99696684), (0.025188312, 0.049583394, -0.99845237), (0.0017942227, -0.00010076468, -0.99999833), (0.00079904683, -2.4886685e-7, -0.9999997), (-1.7584857e-7, 0, -1), (-1.7869175e-7, 0, -1), (-1.863418e-7, 0, -1), (-1.7801587e-7, 0, -1), (0.00079904683, -2.4886685e-7, -0.9999997), (0.0017942227, -0.00010076468, -0.99999833), (-1.7869175e-7, 0, -1), (-1.7584857e-7, 0, -1), (-0.00079935975, -5.081529e-7, -0.99999976), (-0.0017946344, -0.00010089774, -0.9999984), (-0.025189707, 0.04958556, -0.9984522), (-0.035997964, 0.06899696, -0.99696714), (-1.7801587e-7, 0, -1), (-1.863418e-7, 0, -1), (2.1298337e-7, 0, -1), (2.0343994e-7, 0, -1), (0.0000022265933, -0.9804145, 0.196945), (0.0000022630018, -0.99999994, 0), (0.0000022630018, -0.99999994, 0), (0.0000020829666, -0.98041445, 0.19694528), (0.99945766, 0.012888951, 0.030302718), (0.9994638, 0.013031324, 0.030038342), (0.9995746, -0.003102228, 0.028998796), (0.9995964, -0.0004718135, 0.028404454), (-0.9993376, -0.009212117, 0.03520849), (-0.9991552, -0.01132706, 0.039503288), (-0.9995774, -0.0031100805, 0.028900165), (-0.9995964, -0.00047738338, 0.028403318), (-0.9993376, -0.009212117, 0.03520849), (-0.99183816, -0.0845546, 0.09543322), (-0.99183816, -0.0845546, 0.09543322), (-0.9928257, -0.08550382, 0.08358332), (-0.9991552, -0.01132706, 0.039503288), (-0.9994577, 0.012884732, 0.030301811), (-0.9995964, -0.00047738338, 0.028403318), (-0.9995774, -0.0031100805, 0.028900165), (-0.999465, 0.012988933, 0.030015316), (0.9993387, -0.009105109, 0.0352012), (0.9995964, -0.0004718135, 0.028404454), (0.9995746, -0.003102228, 0.028998796), (0.99915975, -0.011292685, 0.039399587), (0.9993387, -0.009105109, 0.0352012), (0.99915975, -0.011292685, 0.039399587), (0.9928243, -0.085501894, 0.083602466), (0.9918356, -0.0845534, 0.09546133), (0.9918356, -0.0845534, 0.09546133), (0.0000034359605, -0.9807754, -0.19513997), (0.0000034382458, -0.9807755, -0.19513977), (0.0000034382458, -0.9807755, -0.19513977), (0.00000343596, -0.98077536, -0.19513994), (8.866191e-7, 0.92893106, -0.37025303), (0.0000041939784, 0.92894524, -0.3702171), (-0.0000019368053, 0.83394146, -0.551853), (-0.0000019368051, 0.83394146, -0.55185294), (0.0000023352293, -0.8259865, 0.5636899), (0.00000233523, -0.8259865, 0.5636899), (0.0000022265933, -0.9804145, 0.196945), (0.0000020829666, -0.98041445, 0.19694528), (-0.000002227947, 0.9844307, 0.17577298), (-0.000002227947, 0.9844307, 0.17577298), (-0.000002227947, 0.9844307, 0.17577298), (-0.000002227947, 0.9844307, 0.17577298), (-1, -0.000007653455, 0.0000017819654), (-1, -0.00001530691, 0.000003563931), (-1, -0.00001530691, 0.000003563931), (-1, -0.000015571934, 0.0000024613062), (-1, -0.000008618935, 8.909827e-7), (-1, -6.624278e-7, 0), (-1, 0, 0), (-1, -0.000007653455, 0.0000017819654), (-1, -0.000008618935, 8.909827e-7), (1, 0.0000020296552, 1.8105436e-7), (1, 0.0000018013691, 1.6069022e-7), (1, 0.000002867976, 3.7808965e-7), (1, 0.000001938853, 2.8457757e-7), (1, 0, 0), (1, -1.3663272e-7, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, -1.3663272e-7, 0), (1, 0, 0), (1, 0.0000020296552, 1.8105436e-7), (1, 0.000001938853, 2.8457757e-7), (-1, 0, 0), (-1, 0, 0), (-1, -6.624278e-7, 0), (-1, 1.0929856e-7, 0), (0.025188312, 0.049583394, -0.99845237), (-0.025189707, 0.04958556, -0.9984522), (3.0562253e-9, 0, -1), (3.0562253e-9, 0, -1), (-1, 0, 0), (-1, 1.0929856e-7, 0), (-1, 0, 0), (-1, 0, 0), (2.136116e-9, 0, 1), (2.136116e-9, 0, 1), (2.136116e-9, 0, 1), (2.136116e-9, 0, 1), (1, 0.000002867976, 3.7808965e-7), (1, 0.0000018013691, 1.6069022e-7), (1, 0, 0), (1, 0, 0), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (8.5891224e-7, -0.37750307, -0.9260083), (0.00000304298, -0.16170742, -0.98683876), (-0.0007983691, -0.16170311, -0.9868392), (8.2760135e-7, -0.37750238, -0.92600864), (1.152157e-7, -0.69424474, -0.719739), (8.5891224e-7, -0.37750307, -0.9260083), (8.2760135e-7, -0.37750238, -0.92600864), (0.0000020879795, -0.6942819, -0.7197032), (0.0000038342478, -0.9100904, -0.41440994), (1.152157e-7, -0.69424474, -0.719739), (0.0000020879795, -0.6942819, -0.7197032), (-3.9610313e-8, -0.91009074, -0.4144091), (-4.459871e-7, -0.98514885, -0.17170241), (0.0000038342478, -0.9100904, -0.41440994), (-3.9610313e-8, -0.91009074, -0.4144091), (-7.622293e-8, -0.9851489, -0.17170247), (-0.0000022444874, 0.50218654, -0.8647593), (-0.0007983691, -0.16170311, -0.9868392), (0.00000304298, -0.16170742, -0.98683876), (-8.4312677e-7, 0.5021755, -0.86476564), (3.678724e-8, 0.42065462, -0.90722084), (-0.0000019004675, 0.4206661, -0.9072156), (-0.0000022444874, 0.50218654, -0.8647593), (-8.4312677e-7, 0.5021755, -0.86476564), (0.00008849698, -0.51783013, 0.8554835), (0.000001650817, -0.41189015, 0.91123354), (8.4496094e-7, -0.41185454, 0.91124964), (3.1238756e-7, -0.5178338, 0.85548127), (8.4496094e-7, -0.41185454, 0.91124964), (0.000001650817, -0.41189015, 0.91123354), (0.0000028763925, 0.1739824, 0.9847488), (-2.0687466e-7, 0.17398226, 0.9847488), (-0.0000024375227, 0.97969073, 0.20051438), (-0.0000024373128, 0.97969073, 0.20051442), (-0.0000026758066, 0.918708, 0.39493746), (-5.51604e-8, 0.9187427, 0.3948567), (-5.51604e-8, 0.9187427, 0.3948567), (-0.0000026758066, 0.918708, 0.39493746), (-0.0000023599073, 0.69395274, 0.72002053), (-6.9358975e-8, 0.6939217, 0.7200505), (-6.9358975e-8, 0.6939217, 0.7200505), (-0.0000023599073, 0.69395274, 0.72002053), (-0.0000011484336, 0.37065023, 0.92877257), (4.4733497e-9, 0.37073255, 0.9287396), (4.4733497e-9, 0.37073255, 0.9287396), (-0.0000011484336, 0.37065023, 0.92877257), (-2.0687466e-7, 0.17398226, 0.9847488), (0.0000028763925, 0.1739824, 0.9847488), (0.9995746, -0.003102228, 0.028998796), (0.9994638, 0.013031324, 0.030038342), (0.999493, 0.013723558, 0.028729128), (0.999493, 0.013723558, 0.028729128), (0.999493, 0.013723558, 0.028729128), (0.999493, 0.013723558, 0.028729128), (0.999493, 0.013723558, 0.028729128), (0.9995895, -0.0016931953, 0.028599575), (-0.9995774, -0.0031100805, 0.028900165), (-0.9991552, -0.01132706, 0.039503288), (-0.9994923, 0.016093828, 0.027499277), (-0.9995894, -0.0017043834, 0.02859946), (-0.9991552, -0.01132706, 0.039503288), (-0.9928257, -0.08550382, 0.08358332), (-0.9994923, 0.016093828, 0.027499277), (-0.9995774, -0.0031100805, 0.028900165), (-0.9995894, -0.0017043834, 0.02859946), (-0.99949306, 0.013719276, 0.02872865), (-0.99949306, 0.013719276, 0.02872865), (-0.99949306, 0.013719276, 0.02872865), (-0.99949306, 0.013719276, 0.02872865), (-0.99949306, 0.013719276, 0.02872865), (-0.999465, 0.012988933, 0.030015316), (0.9995746, -0.003102228, 0.028998796), (0.9995895, -0.0016931953, 0.028599575), (0.999492, 0.016110472, 0.027501404), (0.99915975, -0.011292685, 0.039399587), (0.99915975, -0.011292685, 0.039399587), (0.999492, 0.016110472, 0.027501404), (0.9928243, -0.085501894, 0.083602466), (-4.459871e-7, -0.98514885, -0.17170241), (-7.622293e-8, -0.9851489, -0.17170247), (0.0000034359605, -0.9807754, -0.19513997), (0.00000343596, -0.98077536, -0.19513994), (-0.0000019368051, 0.83394146, -0.55185294), (-0.0000019368053, 0.83394146, -0.551853), (-0.0000019004675, 0.4206661, -0.9072156), (3.678724e-8, 0.42065462, -0.90722084), (0.0000023352293, -0.8259865, 0.5636899), (0.00008849698, -0.51783013, 0.8554835), (3.1238756e-7, -0.5178338, 0.85548127), (0.00000233523, -0.8259865, 0.5636899), (-0.0000024273832, 0.9844363, 0.17574225), (-0.0000024373128, 0.97969073, 0.20051442), (-0.0000024375227, 0.97969073, 0.20051438), (-0.0000024273832, 0.9844363, 0.17574225), (-1, -0.000008618935, 8.909827e-7), (-1, -0.000015571934, 0.0000024613062), (-1, -0.000005981297, 0), (-1, -6.624278e-7, 0), (-1, -0.000008618935, 8.909827e-7), (-1, -0.000005981297, 0), (-1, -0.0000010231498, 0), (1, 0.000001938853, 2.8457757e-7), (1, 0.000002867976, 3.7808965e-7), (0.99999994, 0.0000042426327, 7.7620155e-7), (0.99999994, 0.0000042426327, 7.7620155e-7), (0.99999994, 0.0000042426327, 7.7620155e-7), (0.99999994, 0.0000042426327, 7.7620155e-7), (0.99999994, 0.0000042426327, 7.7620155e-7), (1, 0.00000227806, 4.5779436e-7), (1, 0, 0), (1, -1.3663272e-7, 0), (1, -4.2292476e-7, 0), (1, 0.000001938853, 2.8457757e-7), (1, 0.00000227806, 4.5779436e-7), (1, -4.2292476e-7, 0), (1, -1.3663272e-7, 0), (-1, -6.624278e-7, 0), (-1, -0.0000010231498, 0), (-1, 3.5559307e-7, 0), (-1, 3.5559307e-7, 0), (-1, 3.5559307e-7, 0), (-1, 3.5559307e-7, 0), (-1, 3.5559307e-7, 0), (-1, 1.0929856e-7, 0), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (0.470219, 0.157253, 0.046485), (0.029045, 0.157252, 0.046485), (0.47022, 0.088799, -0.053823), (0.47022, 0.083927, -0.056348), (0.029045, 0.083926, -0.056348), (0.029045, 0.088797, -0.053823), (0.470219, 0.157253, 0.053365), (0.47022, 0.088799, 0.053365), (0.47022, 0.083927, 0.053365), (0.47022, -0.164552, 0.053365), (0.029045, 0.088797, 0.053365), (0.029045, 0.157252, 0.053365), (0.029045, 0.083926, 0.053365), (0.029046, -0.164553, 0.053365), (0.029046, -0.128286, -0.056348), (0.029046, -0.148407, -0.037075), (0.47022, -0.148406, -0.037074), (0.47022, -0.128285, -0.056348), (0.47022, -0.146874, -0.04445), (0.029046, -0.146875, -0.04445), (0.47022, -0.142512, -0.050702), (0.029046, -0.142514, -0.050702), (0.47022, -0.135985, -0.05488), (0.029046, -0.135986, -0.05488), (0.465426, 0.149021, 0.048834), (0.033839, 0.14902, 0.048834), (0.036486, 0.084232, -0.04907), (0.462779, 0.084233, -0.04907), (0.033681, -0.139887, -0.035565), (0.036374, -0.157801, 0.054471), (0.462892, -0.157799, 0.054471), (0.465585, -0.139885, -0.035565), (0.036486, 0.082271, -0.050086), (0.462779, 0.082273, -0.050086), (0.459856, 0.088799, 0.053365), (0.462891, 0.150403, 0.053365), (0.459856, 0.083927, 0.053365), (0.033753, -0.138902, -0.041286), (0.033753, -0.136411, -0.044856), (0.033753, -0.132683, -0.047242), (0.033698, -0.127438, -0.048095), (0.039409, 0.083926, 0.053365), (0.036373, 0.150401, 0.053365), (0.039409, 0.088797, 0.053365), (0.465568, -0.127437, -0.048095), (0.465513, -0.132682, -0.047242), (0.465513, -0.13641, -0.044856), (0.465513, -0.1389, -0.041286), (0.460449, 0.083592, 0.032374), (0.463553, -0.153403, 0.032374), (0.038816, 0.08359, 0.032374), (0.03881, 0.087862, 0.032374), (0.034284, 0.138128, 0.032374), (0.035713, -0.153404, 0.032374), (0.460455, 0.087863, 0.032374), (0.464981, 0.138129, 0.032374), (0.470219, 0.147623, 0.032374), (0.029045, 0.147622, 0.032374), (0.029046, -0.160805, 0.032374), (0.47022, -0.160804, 0.032374), (0.47022, 0.088799, 0.032374), (0.47022, 0.083927, 0.032374), (0.029045, 0.083926, 0.032374), (0.029045, 0.088797, 0.032374), (0.47022, -0.178214, 0.053365), (0.029046, -0.178215, 0.053365), (0.029046, -0.174467, 0.032374), (0.47022, -0.174466, 0.032374)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-170.93037, -111.154526), (-170.93037, -111.1546), (-170.9303, -111.1546), (-170.9303, -111.154526), (-170.28491, 0.708493), (-170.28491, -0.663492), (-170.27052, -0.655435), (-170.27052, 0.700436), (-171.14845, 0.659137), (-171.16832, 0.680741), (-171.16832, -0.619906), (-171.14845, -0.598302), (-170.23982, 0.659137), (-170.2196, 0.680741), (-170.42142, 0.680741), (-170.42142, 0.650188), (-170.42142, 0.650188), (-170.42142, 0.680741), (-170.43576, 0.680741), (-170.43576, 0.650188), (-171.14845, -0.598302), (-171.16832, -0.619906), (-170.43576, -0.619906), (-170.43576, -0.589353), (-170.42142, -0.589353), (-170.42142, -0.619906), (-170.2196, -0.619906), (-170.23982, -0.598302), (-170.43576, -0.589353), (-170.43576, -0.619906), (-170.42142, -0.619906), (-170.42142, -0.589353), (-170.43576, 0.650188), (-170.43576, 0.680741), (-171.16832, 0.680741), (-171.14845, 0.659137), (-170.23982, -0.598302), (-170.2196, -0.619906), (-170.2196, 0.680741), (-170.23982, 0.659137), (-170.42438, 0.724393), (-170.446, 0.724393), (-170.446, -0.663558), (-170.42438, -0.663558), (-170.119, 0.93227), (-170.1841, 0.919313), (-170.1841, 0.220886), (-170.12224, 0.219897), (-170.16403, 0.750773), (-170.22586, 0.748015), (-170.22586, 0.735425), (-170.16403, 0.736414), (-170.16403, 0.750773), (-170.16403, 0.932355), (-170.17738, 0.928283), (-170.22586, 0.896178), (-170.22586, 0.748015), (-170.16077, 0.023908), (-170.16403, 0.736414), (-170.22586, 0.735425), (-170.22586, 0.036867), (-170.12224, 0.205541), (-170.12224, 0.219897), (-170.1841, 0.220886), (-170.1841, 0.208298), (-170.12224, 0.205541), (-170.1841, 0.208298), (-170.1841, 0.060163), (-170.13562, 0.028064), (-170.12224, 0.023993), (-170.22984, 0.655309), (-170.29552, 0.653344), (-170.29552, -0.614533), (-170.22984, -0.616498), (-170.28491, -0.663492), (-170.28491, 0.708493), (-170.33725, 0.707078), (-170.33725, -0.662078), (-170.37999, -0.663558), (-170.37999, 0.724393), (-170.42438, 0.724393), (-170.42438, -0.663558), (-170.40385, 0.684904), (-170.40385, -0.624068), (-170.34157, -0.624068), (-170.34157, 0.684904), (-170.19073, 0.235373), (-170.19073, 0.436886), (-170.21098, 0.436886), (-170.25253, 0.408538), (-170.25253, 0.235373), (-170.25253, 0.221033), (-170.19073, 0.221033), (-170.19073, 0.235373), (-170.25253, 0.235373), (-170.15044, -0.33481), (-170.15044, 0.396692), (-170.21223, 0.38566), (-170.21223, -0.33481), (-170.15044, -0.349151), (-170.21223, -0.349151), (-170.21223, -0.522325), (-170.1707, -0.550675), (-170.15044, -0.550675), (-170.21223, -0.349151), (-170.15044, -0.349151), (-170.15044, -0.33481), (-170.21223, -0.33481), (-170.19073, -0.51043), (-170.19073, 0.221033), (-170.25253, 0.221033), (-170.25253, -0.499399), (-171.16832, -0.619906), (-171.16832, 0.680741), (-171.2086, 0.680741), (-171.2086, -0.619906), (-170.19073, -0.51043), (-170.25253, -0.499399), (-170.25253, -0.539616), (-170.19073, -0.550648), (-170.3586, 0.679656), (-170.3586, -0.61882), (-170.31836, -0.61882), (-170.31836, 0.679656), (-170.21223, 0.38566), (-170.15044, 0.396692), (-170.15044, 0.436912), (-170.21223, 0.42588), (-143.95526, -107.93224), (-143.95526, -113.63171), (-138.6524, -113.63171), (-138.6524, -107.93224), (-118.539085, -109.61047), (-118.539085, -113.51364), (-114.8868, -113.51364), (-114.8868, -109.61047), (-88.71478, -110.74826), (-88.71478, -113.93459), (-85.73376, -113.93459), (-85.73376, -110.74826), (-68.793945, -112.22751), (-68.793945, -112.22752), (-68.79394, -112.22752), (-68.79394, -112.22751), (-71.58265, -1.027438), (-71.56706, -1.027599), (-71.56706, 0.255664), (-71.58265, 0.255503), (-71.59372, -1.027438), (-71.58265, -1.027438), (-71.58265, 0.255503), (-71.59372, 0.255503), (-71.60113, -1.027438), (-71.59372, -1.027438), (-71.59372, 0.255503), (-71.60113, 0.255503), (-71.343094, -0.985304), (-71.32722, -0.985104), (-71.32722, 0.213216), (-71.343094, 0.213415), (-70.943924, 0.247379), (-71.56706, 0.255664), (-71.56706, -1.027599), (-70.943924, -1.019314), (-70.9381, -1.019314), (-70.9381, 0.247379), (-70.943924, 0.247379), (-70.943924, -1.019314), (-72.05335, -1.036425), (-72.03885, -1.036425), (-72.03885, 0.276812), (-72.05335, 0.276812), (-72.03885, 0.276812), (-72.03885, -1.036425), (-71.40716, -1.036425), (-71.40716, 0.276812), (-71.6225, -0.991165), (-71.6225, 0.231552), (-71.64294, 0.231552), (-71.64294, -0.991165), (-71.35183, -1.036425), (-71.35183, 0.276812), (-71.36481, 0.276812), (-71.36481, -1.036425), (-71.36481, -1.036425), (-71.36481, 0.276812), (-71.38424, 0.276812), (-71.38424, -1.036425), (-71.38424, -1.036425), (-71.38424, 0.276812), (-71.40716, 0.276812), (-71.40716, -1.036425), (-71.17755, -0.153923), (-71.17755, 0.497902), (-71.36441, 0.460723), (-71.38014, 0.458014), (-71.38997, 0.451164), (-71.39653, 0.440911), (-71.39887, 0.426485), (-71.40435, -0.150295), (-71.29288, 0.347949), (-71.29288, 0.359697), (-71.516884, 0.349712), (-71.51968, 0.344321), (-71.29288, 0.359697), (-71.29288, 0.497948), (-71.516884, 0.349712), (-71.29288, 0.347949), (-71.51968, 0.344321), (-71.514206, -0.232458), (-71.511856, -0.246884), (-71.505295, -0.257137), (-71.495476, -0.263987), (-71.47974, -0.266697), (-71.29288, -0.303875), (-71.17755, -0.153923), (-71.40435, -0.150295), (-71.40155, -0.155686), (-71.17755, -0.165671), (-71.17755, -0.165671), (-71.40155, -0.155686), (-71.17755, -0.303922), (-71.343094, -0.985304), (-71.343094, 0.213415), (-71.531654, 0.207775), (-71.531654, -0.979663), (-70.777954, -1.025858), (-70.777954, 0.253923), (-70.9381, 0.247379), (-70.9381, -1.019314), (-72.228455, -1.036425), (-72.05335, -1.036425), (-72.05335, 0.276812), (-72.228455, 0.276812), (-71.43002, 0.231552), (-71.6225, 0.231552), (-71.6225, -0.991165), (-71.43002, -0.991165), (-70.925896, 0.370413), (-70.925896, 0.532129), (-71.162865, 0.370413), (-70.925896, 0.357022), (-70.925896, 0.370413), (-71.162865, 0.370413), (-71.16981, 0.357022), (-71.04952, -0.140669), (-71.04952, 0.532131), (-71.24045, 0.498045), (-71.26072, 0.493834), (-71.27791, 0.481844), (-71.2894, 0.463899), (-71.29343, 0.442731), (-71.29343, -0.140669), (-71.04952, -0.315778), (-71.04952, -0.154061), (-71.28649, -0.154061), (-71.04952, -0.140669), (-71.29343, -0.140669), (-71.28649, -0.154061), (-71.04952, -0.154061), (-70.925896, 0.357022), (-71.16981, 0.357022), (-71.16981, -0.226377), (-71.16577, -0.247545), (-71.15429, -0.26549), (-71.1371, -0.27748), (-71.11682, -0.281691), (-70.925896, -0.315776), (5.646933, -121.22408), (7.358486, -121.22408), (7.358486, -119.51253), (5.646933, -119.51253), (-5.253075, -117.71076), (-3.54152, -117.71076), (-3.54152, -115.99921), (-5.253075, -115.99921)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer1C3_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
                rel material:binding = </root/_materials/M_FridgeDrawer1C3_0>
            }

            def GeomSubset "M_FridgeDrawer1C3_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer1C3_1>
            }

            def GeomSubset "M_FridgeDrawer1C3_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer1C3_2>
            }

            def GeomSubset "M_FridgeDrawer1C3_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33]
                rel material:binding = </root/_materials/M_FridgeDrawer1C3_3>
            }

            def GeomSubset "M_FridgeDrawer1C3_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]
                rel material:binding = </root/_materials/M_FridgeDrawer1C3_4>
            }

            def GeomSubset "M_FridgeDrawer1C3_5" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [63]
                rel material:binding = </root/_materials/M_FridgeDrawer1C3_5>
            }

            def GeomSubset "M_FridgeDrawer1C3_6" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [64]
                rel material:binding = </root/_materials/M_FridgeDrawer1C3_6>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer1C3_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C3_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C3_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C3_0/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C3_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Copper_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C3_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer1C3_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C3_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C3_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C3_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C3_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C3_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer1C3_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C3_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C3_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C3_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer1C3_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C3_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.8014706, 0.8014706, 0.8014706)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C3_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C3_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer1C3_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C3_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_FridgeDrawer1C3_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C3_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C3_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C3_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C3_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C3_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer1C3_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C3_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C3_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C3_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C3_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C3_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

