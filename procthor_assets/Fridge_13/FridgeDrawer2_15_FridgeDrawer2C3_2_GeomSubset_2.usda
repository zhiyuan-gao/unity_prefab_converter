#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer2_15_FridgeDrawer2C3_2_GeomSubset_2"
    {
        def Mesh "FridgeDrawer2_15_FridgeDrawer2C3_2_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer2C3_2>
            normal3f[] normals = [(0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.029354, 0.157252, 0.046485), (-0.470528, 0.15725, 0.046485), (-0.029354, 0.088797, -0.053823), (-0.029354, 0.083926, -0.056348), (-0.470528, 0.083925, -0.056348), (-0.470528, 0.088796, -0.053823), (-0.029354, 0.157252, 0.053365), (-0.029354, 0.088797, 0.053365), (-0.029354, 0.083926, 0.053365), (-0.029353, -0.164553, 0.053365), (-0.470528, 0.088796, 0.053365), (-0.470528, 0.15725, 0.053365), (-0.470528, 0.083925, 0.053365), (-0.470527, -0.164554, 0.053365), (-0.470527, -0.128288, -0.056348), (-0.470527, -0.148408, -0.037075), (-0.029353, -0.148407, -0.037074), (-0.029353, -0.128287, -0.056348), (-0.029353, -0.146875, -0.04445), (-0.470527, -0.146877, -0.04445), (-0.029353, -0.142514, -0.050702), (-0.470527, -0.142515, -0.050702), (-0.029353, -0.135986, -0.05488), (-0.470527, -0.135988, -0.05488), (-0.034147, 0.14902, 0.048834), (-0.465734, 0.149019, 0.048834), (-0.463087, 0.08423, -0.04907), (-0.036795, 0.084231, -0.04907), (-0.465892, -0.139888, -0.035565), (-0.463199, -0.157802, 0.054471), (-0.036681, -0.157801, 0.054471), (-0.033988, -0.139887, -0.035565), (-0.463087, 0.08227, -0.050086), (-0.036795, 0.082271, -0.050086), (-0.039717, 0.088797, 0.053365), (-0.036682, 0.150401, 0.053365), (-0.039717, 0.083926, 0.053365), (-0.46582, -0.138903, -0.041286), (-0.46582, -0.136412, -0.044856), (-0.46582, -0.132685, -0.047242), (-0.465875, -0.127439, -0.048095), (-0.460164, 0.083925, 0.053365), (-0.4632, 0.1504, 0.053365), (-0.460164, 0.088796, 0.053365), (-0.034006, -0.127438, -0.048095), (-0.03406, -0.132683, -0.047242), (-0.03406, -0.136411, -0.044856), (-0.03406, -0.138902, -0.041286), (-0.039124, 0.08359, 0.032374), (-0.03602, -0.153404, 0.032374), (-0.460758, 0.083589, 0.032374), (-0.460764, 0.08786, 0.032374), (-0.465289, 0.138126, 0.032374), (-0.46386, -0.153406, 0.032374), (-0.039118, 0.087862, 0.032374), (-0.034593, 0.138128, 0.032374), (-0.029354, 0.147622, 0.032374), (-0.470528, 0.14762, 0.032374), (-0.470527, -0.160807, 0.032374), (-0.029353, -0.160806, 0.032374), (-0.029354, 0.088797, 0.032374), (-0.029354, 0.083926, 0.032374), (-0.470528, 0.083925, 0.032374), (-0.470528, 0.088796, 0.032374), (-0.029353, -0.178215, 0.053365), (-0.470527, -0.178216, 0.053365), (-0.470527, -0.174469, 0.032374), (-0.029353, -0.174467, 0.032374)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-118.539085, -109.61047), (-118.539085, -113.51364), (-114.8868, -113.51364), (-114.8868, -109.61047)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer2C3_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C3_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C3_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C3_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

