#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer2C3"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer2C3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.470528, -0.178216, -0.884604), (-0.000162, 0.157252, 0.054471)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 52, 53, 70, 63, 58, 37, 41, 57, 63, 34, 35, 62, 62, 35, 36, 64, 57, 41, 40, 69, 71, 38, 39, 70, 69, 40, 38, 71, 64, 36, 37, 58, 70, 39, 34, 63, 28, 34, 39, 29, 58, 77, 76, 64, 71, 79, 78, 69, 71, 70, 53, 80, 79, 57, 69, 78, 81, 62, 64, 76, 82, 62, 82, 83, 52, 63, 77, 58, 57, 81, 53, 52, 83, 80, 85, 84, 28, 29, 95, 94, 93, 92, 35, 34, 28, 84, 88, 89, 36, 35, 88, 40, 41, 86, 90, 38, 91, 85, 29, 39, 91, 38, 40, 90, 37, 36, 89, 87, 41, 37, 92, 93, 37, 87, 95, 92, 87, 86, 94, 95, 86, 41, 93, 94, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 67, 68, 72, 73, 66, 67, 73, 74, 65, 66, 74, 75, 56, 65, 75, 59, 61, 72, 68, 60, 54, 55, 61, 60, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 76, 77, 59, 75, 74, 73, 72, 61, 78, 79, 54, 60, 79, 80, 54, 78, 60, 68, 67, 66, 65, 56, 81, 76, 61, 55, 82, 82, 55, 83, 56, 59, 77, 81, 80, 83, 55, 54, 85, 33, 30, 84, 87, 44, 43, 86, 88, 84, 30, 89, 88, 30, 31, 90, 86, 43, 47, 49, 51, 42, 32, 85, 91, 33, 90, 32, 33, 91, 89, 31, 45, 50, 48, 46, 44, 87, 20, 21, 23, 22, 24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer2C3_0>
            normal3f[] normals = [(0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0.0000016849954, 0.9289396, -0.37023124), (5.9604645e-7, 0.928943, -0.37022272), (-0.0000022251556, 0.9565581, -0.29154173), (-0.0000022251556, 0.9565581, -0.29154173), (-0.035994984, 0.06900436, -0.9969668), (-0.02519092, 0.049585428, -0.9984522), (0.025189485, 0.04958544, -0.9984522), (0.035996288, 0.069006115, -0.9969665), (2.0345672e-7, 0, -1), (2.1297446e-7, 0, -1), (2.0423018e-7, 0, -1), (2.0098173e-7, 0, -1), (2.0098173e-7, 0, -1), (2.0423018e-7, 0, -1), (-0.001796253, -0.000100851044, -0.9999984), (-0.00080091134, -5.791662e-7, -0.99999964), (0.035996288, 0.069006115, -0.9969665), (0.025189485, 0.04958544, -0.9984522), (0.001794219, -0.000100772246, -0.99999833), (0.00079904497, -2.591405e-7, -0.99999976), (7.536414e-8, 0, -1), (7.658266e-8, 0, -1), (7.986826e-8, 0, -1), (7.629061e-8, 0, -1), (0.00079904497, -2.591405e-7, -0.99999976), (0.001794219, -0.000100772246, -0.99999833), (7.658266e-8, 0, -1), (7.536414e-8, 0, -1), (-0.00080091134, -5.791662e-7, -0.99999964), (-0.001796253, -0.000100851044, -0.9999984), (-0.02519092, 0.049585428, -0.9984522), (-0.035994984, 0.06900436, -0.9969668), (7.629061e-8, 0, -1), (7.986826e-8, 0, -1), (2.1297446e-7, 0, -1), (2.0345672e-7, 0, -1), (0.000008306088, -0.9804147, 0.19694446), (0.0000045260035, -1, 0), (0.0000045260035, -1, 0), (0.0000041678804, -0.98041457, 0.19694494), (0.99945766, 0.012888907, 0.0303022), (0.9994678, 0.013071306, 0.029889487), (0.99957466, -0.0031078863, 0.028999548), (0.99959636, -0.00047531415, 0.028403537), (-0.99933857, -0.009112738, 0.035207983), (-0.9991554, -0.0113171395, 0.03950129), (-0.99957746, -0.0031073377, 0.028898753), (-0.9995965, -0.00051743817, 0.02839747), (-0.99933857, -0.009112738, 0.035207983), (-0.9918366, -0.08454594, 0.095456995), (-0.9918366, -0.08454594, 0.095456995), (-0.9928248, -0.085502386, 0.08359674), (-0.9991554, -0.0113171395, 0.03950129), (-0.9994571, 0.012882599, 0.03032463), (-0.9995965, -0.00051743817, 0.02839747), (-0.99957746, -0.0031073377, 0.028898753), (-0.99946487, 0.0129835, 0.030023294), (0.999339, -0.009094883, 0.035195954), (0.99959636, -0.00047531415, 0.028403537), (0.99957466, -0.0031078863, 0.028999548), (0.99915546, -0.01131881, 0.03950138), (0.999339, -0.009094883, 0.035195954), (0.99915546, -0.01131881, 0.03950138), (0.992826, -0.085503824, 0.08358026), (0.99183905, -0.08454592, 0.09543276), (0.99183905, -0.08454592, 0.09543276), (0.0000034273091, -0.9807754, -0.19513996), (0.0000034382458, -0.98077536, -0.1951401), (0.0000034382458, -0.98077536, -0.1951401), (0.0000034273091, -0.98077536, -0.19513994), (5.9604645e-7, 0.928943, -0.37022272), (0.0000016849954, 0.9289396, -0.37023124), (-0.0000029055207, 0.8339342, -0.5518639), (-0.0000029055207, 0.83393425, -0.55186385), (0.0000032753362, -0.8259867, 0.5636897), (0.0000032753378, -0.8259867, 0.5636897), (0.000008306088, -0.9804147, 0.19694446), (0.0000041678804, -0.98041457, 0.19694494), (-0.000003341729, 0.98443466, 0.17575075), (-0.000003341729, 0.98443466, 0.17575075), (-0.000003341729, 0.98443466, 0.17575075), (-0.000003341729, 0.98443466, 0.17575075), (-1, 1.0629636e-8, 0), (-1, 2.1259273e-8, 0), (-1, 2.1259273e-8, 0), (-1, 1.4682023e-8, 0), (-1, -1.0142951e-7, 0), (-1, -0.0000021800129, -2.8455295e-7), (-1, -0.000002029651, -1.8100557e-7), (-1, 1.0629636e-8, 0), (-1, -1.0142951e-7, 0), (1, 0.000002069007, 1.8336515e-7), (1, 0.0000018363555, 1.6274649e-7), (1, 0.0000029177284, 3.8297472e-7), (1, 0.000002111003, 2.8826204e-7), (1, 8.50384e-8, 0), (1, 4.25192e-8, 0), (1, 1.1745769e-7, 0), (1, 1.700768e-7, 0), (1, 1.700768e-7, 0), (1, 4.25192e-8, 0), (1, 8.50384e-8, 0), (1, 0.000002069007, 1.8336515e-7), (1, 0.000002111003, 2.8826204e-7), (-1, -0.0000018014249, -1.6065223e-7), (-1, -0.000002029651, -1.8100557e-7), (-1, -0.0000021800129, -2.8455295e-7), (-1, -0.0000028652034, -3.7804668e-7), (0.025189485, 0.04958544, -0.9984522), (-0.02519092, 0.049585428, -0.9984522), (3.0562177e-9, 0, -1), (3.0562177e-9, 0, -1), (-1, -0.0000018014249, -1.6065223e-7), (-1, -0.0000028652034, -3.7804668e-7), (-1, 0, 0), (-1, 0, 0), (-5.5644817e-10, 0, 1), (-5.5644817e-10, 0, 1), (-5.5644817e-10, 0, 1), (-5.5644817e-10, 0, 1), (1, 0.0000029177284, 3.8297472e-7), (1, 0.0000018363555, 1.6274649e-7), (1, 0, 0), (1, 0, 0), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (-9.694777e-7, -0.37747717, -0.9260189), (0.000002761837, -0.16169965, -0.98683995), (-0.0007835557, -0.16170047, -0.98683953), (0.0000012551848, -0.37748662, -0.9260151), (-1.4964985e-7, -0.6943057, -0.7196802), (-9.694777e-7, -0.37747717, -0.9260189), (0.0000012551848, -0.37748662, -0.9260151), (0.0000019325164, -0.6943054, -0.7196804), (0.0000021706778, -0.9100911, -0.4144082), (-1.4964985e-7, -0.6943057, -0.7196802), (0.0000019325164, -0.6943054, -0.7196804), (-0.0000016747799, -0.9100911, -0.4144081), (-5.6139834e-7, -0.9851488, -0.17170295), (0.0000021706778, -0.9100911, -0.4144082), (-0.0000016747799, -0.9100911, -0.4144081), (-1.8323772e-7, -0.9851487, -0.17170292), (-0.0000019888394, 0.50218564, -0.8647598), (-0.0007835557, -0.16170047, -0.98683953), (0.000002761837, -0.16169965, -0.98683995), (-5.5476744e-7, 0.5021853, -0.86476004), (5.331822e-7, 0.4206623, -0.90721726), (-0.0000021387787, 0.4206634, -0.9072168), (-0.0000019888394, 0.50218564, -0.8647598), (-5.5476744e-7, 0.5021853, -0.86476004), (0.0000020312345, -0.51784897, 0.85547215), (0.000001412782, -0.41187042, 0.9112424), (5.7156444e-7, -0.41187042, 0.9112425), (0.0000018667164, -0.5178491, 0.85547197), (5.7156444e-7, -0.41187042, 0.9112425), (0.000001412782, -0.41187042, 0.9112424), (0.00010012468, 0.1739881, 0.98474777), (-6.971365e-7, 0.17398775, 0.98474777), (-0.0000029993605, 0.9796963, 0.20048738), (-0.0000029993246, 0.97969633, 0.20048706), (-0.0000032504474, 0.9187211, 0.39490703), (3.8674443e-8, 0.91872126, 0.3949066), (3.8674443e-8, 0.91872126, 0.3949066), (-0.0000032504474, 0.9187211, 0.39490703), (-0.0000023593689, 0.69388866, 0.7200823), (-9.708174e-9, 0.693889, 0.7200819), (-9.708174e-9, 0.693889, 0.7200819), (-0.0000023593689, 0.69388866, 0.7200823), (-0.0000012581382, 0.37065598, 0.9287702), (-5.4623797e-8, 0.37065694, 0.9287698), (-5.4623797e-8, 0.37065694, 0.9287698), (-0.0000012581382, 0.37065598, 0.9287702), (-6.971365e-7, 0.17398775, 0.98474777), (0.00010012468, 0.1739881, 0.98474777), (0.99957466, -0.0031078863, 0.028999548), (0.9994678, 0.013071306, 0.029889487), (0.99949324, 0.013725757, 0.028717853), (0.99949324, 0.013725757, 0.028717853), (0.99949324, 0.013725757, 0.028717853), (0.99949324, 0.013725757, 0.028717853), (0.99949324, 0.013725757, 0.028717853), (0.99958944, -0.0016994136, 0.02859979), (-0.99957746, -0.0031073377, 0.028898753), (-0.9991554, -0.0113171395, 0.03950129), (-0.9994922, 0.016107015, 0.027497722), (-0.9995895, -0.0017015348, 0.028599925), (-0.9991554, -0.0113171395, 0.03950129), (-0.9928248, -0.085502386, 0.08359674), (-0.9994922, 0.016107015, 0.027497722), (-0.99957746, -0.0031073377, 0.028898753), (-0.9995895, -0.0017015348, 0.028599925), (-0.99949336, 0.013716846, 0.02872232), (-0.99949336, 0.013716846, 0.02872232), (-0.99949336, 0.013716846, 0.02872232), (-0.99949336, 0.013716846, 0.02872232), (-0.99949336, 0.013716846, 0.02872232), (-0.99946487, 0.0129835, 0.030023294), (0.99957466, -0.0031078863, 0.028999548), (0.99958944, -0.0016994136, 0.02859979), (0.9994921, 0.016100936, 0.027502311), (0.99915546, -0.01131881, 0.03950138), (0.99915546, -0.01131881, 0.03950138), (0.9994921, 0.016100936, 0.027502311), (0.992826, -0.085503824, 0.08358026), (-5.6139834e-7, -0.9851488, -0.17170295), (-1.8323772e-7, -0.9851487, -0.17170292), (0.0000034273091, -0.9807754, -0.19513996), (0.0000034273091, -0.98077536, -0.19513994), (-0.0000029055207, 0.83393425, -0.55186385), (-0.0000029055207, 0.8339342, -0.5518639), (-0.0000021387787, 0.4206634, -0.9072168), (5.331822e-7, 0.4206623, -0.90721726), (0.0000032753362, -0.8259867, 0.5636897), (0.0000020312345, -0.51784897, 0.85547215), (0.0000018667164, -0.5178491, 0.85547197), (0.0000032753378, -0.8259867, 0.5636897), (-0.0000024273768, 0.9844337, 0.1757564), (-0.0000029993246, 0.97969633, 0.20048706), (-0.0000029993605, 0.9796963, 0.20048738), (-0.0000024273768, 0.9844337, 0.1757564), (-1, -1.0142951e-7, 0), (-1, 1.4682023e-8, 0), (-1, -3.3040996e-7, 0), (-1, -0.0000021800129, -2.8455295e-7), (-1, -1.0142951e-7, 0), (-1, -3.3040996e-7, 0), (-1, -0.0000026721793, -4.577938e-7), (1, 0.000002111003, 2.8826204e-7), (1, 0.0000029177284, 3.8297472e-7), (1, 0.000004305998, 7.863179e-7), (1, 0.000004305998, 7.863179e-7), (1, 0.000004305998, 7.863179e-7), (1, 0.000004305998, 7.863179e-7), (1, 0.000004305998, 7.863179e-7), (1, 0.0000025396264, 4.6376093e-7), (1, 1.1745769e-7, 0), (1, 4.25192e-8, 0), (1, 0, 0), (1, 0.000002111003, 2.8826204e-7), (1, 0.0000025396264, 4.6376093e-7), (1, 0, 0), (1, 4.25192e-8, 0), (-1, -0.0000021800129, -2.8455295e-7), (-1, -0.0000026721793, -4.577938e-7), (-1, -0.0000042337724, -7.7620064e-7), (-1, -0.0000042337724, -7.7620064e-7), (-1, -0.0000042337724, -7.7620064e-7), (-1, -0.0000042337724, -7.7620064e-7), (-1, -0.0000042337724, -7.7620064e-7), (-1, -0.0000028652034, -3.7804668e-7), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.000162, 0.042564, -0.884604), (-0.000172, 0.042564, -0.884604), (-0.000162, 0.042573, -0.884604), (-0.000172, 0.042573, -0.884604), (-0.029354, 0.157252, 0.046485), (-0.470528, 0.15725, 0.046485), (-0.029354, 0.088797, -0.053823), (-0.029354, 0.083926, -0.056348), (-0.470528, 0.083925, -0.056348), (-0.470528, 0.088796, -0.053823), (-0.029354, 0.157252, 0.053365), (-0.029354, 0.088797, 0.053365), (-0.029354, 0.083926, 0.053365), (-0.029353, -0.164553, 0.053365), (-0.470528, 0.088796, 0.053365), (-0.470528, 0.15725, 0.053365), (-0.470528, 0.083925, 0.053365), (-0.470527, -0.164554, 0.053365), (-0.470527, -0.128288, -0.056348), (-0.470527, -0.148408, -0.037075), (-0.029353, -0.148407, -0.037074), (-0.029353, -0.128287, -0.056348), (-0.029353, -0.146875, -0.04445), (-0.470527, -0.146877, -0.04445), (-0.029353, -0.142514, -0.050702), (-0.470527, -0.142515, -0.050702), (-0.029353, -0.135986, -0.05488), (-0.470527, -0.135988, -0.05488), (-0.034147, 0.14902, 0.048834), (-0.465734, 0.149019, 0.048834), (-0.463087, 0.08423, -0.04907), (-0.036795, 0.084231, -0.04907), (-0.465892, -0.139888, -0.035565), (-0.463199, -0.157802, 0.054471), (-0.036681, -0.157801, 0.054471), (-0.033988, -0.139887, -0.035565), (-0.463087, 0.08227, -0.050086), (-0.036795, 0.082271, -0.050086), (-0.039717, 0.088797, 0.053365), (-0.036682, 0.150401, 0.053365), (-0.039717, 0.083926, 0.053365), (-0.46582, -0.138903, -0.041286), (-0.46582, -0.136412, -0.044856), (-0.46582, -0.132685, -0.047242), (-0.465875, -0.127439, -0.048095), (-0.460164, 0.083925, 0.053365), (-0.4632, 0.1504, 0.053365), (-0.460164, 0.088796, 0.053365), (-0.034006, -0.127438, -0.048095), (-0.03406, -0.132683, -0.047242), (-0.03406, -0.136411, -0.044856), (-0.03406, -0.138902, -0.041286), (-0.039124, 0.08359, 0.032374), (-0.03602, -0.153404, 0.032374), (-0.460758, 0.083589, 0.032374), (-0.460764, 0.08786, 0.032374), (-0.465289, 0.138126, 0.032374), (-0.46386, -0.153406, 0.032374), (-0.039118, 0.087862, 0.032374), (-0.034593, 0.138128, 0.032374), (-0.029354, 0.147622, 0.032374), (-0.470528, 0.14762, 0.032374), (-0.470527, -0.160807, 0.032374), (-0.029353, -0.160806, 0.032374), (-0.029354, 0.088797, 0.032374), (-0.029354, 0.083926, 0.032374), (-0.470528, 0.083925, 0.032374), (-0.470528, 0.088796, 0.032374), (-0.029353, -0.178215, 0.053365), (-0.470527, -0.178216, 0.053365), (-0.470527, -0.174469, 0.032374), (-0.029353, -0.174467, 0.032374)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-170.93037, -111.154526), (-170.93037, -111.1546), (-170.93031, -111.1546), (-170.93031, -111.154526), (-170.28491, 0.708438), (-170.28491, -0.663438), (-170.27052, -0.655382), (-170.27052, 0.700381), (-171.14835, 0.658999), (-171.16823, 0.680599), (-171.16823, -0.619764), (-171.14835, -0.598165), (-170.23993, 0.658999), (-170.21971, 0.680599), (-170.42151, 0.680599), (-170.42151, 0.650053), (-170.42151, 0.650053), (-170.42151, 0.680599), (-170.43585, 0.680599), (-170.43585, 0.650053), (-171.14835, -0.598165), (-171.16823, -0.619764), (-170.43585, -0.619764), (-170.43585, -0.589217), (-170.42151, -0.589217), (-170.42151, -0.619764), (-170.21971, -0.619764), (-170.23993, -0.598165), (-170.43585, -0.589217), (-170.43585, -0.619764), (-170.42151, -0.619764), (-170.42151, -0.589217), (-170.43585, 0.650053), (-170.43585, 0.680599), (-171.16823, 0.680599), (-171.14835, 0.658999), (-170.23993, -0.598165), (-170.21971, -0.619764), (-170.21971, 0.680599), (-170.23993, 0.658999), (-170.42438, 0.724345), (-170.446, 0.724345), (-170.446, -0.66351), (-170.42438, -0.66351), (-170.119, 0.932275), (-170.1841, 0.919318), (-170.1841, 0.220884), (-170.12224, 0.219894), (-170.16403, 0.750773), (-170.22586, 0.748015), (-170.22586, 0.735425), (-170.16403, 0.736414), (-170.16403, 0.750773), (-170.16403, 0.932355), (-170.17738, 0.928283), (-170.22586, 0.896178), (-170.22586, 0.748015), (-170.16077, 0.023908), (-170.16403, 0.736414), (-170.22586, 0.735425), (-170.22586, 0.036867), (-170.12224, 0.205538), (-170.12224, 0.219894), (-170.1841, 0.220884), (-170.1841, 0.208295), (-170.12224, 0.205538), (-170.1841, 0.208295), (-170.1841, 0.060159), (-170.13562, 0.028059), (-170.12224, 0.023988), (-170.22984, 0.655351), (-170.29552, 0.653386), (-170.29552, -0.614576), (-170.22984, -0.61654), (-170.28491, -0.663438), (-170.28491, 0.708438), (-170.33725, 0.707023), (-170.33725, -0.662023), (-170.37999, -0.66351), (-170.37999, 0.724345), (-170.42438, 0.724345), (-170.42438, -0.66351), (-170.40385, 0.684856), (-170.40385, -0.624021), (-170.34157, -0.624021), (-170.34157, 0.684856), (-170.19073, 0.235373), (-170.19073, 0.436886), (-170.21098, 0.436886), (-170.25253, 0.408538), (-170.25253, 0.235373), (-170.25253, 0.221033), (-170.19073, 0.221033), (-170.19073, 0.235373), (-170.25253, 0.235373), (-170.15044, -0.33481), (-170.15044, 0.396692), (-170.21223, 0.38566), (-170.21223, -0.33481), (-170.15044, -0.349151), (-170.21223, -0.349151), (-170.21223, -0.522325), (-170.1707, -0.550675), (-170.15044, -0.550675), (-170.21223, -0.349151), (-170.15044, -0.349151), (-170.15044, -0.33481), (-170.21223, -0.33481), (-170.19073, -0.51043), (-170.19073, 0.221033), (-170.25253, 0.221033), (-170.25253, -0.499399), (-171.16823, -0.619764), (-171.16823, 0.680599), (-171.2085, 0.680599), (-171.2085, -0.619764), (-170.19073, -0.51043), (-170.25253, -0.499399), (-170.25253, -0.539616), (-170.19073, -0.550648), (-170.3586, 0.67985), (-170.3586, -0.619015), (-170.31836, -0.619015), (-170.31836, 0.67985), (-170.21223, 0.38566), (-170.15044, 0.396692), (-170.15044, 0.436912), (-170.21223, 0.42588), (-143.95526, -107.93224), (-143.95526, -113.63171), (-138.6524, -113.63171), (-138.6524, -107.93224), (-118.539085, -109.61047), (-118.539085, -113.51364), (-114.8868, -113.51364), (-114.8868, -109.61047), (-88.71478, -110.74826), (-88.71478, -113.93459), (-85.73376, -113.93459), (-85.73376, -110.74826), (-68.793945, -112.22751), (-68.793945, -112.22752), (-68.79394, -112.22752), (-68.79394, -112.22751), (-71.58265, -1.027437), (-71.56706, -1.027599), (-71.56706, 0.255664), (-71.58265, 0.255502), (-71.59372, -1.027437), (-71.58265, -1.027437), (-71.58265, 0.255502), (-71.59372, 0.255502), (-71.60112, -1.027437), (-71.59372, -1.027437), (-71.59372, 0.255502), (-71.60112, 0.255502), (-71.343094, -0.985303), (-71.32722, -0.985102), (-71.32722, 0.213216), (-71.343094, 0.213415), (-70.943924, 0.247378), (-71.56706, 0.255664), (-71.56706, -1.027599), (-70.943924, -1.019314), (-70.9381, -1.019314), (-70.9381, 0.247378), (-70.943924, 0.247378), (-70.943924, -1.019314), (-72.05335, -1.036425), (-72.03885, -1.036425), (-72.03885, 0.276812), (-72.05335, 0.276812), (-72.03885, 0.276812), (-72.03885, -1.036425), (-71.40716, -1.036425), (-71.40716, 0.276812), (-71.6225, -0.991164), (-71.6225, 0.231551), (-71.64294, 0.231551), (-71.64294, -0.991164), (-71.35183, -1.036425), (-71.35183, 0.276812), (-71.36481, 0.276812), (-71.36481, -1.036425), (-71.36481, -1.036425), (-71.36481, 0.276812), (-71.38424, 0.276812), (-71.38424, -1.036425), (-71.38424, -1.036425), (-71.38424, 0.276812), (-71.40716, 0.276812), (-71.40716, -1.036425), (-71.17755, -0.153922), (-71.17755, 0.497901), (-71.36441, 0.460723), (-71.38014, 0.458014), (-71.38996, 0.451163), (-71.39653, 0.440911), (-71.39887, 0.426484), (-71.40435, -0.150294), (-71.292885, 0.34795), (-71.292885, 0.359698), (-71.516884, 0.349713), (-71.51968, 0.344322), (-71.292885, 0.359698), (-71.292885, 0.497949), (-71.516884, 0.349713), (-71.292885, 0.34795), (-71.51968, 0.344322), (-71.514206, -0.232458), (-71.511856, -0.246885), (-71.505295, -0.257137), (-71.495476, -0.263988), (-71.47974, -0.266697), (-71.292885, -0.303875), (-71.17755, -0.153922), (-71.40435, -0.150294), (-71.40155, -0.155686), (-71.17755, -0.16567), (-71.17755, -0.16567), (-71.40155, -0.155686), (-71.17755, -0.303921), (-71.343094, -0.985303), (-71.343094, 0.213415), (-71.531654, 0.207775), (-71.531654, -0.979663), (-70.777954, -1.025858), (-70.777954, 0.253922), (-70.9381, 0.247378), (-70.9381, -1.019314), (-72.228455, -1.036425), (-72.05335, -1.036425), (-72.05335, 0.276812), (-72.228455, 0.276812), (-71.43002, 0.231551), (-71.6225, 0.231551), (-71.6225, -0.991164), (-71.43002, -0.991164), (-70.925896, 0.370413), (-70.925896, 0.53213), (-71.162865, 0.370413), (-70.925896, 0.357022), (-70.925896, 0.370413), (-71.162865, 0.370413), (-71.16981, 0.357022), (-71.04952, -0.14067), (-71.04952, 0.532131), (-71.24045, 0.498045), (-71.26072, 0.493835), (-71.27791, 0.481844), (-71.2894, 0.463899), (-71.29343, 0.442731), (-71.29343, -0.14067), (-71.04952, -0.315778), (-71.04952, -0.154061), (-71.28649, -0.154061), (-71.04952, -0.14067), (-71.29343, -0.14067), (-71.28649, -0.154061), (-71.04952, -0.154061), (-70.925896, 0.357022), (-71.16981, 0.357022), (-71.16981, -0.226378), (-71.16577, -0.247545), (-71.15429, -0.26549), (-71.1371, -0.277481), (-71.11682, -0.281691), (-70.925896, -0.315777), (5.646933, -121.22408), (7.358486, -121.22408), (7.358486, -119.51253), (5.646933, -119.51253), (-5.253075, -117.71076), (-3.54152, -117.71076), (-3.54152, -115.99921), (-5.253075, -115.99921)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer2C3_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
                rel material:binding = </root/_materials/M_FridgeDrawer2C3_0>
            }

            def GeomSubset "M_FridgeDrawer2C3_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer2C3_1>
            }

            def GeomSubset "M_FridgeDrawer2C3_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer2C3_2>
            }

            def GeomSubset "M_FridgeDrawer2C3_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33]
                rel material:binding = </root/_materials/M_FridgeDrawer2C3_3>
            }

            def GeomSubset "M_FridgeDrawer2C3_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]
                rel material:binding = </root/_materials/M_FridgeDrawer2C3_4>
            }

            def GeomSubset "M_FridgeDrawer2C3_5" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [63]
                rel material:binding = </root/_materials/M_FridgeDrawer2C3_5>
            }

            def GeomSubset "M_FridgeDrawer2C3_6" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [64]
                rel material:binding = </root/_materials/M_FridgeDrawer2C3_6>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer2C3_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C3_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C3_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C3_0/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C3_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Copper_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C3_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer2C3_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C3_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C3_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C3_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C3_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C3_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer2C3_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C3_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C3_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C3_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer2C3_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C3_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.8014706, 0.8014706, 0.8014706)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C3_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C3_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer2C3_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C3_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_FridgeDrawer2C3_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C3_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C3_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C3_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C3_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C3_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer2C3_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C3_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C3_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C3_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C3_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C3_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

