#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshClothesDryerKnob_2_3_GeomSubset_1"
    {
        def Mesh "MeshClothesDryerKnob_2_3_GeomSubset_1"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4]
            int[] faceVertexIndices = [87, 88, 89, 90, 91, 87, 90, 92, 88, 87, 93, 94, 93, 87, 91, 95]
            rel material:binding = </root/_materials/M_ClothesDryerKnob_2_1>
            normal3f[] normals = [(0.000013813376, -0.97788346, 0.20915078), (0.711666, -0.6823546, 0.16710372), (0.69557416, -0.5808832, 0.42278984), (3.682071e-7, -0.7948381, 0.6068215), (-0.7116617, -0.682353, 0.16712862), (0.000013813376, -0.97788346, 0.20915078), (3.682071e-7, -0.7948381, 0.6068215), (-0.69555634, -0.58089364, 0.42280465), (0.711666, -0.6823546, 0.16710372), (0.000013813376, -0.97788346, 0.20915078), (0.0000028823852, -0.989311, 0.14582147), (0.7015989, -0.702837, 0.11738531), (0.0000028823852, -0.989311, 0.14582147), (0.000013813376, -0.97788346, 0.20915078), (-0.7116617, -0.682353, 0.16712862), (-0.701624, -0.70280755, 0.117410265)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.042, -0.324159, 0.41484), (0.030908, -0.324159, 0.425932), (0.000603, -0.324159, 0.425932), (-0.010489, -0.324159, 0.41484), (-0.014549, -0.324159, 0.399688), (-0.010489, -0.324159, 0.384535), (0.000603, -0.324159, 0.373443), (0.030908, -0.324159, 0.373443), (0.042, -0.324159, 0.384535), (0.04606, -0.324159, 0.399688), (0.012725, -0.324159, 0.42918), (0.018786, -0.324159, 0.42918), (0.021639, -0.324159, 0.370507), (0.009873, -0.324159, 0.370507), (0.01374, -0.324159, 0.432585), (0.017771, -0.324159, 0.432585), (0.013684, -0.342784, 0.426878), (0.017827, -0.342784, 0.426878), (0.019733, -0.34103, 0.375944), (0.011778, -0.34103, 0.375944), (0.017133, -0.341463, 0.429878), (0.014378, -0.341463, 0.429878), (0.015756, -0.342746, 0.375324), (0.015756, -0.324159, 0.369272), (0.015756, -0.324159, 0.429807), (0.015756, -0.324159, 0.433301), (0.015756, -0.342681, 0.430457), (0.011264, -0.336545, 0.414854), (0.008948, -0.336594, 0.384968), (0.012868, -0.344324, 0.414857), (0.011101, -0.343683, 0.384961), (0.022563, -0.336594, 0.384968), (0.020247, -0.336545, 0.414854), (0.02041, -0.343683, 0.384961), (0.018643, -0.344324, 0.414857), (0.015756, -0.346779, 0.414869), (0.015756, -0.346199, 0.384973), (0.02182, -0.338001, 0.399677), (0.01972, -0.344443, 0.399649), (0.015756, -0.346944, 0.399649), (0.011791, -0.344443, 0.399649), (0.009691, -0.338001, 0.399677), (0.022563, -0.324159, 0.384246), (0.020079, -0.324159, 0.414386), (0.015756, -0.324159, 0.384097), (0.015756, -0.324159, 0.414251), (0.008948, -0.324159, 0.384246), (0.011432, -0.324159, 0.414386), (0.009685, -0.324159, 0.399688), (0.015756, -0.324159, 0.399686), (0.021826, -0.324159, 0.399688), (0.042, -0.328464, 0.41484), (0.039463, -0.331942, 0.414842), (0.029698, -0.332124, 0.423844), (0.030908, -0.32869, 0.425932), (0.000603, -0.32869, 0.425932), (0.001813, -0.332124, 0.423844), (-0.010489, -0.328464, 0.41484), (-0.007819, -0.331973, 0.414842), (-0.014549, -0.328644, 0.399688), (-0.01206, -0.332018, 0.399687), (-0.010489, -0.328513, 0.384535), (-0.007882, -0.332039, 0.384593), (0.001825, -0.332189, 0.375452), (0.000603, -0.328718, 0.373443), (0.030908, -0.328718, 0.373443), (0.029686, -0.332189, 0.375452), (0.042, -0.328513, 0.384535), (0.039393, -0.332039, 0.384593), (0.04606, -0.328644, 0.399688), (0.043571, -0.332018, 0.399687), (0.021604, -0.329019, 0.370496), (0.021323, -0.332921, 0.372054), (0.015756, -0.333369, 0.370359), (0.015756, -0.329282, 0.369239), (0.018786, -0.329222, 0.42918), (0.018678, -0.333407, 0.428195), (0.012725, -0.329222, 0.42918), (0.012833, -0.333407, 0.428195), (0.009907, -0.329016, 0.370496), (0.010188, -0.332921, 0.372054), (0.01374, -0.329168, 0.432585), (0.013881, -0.333401, 0.431987), (0.01763, -0.333401, 0.431987), (0.017771, -0.329168, 0.432585), (0.015756, -0.329064, 0.433268), (0.015756, -0.333301, 0.432708), (0.015756, -0.345135, 0.427378), (0.016856, -0.343783, 0.427022), (0.016457, -0.342952, 0.42906), (0.015756, -0.343415, 0.429259), (0.014655, -0.343783, 0.427022), (0.015055, -0.342952, 0.42906), (0.015756, -0.346653, 0.416265), (0.017574, -0.34515, 0.416261), (0.013937, -0.34515, 0.416261)]
            bool[] primvars:sharp_face = [0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-19.808048, 0.949297), (-19.810974, 0.948526), (-19.812769, 0.95294), (-19.81177, 0.95337), (-19.810974, 0.948526), (-19.808048, 0.949297), (-19.81177, 0.95337), (-19.812769, 0.95294), (-19.810974, 0.948526), (-19.808048, 0.949297), (-19.804754, 0.925233), (-19.808012, 0.925226), (-19.804754, 0.925233), (-19.808048, 0.949297), (-19.810974, 0.948526), (-19.808012, 0.925226)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_ClothesDryerKnob_2_1"
        {
            token outputs:surface.connect = </root/_materials/M_ClothesDryerKnob_2_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_ClothesDryerKnob_2_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_ClothesDryerKnob_2_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

