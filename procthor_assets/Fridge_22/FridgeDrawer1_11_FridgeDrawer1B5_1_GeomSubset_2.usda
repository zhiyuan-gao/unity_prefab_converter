#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer1_11_FridgeDrawer1B5_1_GeomSubset_2"
    {
        def Mesh "FridgeDrawer1_11_FridgeDrawer1B5_1_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer1B5_2>
            normal3f[] normals = [(0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.00263, 0.04257, -0.984512), (-0.002622, 0.04257, -0.984512), (-0.00263, 0.042579, -0.984512), (-0.002622, 0.042579, -0.984512), (-0.00263, 0.04257, -0.984512), (-0.002622, 0.04257, -0.984512), (-0.00263, 0.042579, -0.984512), (-0.002622, 0.042579, -0.984512), (-0.00263, 0.04257, -0.984512), (-0.002622, 0.04257, -0.984512), (-0.00263, 0.042579, -0.984512), (-0.002622, 0.042579, -0.984512), (-0.00263, 0.04257, -0.984512), (-0.002622, 0.04257, -0.984512), (-0.00263, 0.042579, -0.984512), (-0.002622, 0.042579, -0.984512), (-0.00263, 0.04257, -0.984512), (-0.002622, 0.04257, -0.984512), (-0.00263, 0.042579, -0.984512), (-0.002622, 0.042579, -0.984512), (-0.00263, 0.04257, -0.984512), (-0.002622, 0.04257, -0.984512), (-0.00263, 0.042579, -0.984512), (-0.002622, 0.042579, -0.984512), (-0.00263, 0.04257, -0.984512), (-0.002622, 0.04257, -0.984512), (-0.00263, 0.042579, -0.984512), (-0.002622, 0.042579, -0.984512), (-0.296638, 0.214333, -0.648088), (-0.035202, 0.214333, -0.648088), (-0.296638, 0.142836, -0.761408), (-0.296638, 0.137748, -0.76426), (-0.035202, 0.137749, -0.76426), (-0.035202, 0.142837, -0.761408), (-0.296638, 0.214333, -0.640315), (-0.296638, 0.142836, -0.640315), (-0.296638, 0.137748, -0.640315), (-0.296637, -0.214654, -0.640315), (-0.035202, 0.142837, -0.640315), (-0.035202, 0.214333, -0.640315), (-0.035202, 0.137749, -0.640315), (-0.035201, -0.214653, -0.640315), (-0.035201, -0.176775, -0.76426), (-0.035201, -0.19779, -0.742486), (-0.296637, -0.19779, -0.742486), (-0.296637, -0.176776, -0.76426), (-0.296637, -0.196191, -0.750818), (-0.035201, -0.19619, -0.750818), (-0.296637, -0.191635, -0.757882), (-0.035201, -0.191634, -0.757882), (-0.296637, -0.184818, -0.762602), (-0.035201, -0.184817, -0.762602), (-0.041553, 0.138068, -0.756038), (-0.290287, 0.138067, -0.756038), (-0.039157, -0.188891, -0.740781), (-0.041455, -0.207601, -0.639065), (-0.290382, -0.207602, -0.639065), (-0.292681, -0.188891, -0.740781), (-0.041553, 0.13602, -0.757186), (-0.290287, 0.13602, -0.757186), (-0.287793, 0.142836, -0.640315), (-0.290384, 0.207178, -0.640315), (-0.287793, 0.137748, -0.640315), (-0.039218, -0.187862, -0.747244), (-0.039218, -0.18526, -0.751278), (-0.039218, -0.181367, -0.753973), (-0.039172, -0.175889, -0.754937), (-0.044047, 0.137749, -0.640315), (-0.041456, 0.207179, -0.640315), (-0.044047, 0.142837, -0.640315), (-0.292666, -0.175889, -0.754937), (-0.292619, -0.181368, -0.753973), (-0.292619, -0.185261, -0.751278), (-0.292619, -0.187862, -0.747244), (-0.288299, 0.137397, -0.664029), (-0.290947, -0.20301, -0.664029), (-0.04354, 0.137398, -0.664029), (-0.043536, 0.14186, -0.664029), (-0.039673, 0.19436, -0.664029), (-0.040891, -0.203009, -0.664029), (-0.288304, 0.141859, -0.664029), (-0.292167, 0.194359, -0.664029), (-0.296638, 0.204275, -0.664029), (-0.035202, 0.204276, -0.664029), (-0.035201, -0.210739, -0.664029), (-0.296637, -0.21074, -0.664029), (-0.296638, 0.142836, -0.664029), (-0.296638, 0.137748, -0.664029), (-0.035202, 0.137749, -0.664029), (-0.035202, 0.142837, -0.664029), (-0.296637, -0.228923, -0.640315), (-0.035201, -0.228922, -0.640315), (-0.035201, -0.225008, -0.664029), (-0.296637, -0.225009, -0.664029)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-118.539474, -113.51364), (-115.08669, -113.51364), (-115.08669, -109.61047), (-118.539474, -109.61047)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer1B5_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1B5_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1B5_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1B5_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1B5_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1B5_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

