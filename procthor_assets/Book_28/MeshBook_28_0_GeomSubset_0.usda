#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshBook_28_0_GeomSubset_0"
    {
        def Mesh "MeshBook_28_0_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [1, 0, 3, 2, 4, 5, 6, 7, 7, 6, 10, 11, 8, 9, 11, 10, 6, 2, 3, 10, 7, 11, 24, 25, 6, 5, 1, 2, 0, 8, 10, 3, 11, 9, 27, 24, 25, 26, 4, 7, 17, 16, 20, 21, 21, 22, 18, 17, 16, 19, 23, 20, 21, 20, 13, 14, 14, 15, 22, 21, 20, 23, 12, 13, 25, 24, 16, 17, 17, 18, 26, 25, 24, 27, 19, 16, 135, 134, 132, 133, 13, 12, 132, 134, 15, 14, 135, 133, 132, 12, 15, 133, 13, 134, 135, 14]
            rel material:binding = </root/_materials/M_Book_28_0>
            normal3f[] normals = [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0.0000029518865), (0, -1, -0.000004155466), (0, -1, 0.0000023446319), (0, -1, 0.000004244284), (-0.8653232, 9.583419e-10, 0.50121444), (-0.5877595, 0, 0.80903566), (-0.58775944, 0.0000990437, 0.80903566), (-0.8653232, 0, 0.50121444), (0, 1, -0.0000065886866), (0, 1, 0.0000024047592), (0, 1, 0.0000016215129), (0, 1, -0.0000027217948), (-0.5877595, 0, 0.80903566), (0, 0, 1), (0, 0, 1), (-0.58775944, 0.0000990437, 0.80903566), (-0.8653232, 9.583419e-10, 0.50121444), (-0.8653232, 0, 0.50121444), (-0.980395, 1.2903219e-7, 0.19704197), (-0.980395, 0, 0.19704197), (0, -1, 0.0000023446319), (0, -1, -0.000004155466), (0, -1, -0.000010161899), (0, -1, -0.000010161899), (0, 1, -0.000010161899), (0, 1, -0.0000065886866), (0, 1, -0.0000027217948), (0, 1, -0.000010161899), (0, 1, 0.0000016215129), (0, 1, 0.0000024047592), (0, 1, 0.0000015126581), (0, 1, 0.0000026314121), (0, -1, 0), (0, -1, 0), (0, -1, 0.0000029518865), (0, -1, 0.000004244284), (-0.9911983, 0, 0.13238575), (-0.9911983, -6.092338e-11, 0.13238575), (-0.9981196, 0, 0.061296508), (-0.9981196, 4.191168e-11, 0.061296508), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-0.9981196, 4.191168e-11, 0.061296508), (-0.9981196, 0, 0.061296508), (-0.9218039, -0.000006876886, -0.3876566), (-0.92183584, 0, -0.38758057), (-0.000004608184, -0.973902, -0.22696954), (-0.000002341345, -0.9760873, -0.21737902), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (3.234092e-7, 0.99970466, 0.024302358), (0.0000017147977, 0.99965745, 0.026171358), (-0.980395, 0, 0.19704197), (-0.980395, 1.2903219e-7, 0.19704197), (-0.9911983, -6.092338e-11, 0.13238575), (-0.9911983, 0, 0.13238575), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0.0000026314121), (0, 1, 0.0000015126581), (0, 1, 0), (0, 1, 0), (-0.4584463, -4.3585896e-7, -0.8887222), (-0.45824167, -0.0000024392905, -0.8888276), (0.4576984, -6.64033e-7, -0.8891074), (0.45790315, -0.000015815802, -0.8890021), (-0.0000102120375, 0.7946553, -0.60706085), (-8.046627e-7, 0.79343146, -0.60865957), (6.335715e-8, 0.9432995, -0.3319428), (5.302718e-8, 0.9432995, -0.33194277), (-0.000002341345, -0.9760873, -0.21737902), (-0.000004608184, -0.973902, -0.22696954), (1.9509343e-8, -0.94254917, -0.33406734), (1.207809e-8, -0.94254917, -0.33406734), (0.4576984, -6.64033e-7, -0.8891074), (0.81788605, 0, -0.5753802), (0.81788605, 0, -0.5753802), (0.45790315, -0.000015815802, -0.8890021), (-0.9218039, -0.000006876886, -0.3876566), (-0.45824167, -0.0000024392905, -0.8888276), (-0.4584463, -4.3585896e-7, -0.8887222), (-0.92183584, 0, -0.38758057)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.101651, -0.128037, -0.016959), (-0.101651, 0.128037, -0.016959), (-0.101651, 0.128037, -0.017833), (-0.101651, -0.128037, -0.017833), (0.109878, 0.128037, -0.01491), (0.10749, 0.128037, -0.016959), (0.108652, 0.128037, -0.017833), (0.110822, 0.128037, -0.015876), (0.10749, -0.128037, -0.016959), (0.109878, -0.128037, -0.01491), (0.108652, -0.128037, -0.017833), (0.110822, -0.128037, -0.015876), (0.111188, -0.128037, -0.00337), (0.112462, -0.128037, -0.00337), (0.112462, 0.128037, -0.00337), (0.111188, 0.128037, -0.00337), (0.112081, -0.128037, -0.009623), (0.112081, 0.128037, -0.009623), (0.110816, 0.128037, -0.00914), (0.110816, -0.128037, -0.00914), (0.112271, -0.128037, -0.006497), (0.112271, 0.128037, -0.006497), (0.111022, 0.128037, -0.006255), (0.111022, -0.128037, -0.006255), (0.111427, -0.128037, -0.012749), (0.111427, 0.128037, -0.012749), (0.110371, 0.128037, -0.012025), (0.110371, -0.128037, -0.012025), (0.109503, 0.128037, -0.00337), (-0.101651, 0.128037, -0.00337), (-0.101651, -0.128037, -0.00337), (0.109503, -0.128037, -0.00337), (0.109101, 0.128037, -0.010165), (-0.101651, 0.128037, -0.010165), (-0.101651, -0.128037, -0.010165), (0.109101, -0.128037, -0.010165), (0.109503, -0.126638, 0.000047), (0.111188, -0.128037, -0.00337), (0.109503, 0.126638, 0.000047), (0.111188, 0.128037, -0.00337), (-0.100315, -0.126638, -0.002504), (-0.100315, 0.126638, -0.002504), (-0.101651, -0.128037, -0.016959), (-0.101651, 0.128037, -0.016959), (0.10749, 0.128037, -0.016959), (0.109878, 0.128037, -0.01491), (0.109878, -0.128037, -0.01491), (0.10749, -0.128037, -0.016959), (0.110816, 0.128037, -0.00914), (0.110816, -0.128037, -0.00914), (0.035827, 0.128037, -0.016959), (0.036901, 0.128037, -0.010165), (0.037169, 0.128037, -0.00337), (0.037543, 0.126638, 0.010594), (0.037543, -0.126638, 0.010594), (0.037169, -0.128037, -0.00337), (0.036901, -0.128037, -0.010165), (0.035827, -0.128037, -0.016959), (-0.029336, 0.128037, -0.016959), (-0.028799, 0.128037, -0.010165), (-0.028665, 0.128037, -0.00337), (-0.027918, 0.126638, 0.00645), (-0.027918, -0.126638, 0.00645), (-0.028665, -0.128037, -0.00337), (-0.028799, -0.128037, -0.010165), (-0.029336, -0.128037, -0.016959), (0.017139, 0.128037, -0.016959), (0.018034, 0.128037, -0.010165), (0.018258, 0.128037, -0.00337), (0.018755, 0.126638, 0.009992), (0.018755, -0.126638, 0.009992), (0.018258, -0.128037, -0.00337), (0.018034, -0.128037, -0.010165), (0.017139, -0.128037, -0.016959), (-0.006099, 0.128037, -0.016959), (-0.005383, 0.128037, -0.010165), (-0.005204, 0.128037, -0.00337), (-0.00458, 0.126638, 0.008572), (-0.00458, -0.126638, 0.008572), (-0.005204, -0.128037, -0.00337), (-0.005383, -0.128037, -0.010165), (-0.006099, -0.128037, -0.016959), (0.09234, 0.128037, -0.016959), (0.093843, 0.128037, -0.010165), (0.09422, 0.128037, -0.00337), (0.094294, 0.126638, 0.006881), (0.094294, -0.126638, 0.006881), (0.09422, -0.128037, -0.00337), (0.093843, -0.128037, -0.010165), (0.09234, -0.128037, -0.016959), (0.079604, 0.128037, -0.016959), (0.081, 0.128037, -0.010165), (0.08135, 0.128037, -0.00337), (0.0815, 0.126638, 0.009634), (0.0815, -0.126638, 0.009634), (0.08135, -0.128037, -0.00337), (0.081, -0.128037, -0.010165), (0.079604, -0.128037, -0.016959), (0.065662, 0.128037, -0.016959), (0.066951, 0.128037, -0.010165), (0.067273, 0.128037, -0.00337), (0.067497, 0.126638, 0.010743), (0.067497, -0.126638, 0.010743), (0.067273, -0.128037, -0.00337), (0.066951, -0.128037, -0.010165), (0.065662, -0.128037, -0.016959), (0.05172, 0.128037, -0.016959), (0.0529, 0.128037, -0.010165), (0.053195, 0.128037, -0.00337), (0.053495, 0.126638, 0.01081), (0.053495, -0.126638, 0.01081), (0.053195, -0.128037, -0.00337), (0.0529, -0.128037, -0.010165), (0.05172, -0.128037, -0.016959), (-0.052551, 0.128037, -0.016959), (-0.052283, 0.128037, -0.010165), (-0.052217, 0.128037, -0.00337), (-0.051282, 0.126638, 0.004136), (-0.051282, -0.126638, 0.004135), (-0.052217, -0.128037, -0.00337), (-0.052283, -0.128037, -0.010165), (-0.052551, -0.128037, -0.016959), (-0.075801, 0.128037, -0.016959), (-0.075665, 0.128037, -0.010165), (-0.075634, 0.128037, -0.00337), (-0.074605, 0.126638, 0.001425), (-0.074605, -0.126638, 0.001425), (-0.075634, -0.128037, -0.00337), (-0.075665, -0.128037, -0.010165), (-0.075801, -0.128037, -0.016959), (0.110987, -0.126817, -0.001446), (0.110987, 0.126817, -0.001446), (0.11157, -0.127845, -0.002827), (0.11157, 0.127845, -0.002827), (0.112081, -0.127845, -0.002827), (0.112081, 0.127845, -0.002827), (0.101906, 0.128037, -0.016959), (0.103463, 0.128037, -0.010165), (0.103853, 0.128037, -0.00337), (0.103889, 0.126638, 0.003562), (0.103889, -0.126638, 0.003562), (0.103853, -0.128037, -0.00337), (0.103463, -0.128037, -0.010165), (0.101906, -0.128037, -0.016959), (0.111874, -0.126902, -0.002701), (0.111874, -0.128037, -0.00337), (0.111874, 0.126901, -0.002701), (0.111874, 0.128037, -0.00337), (-0.094172, 0.128037, -0.016959), (-0.094137, 0.128037, -0.010165), (-0.094127, 0.128037, -0.00337), (-0.093032, 0.126638, -0.001045), (-0.093032, -0.126638, -0.001045), (-0.094127, -0.128037, -0.00337), (-0.094137, -0.128037, -0.010165), (-0.094172, -0.128037, -0.016959)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(0.503271, 0.331252), (0.503309, 0.167736), (0.505157, 0.167725), (0.505119, 0.331263), (0.511173, 0.332827), (0.510079, 0.332827), (0.510083, 0.331263), (0.51111, 0.331263), (0.51111, 0.331263), (0.510083, 0.331263), (0.510083, 0.167725), (0.51111, 0.167725), (0.510079, 0.16642), (0.511172, 0.16642), (0.51111, 0.167725), (0.510083, 0.167725), (0.510083, 0.331263), (0.505119, 0.331263), (0.505157, 0.167725), (0.510083, 0.167725), (0.51111, 0.331263), (0.51111, 0.167725), (0.513407, 0.167725), (0.513407, 0.331263), (0.510083, 0.331263), (0.510079, 0.332827), (0.505145, 0.332845), (0.505119, 0.331263), (0.50519, 0.166405), (0.510079, 0.16642), (0.510083, 0.167725), (0.505157, 0.167725), (0.51111, 0.167725), (0.511172, 0.16642), (0.513519, 0.16642), (0.513407, 0.167725), (0.513407, 0.331263), (0.513455, 0.332827), (0.511173, 0.332827), (0.51111, 0.331263), (0.515704, 0.331263), (0.515704, 0.167725), (0.518001, 0.167725), (0.518001, 0.331263), (0.518001, 0.331263), (0.518019, 0.332827), (0.515737, 0.332827), (0.515704, 0.331263), (0.515704, 0.167725), (0.515866, 0.16642), (0.518213, 0.16642), (0.518001, 0.167725), (0.518001, 0.331263), (0.518001, 0.167725), (0.520211, 0.167666), (0.520207, 0.331263), (0.520207, 0.331263), (0.520198, 0.332827), (0.518019, 0.332827), (0.518001, 0.331263), (0.518001, 0.167725), (0.518213, 0.16642), (0.520211, 0.16642), (0.520211, 0.167666), (0.513407, 0.331263), (0.513407, 0.167725), (0.515704, 0.167725), (0.515704, 0.331263), (0.515704, 0.331263), (0.515737, 0.332827), (0.513455, 0.332827), (0.513407, 0.331263), (0.513407, 0.167725), (0.513519, 0.16642), (0.515866, 0.16642), (0.515704, 0.167725), (0.520748, 0.331732), (0.520748, 0.167377), (0.521463, 0.167377), (0.521463, 0.331732), (0.520211, 0.167666), (0.520211, 0.16642), (0.520748, 0.166778), (0.520748, 0.167377), (0.520198, 0.332827), (0.520207, 0.331263), (0.520748, 0.331732), (0.520748, 0.332384), (0.521463, 0.167377), (0.522292, 0.167377), (0.522278, 0.331732), (0.521463, 0.331732), (0.520211, 0.167666), (0.520748, 0.167377), (0.520748, 0.331732), (0.520207, 0.331263)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_Book_28_0"
        {
            token outputs:surface.connect = </root/_materials/M_Book_28_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_Book_28_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Book_Cover_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_Book_28_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

