#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer2_8_FridgeDrawer2B2_2_GeomSubset_2"
    {
        def Mesh "FridgeDrawer2_8_FridgeDrawer2B2_2_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer2B2_2>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.005866, 0.040994, -1.010246), (-0.005854, 0.040994, -1.010246), (-0.005866, 0.041004, -1.010246), (-0.005854, 0.041004, -1.010246), (-0.005866, 0.040994, -1.010246), (-0.005854, 0.040994, -1.010246), (-0.005866, 0.041004, -1.010246), (-0.005854, 0.041004, -1.010246), (-0.005866, 0.040994, -1.010246), (-0.005854, 0.040994, -1.010246), (-0.005866, 0.041004, -1.010246), (-0.005854, 0.041004, -1.010246), (-0.005866, 0.040994, -1.010246), (-0.005854, 0.040994, -1.010246), (-0.005866, 0.041004, -1.010246), (-0.005854, 0.041004, -1.010246), (-0.005866, 0.040994, -1.010246), (-0.005854, 0.040994, -1.010246), (-0.005866, 0.041004, -1.010246), (-0.005854, 0.041004, -1.010246), (-0.005866, 0.040994, -1.010246), (-0.005854, 0.040994, -1.010246), (-0.005866, 0.041004, -1.010246), (-0.005854, 0.041004, -1.010246), (-0.005866, 0.040994, -1.010246), (-0.005854, 0.040994, -1.010246), (-0.005866, 0.041004, -1.010246), (-0.005854, 0.041004, -1.010246), (0.033432, 0.226687, -0.677556), (0.415217, 0.226687, -0.677556), (0.033432, 0.150627, -0.826686), (0.033432, 0.145214, -0.830439), (0.415217, 0.145214, -0.830439), (0.415217, 0.150627, -0.826686), (0.033432, 0.226687, -0.667327), (0.033432, 0.150627, -0.667327), (0.033432, 0.145214, -0.667327), (0.033432, -0.229682, -0.667327), (0.415217, 0.150627, -0.667327), (0.415217, 0.226687, -0.667327), (0.415217, 0.145214, -0.667327), (0.415217, -0.229682, -0.667327), (0.415217, -0.189386, -0.830439), (0.415217, -0.211742, -0.801785), (0.033432, -0.211742, -0.801785), (0.033432, -0.189386, -0.830439), (0.033432, -0.21004, -0.81275), (0.415217, -0.21004, -0.81275), (0.033432, -0.205194, -0.822046), (0.415217, -0.205194, -0.822046), (0.033432, -0.197941, -0.828258), (0.415217, -0.197941, -0.828258), (0.405943, 0.145553, -0.819619), (0.042706, 0.145553, -0.819619), (0.40944, -0.202275, -0.799541), (0.406083, -0.222179, -0.665682), (0.042565, -0.222179, -0.665682), (0.039209, -0.202275, -0.799541), (0.405943, 0.143375, -0.82113), (0.042706, 0.143375, -0.82113), (0.046349, 0.150627, -0.667327), (0.042565, 0.219076, -0.667327), (0.046349, 0.145214, -0.667327), (0.40935, -0.20118, -0.808046), (0.40935, -0.198413, -0.813355), (0.40935, -0.194271, -0.816902), (0.409418, -0.188443, -0.81817), (0.4023, 0.145214, -0.667327), (0.406083, 0.219076, -0.667327), (0.4023, 0.150627, -0.667327), (0.039231, -0.188443, -0.81817), (0.039298, -0.194271, -0.816902), (0.039298, -0.198413, -0.813355), (0.039298, -0.20118, -0.808046), (0.045609, 0.144841, -0.698535), (0.041741, -0.217294, -0.698535), (0.403039, 0.144841, -0.698535), (0.403046, 0.149587, -0.698535), (0.408687, 0.205438, -0.698535), (0.406907, -0.217294, -0.698535), (0.045602, 0.149587, -0.698535), (0.039961, 0.205438, -0.698535), (0.033432, 0.215987, -0.698535), (0.415217, 0.215987, -0.698535), (0.415217, -0.225518, -0.698535), (0.033432, -0.225518, -0.698535), (0.033432, 0.150627, -0.698535), (0.033432, 0.145214, -0.698535), (0.415217, 0.145214, -0.698535), (0.415217, 0.150627, -0.698535), (0.033432, -0.244862, -0.667327), (0.415217, -0.244862, -0.667327), (0.415217, -0.240698, -0.698535), (0.033432, -0.240698, -0.698535)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-116.940094, -111.56198), (-116.940094, -111.56213), (-116.93998, -111.56213), (-116.93998, -111.56198)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer2B2_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2B2_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2B2_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2B2_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B2_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B2_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

