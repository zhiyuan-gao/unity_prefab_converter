#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer1_24_FridgeDrawer1D6_1_GeomSubset_2"
    {
        def Mesh "FridgeDrawer1_24_FridgeDrawer1D6_1_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer1D6_2>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.116504, 0.041805, -1.088934), (0.116491, 0.041805, -1.088934), (0.116504, 0.041815, -1.088934), (0.116491, 0.041815, -1.088934), (0.116504, 0.041805, -1.088934), (0.116491, 0.041805, -1.088934), (0.116504, 0.041815, -1.088934), (0.116491, 0.041815, -1.088934), (0.116504, 0.041805, -1.088934), (0.116491, 0.041805, -1.088934), (0.116504, 0.041815, -1.088934), (0.116491, 0.041815, -1.088934), (0.116504, 0.041805, -1.088934), (0.116491, 0.041805, -1.088934), (0.116504, 0.041815, -1.088934), (0.116491, 0.041815, -1.088934), (0.116504, 0.041805, -1.088934), (0.116491, 0.041805, -1.088934), (0.116504, 0.041815, -1.088934), (0.116491, 0.041815, -1.088934), (0.116504, 0.041805, -1.088934), (0.116491, 0.041805, -1.088934), (0.116504, 0.041815, -1.088934), (0.116491, 0.041815, -1.088934), (0.116504, 0.041805, -1.088934), (0.116491, 0.041805, -1.088934), (0.116504, 0.041815, -1.088934), (0.116491, 0.041815, -1.088934), (0.13426, 0.238636, -0.420977), (-0.586561, 0.238636, -0.420977), (0.13426, -0.281624, -0.420977), (-0.586561, -0.281624, -0.420977), (-0.157526, 0.238636, -0.420977), (-0.054502, 0.238636, -0.420977), (-0.397799, 0.238636, -0.420977), (-0.294775, 0.238636, -0.420977), (-0.157526, -0.305774, -0.420977), (-0.054905, -0.300637, -0.420977), (-0.397396, -0.300637, -0.420977), (-0.294775, -0.305774, -0.420977), (-0.054502, 0.238636, -0.664022), (0.13426, 0.238636, -0.664022), (-0.397799, 0.238636, -0.664022), (-0.586561, 0.238636, -0.664022), (-0.294775, 0.238636, -0.664022), (-0.157526, 0.238636, -0.664022), (0.121641, 0.228562, -0.420977), (-0.573943, 0.228562, -0.420977), (0.121641, -0.272739, -0.420977), (-0.573943, -0.272739, -0.420977), (-0.157526, 0.228562, -0.420977), (-0.054502, 0.228562, -0.420977), (-0.397799, 0.228562, -0.420977), (-0.294775, 0.228562, -0.420977), (-0.157921, -0.2957, -0.420977), (-0.05609, -0.290603, -0.420977), (-0.396212, -0.290603, -0.420977), (-0.294381, -0.2957, -0.420977), (0.121641, 0.228562, -0.653213), (-0.573943, 0.228562, -0.653213), (-0.157526, 0.228562, -0.653213), (-0.054502, 0.228562, -0.653213), (-0.397799, 0.228562, -0.653213), (-0.294775, 0.228562, -0.653213), (0.13426, 0.238636, -0.431159), (-0.054502, 0.238636, -0.431159), (0.13426, -0.281624, -0.431159), (-0.054905, -0.300637, -0.431159), (-0.586561, -0.281624, -0.431159), (-0.397396, -0.300637, -0.431159), (-0.586561, 0.238636, -0.431159), (-0.397799, 0.238636, -0.431159), (-0.294775, -0.305774, -0.431159), (-0.157526, -0.305774, -0.431159), (-0.157526, 0.238636, -0.431159), (-0.294775, 0.238636, -0.431159), (-0.294381, -0.2957, -0.431159), (-0.396212, -0.290603, -0.431159), (-0.573943, -0.272739, -0.431159), (-0.573943, 0.228562, -0.431159), (-0.397799, 0.228562, -0.431159), (-0.294775, 0.228562, -0.431159), (-0.157526, 0.228562, -0.431159), (-0.054502, 0.228562, -0.431159), (0.121641, 0.228562, -0.431159), (0.121641, -0.272739, -0.431159), (-0.05609, -0.290603, -0.431159), (-0.157921, -0.2957, -0.431159), (0.135988, 0.240016, -0.42306), (-0.58829, 0.240016, -0.42306), (0.135988, -0.282841, -0.42306), (-0.58829, -0.282841, -0.42306), (-0.157526, 0.240016, -0.42306), (-0.054502, 0.240016, -0.42306), (-0.397799, 0.240016, -0.42306), (-0.294775, 0.240016, -0.42306), (-0.157472, -0.307154, -0.42306), (-0.054743, -0.302012, -0.42306), (-0.397558, -0.302012, -0.42306), (-0.29483, -0.307154, -0.42306), (0.135988, 0.240016, -0.429075), (-0.054502, 0.240016, -0.429075), (0.135988, -0.282841, -0.429075), (-0.054743, -0.302012, -0.429075), (-0.58829, -0.282841, -0.429075), (-0.397558, -0.302012, -0.429075), (-0.58829, 0.240016, -0.429075), (-0.397799, 0.240016, -0.429075), (-0.29483, -0.307154, -0.429075), (-0.157472, -0.307154, -0.429075), (-0.157526, 0.240016, -0.429075), (-0.294775, 0.240016, -0.429075), (-0.054905, -0.300637, -0.620944), (-0.054877, -0.262687, -0.664022), (0.13426, -0.281624, -0.620944), (0.13426, -0.243674, -0.664022), (-0.397424, -0.262687, -0.664022), (-0.397396, -0.300637, -0.620944), (-0.586561, -0.243674, -0.664022), (-0.586561, -0.281624, -0.620944), (-0.157526, -0.267824, -0.664022), (-0.157526, -0.305774, -0.620944), (-0.294775, -0.305774, -0.620944), (-0.294775, -0.267824, -0.664022), (0.121641, -0.234789, -0.653213), (0.121641, -0.272739, -0.610135), (-0.573943, -0.272739, -0.610135), (-0.573943, -0.234789, -0.653213), (-0.157892, -0.25775, -0.653213), (-0.157921, -0.2957, -0.610135), (-0.05609, -0.290603, -0.610135), (-0.055973, -0.252653, -0.653213), (-0.396328, -0.252653, -0.653213), (-0.396212, -0.290603, -0.610135), (-0.294409, -0.25775, -0.653213), (-0.294381, -0.2957, -0.610135), (-0.397413, -0.27721, -0.660743), (-0.294775, -0.282347, -0.660743), (-0.397404, -0.289522, -0.651405), (-0.294775, -0.294659, -0.651405), (-0.397398, -0.297748, -0.637429), (-0.294775, -0.302885, -0.637429), (-0.157526, -0.282347, -0.660743), (-0.054888, -0.27721, -0.660743), (-0.157526, -0.294659, -0.651405), (-0.054897, -0.289522, -0.651405), (-0.157526, -0.302885, -0.637429), (-0.054903, -0.297748, -0.637429), (-0.586561, -0.258197, -0.660743), (-0.586561, -0.270509, -0.651405), (-0.586561, -0.278735, -0.637429), (0.13426, -0.258197, -0.660743), (0.13426, -0.270509, -0.651405), (0.13426, -0.278735, -0.637429), (0.121641, -0.249312, -0.649934), (-0.056018, -0.267176, -0.649934), (0.121641, -0.261624, -0.640596), (-0.056056, -0.279487, -0.640596), (0.121641, -0.26985, -0.62662), (-0.056081, -0.287714, -0.62662), (-0.396284, -0.267176, -0.649934), (-0.573943, -0.249312, -0.649934), (-0.396246, -0.279487, -0.640596), (-0.573943, -0.261624, -0.640596), (-0.396221, -0.287714, -0.62662), (-0.573943, -0.26985, -0.62662), (-0.157903, -0.272273, -0.649934), (-0.294398, -0.272273, -0.649934), (-0.157913, -0.284585, -0.640596), (-0.294389, -0.284585, -0.640596), (-0.157919, -0.292811, -0.62662), (-0.294383, -0.292811, -0.62662)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-118.54023, -109.61047), (-118.54023, -113.51364), (-115.45162, -113.51364), (-115.45162, -109.61047)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer1D6_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1D6_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1D6_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1D6_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1D6_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1D6_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

