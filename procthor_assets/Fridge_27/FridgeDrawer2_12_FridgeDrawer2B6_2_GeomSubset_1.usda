#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer2_12_FridgeDrawer2B6_2_GeomSubset_1"
    {
        def Mesh "FridgeDrawer2_12_FridgeDrawer2B6_2_GeomSubset_1"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [4, 5, 7, 6]
            rel material:binding = </root/_materials/M_FridgeDrawer2B6_1>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.016557, 0.067322, -0.895309), (0.016547, 0.067322, -0.895309), (0.016557, 0.067332, -0.895309), (0.016547, 0.067332, -0.895309), (0.016557, 0.067322, -0.895309), (0.016547, 0.067322, -0.895309), (0.016557, 0.067332, -0.895309), (0.016547, 0.067332, -0.895309), (0.016557, 0.067322, -0.895309), (0.016547, 0.067322, -0.895309), (0.016557, 0.067332, -0.895309), (0.016547, 0.067332, -0.895309), (0.016557, 0.067322, -0.895309), (0.016547, 0.067322, -0.895309), (0.016557, 0.067332, -0.895309), (0.016547, 0.067332, -0.895309), (0.016557, 0.067322, -0.895309), (0.016547, 0.067322, -0.895309), (0.016557, 0.067332, -0.895309), (0.016547, 0.067332, -0.895309), (0.016557, 0.067322, -0.895309), (0.016547, 0.067322, -0.895309), (0.016557, 0.067332, -0.895309), (0.016547, 0.067332, -0.895309), (0.016557, 0.067322, -0.895309), (0.016547, 0.067322, -0.895309), (0.016557, 0.067332, -0.895309), (0.016547, 0.067332, -0.895309), (-0.015783, 0.241071, -0.586503), (-0.329976, 0.241071, -0.586503), (-0.015783, 0.169903, -0.691903), (-0.015783, 0.164839, -0.694555), (-0.329976, 0.164839, -0.694555), (-0.329976, 0.169903, -0.691903), (-0.015783, 0.241071, -0.579273), (-0.015783, 0.169903, -0.579273), (-0.015783, 0.164839, -0.579273), (-0.015783, -0.185944, -0.579273), (-0.329976, 0.169903, -0.579273), (-0.329976, 0.241071, -0.579273), (-0.329976, 0.164839, -0.579273), (-0.329976, -0.185944, -0.579273), (-0.329976, -0.14824, -0.694555), (-0.329976, -0.169158, -0.674303), (-0.015783, -0.169158, -0.674303), (-0.015783, -0.14824, -0.694555), (-0.015783, -0.167565, -0.682053), (-0.329976, -0.167565, -0.682053), (-0.015783, -0.163031, -0.688624), (-0.329976, -0.163031, -0.688624), (-0.015783, -0.156245, -0.693014), (-0.329976, -0.156245, -0.693014), (-0.322344, 0.165156, -0.686908), (-0.023415, 0.165156, -0.686908), (-0.325222, -0.1603, -0.672717), (-0.32246, -0.178924, -0.578111), (-0.0233, -0.178924, -0.578111), (-0.020537, -0.1603, -0.672717), (-0.322344, 0.163118, -0.687976), (-0.023415, 0.163118, -0.687976), (-0.026413, 0.169903, -0.579273), (-0.0233, 0.233949, -0.579273), (-0.026413, 0.164839, -0.579273), (-0.325148, -0.159275, -0.678729), (-0.325148, -0.156686, -0.682481), (-0.325148, -0.152811, -0.684988), (-0.325204, -0.147357, -0.685884), (-0.319346, 0.164839, -0.579273), (-0.32246, 0.233949, -0.579273), (-0.319346, 0.169903, -0.579273), (-0.020555, -0.147357, -0.685884), (-0.020611, -0.152811, -0.684988), (-0.020611, -0.156686, -0.682481), (-0.020611, -0.159275, -0.678729), (-0.025805, 0.164489, -0.60133), (-0.022622, -0.174353, -0.60133), (-0.319955, 0.164489, -0.60133), (-0.319961, 0.16893, -0.60133), (-0.324603, 0.221189, -0.60133), (-0.323138, -0.174353, -0.60133), (-0.025799, 0.16893, -0.60133), (-0.021157, 0.221189, -0.60133), (-0.015783, 0.231059, -0.60133), (-0.329976, 0.231059, -0.60133), (-0.329976, -0.182048, -0.60133), (-0.015783, -0.182048, -0.60133), (-0.015783, 0.169903, -0.60133), (-0.015783, 0.164839, -0.60133), (-0.329976, 0.164839, -0.60133), (-0.329976, 0.169903, -0.60133), (-0.015783, -0.200147, -0.579273), (-0.329976, -0.200147, -0.579273), (-0.329976, -0.196251, -0.60133), (-0.015783, -0.196251, -0.60133)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-141.89792, -110.22088), (-141.89792, -111.91363), (-140.29944, -111.91363), (-140.29944, -110.22088)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer2B6_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2B6_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2B6_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2B6_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B6_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B6_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

