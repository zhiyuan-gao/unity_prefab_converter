#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer1_27_FridgeDrawer1E3_2_GeomSubset_2"
    {
        def Mesh "FridgeDrawer1_27_FridgeDrawer1E3_2_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer1E3_2>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (0.417229, -0.254765, -0.521907), (-0.405564, -0.254767, -0.521907), (0.417229, -0.254765, -0.302704), (-0.405564, -0.254767, -0.302704), (0.417229, -0.238875, -0.302704), (-0.405564, -0.238876, -0.302704), (0.417229, -0.238875, -0.521907), (-0.405564, -0.238876, -0.521907), (-0.415522, -0.261266, -0.342168), (-0.415006, -0.264347, -0.342251), (-0.412271, -0.262391, -0.344408), (-0.327131, -0.284292, -0.344408), (-0.327863, -0.286533, -0.342086), (-0.412271, -0.262391, -0.313819), (-0.41486, -0.264384, -0.316058), (-0.415522, -0.261266, -0.316058), (-0.327131, -0.284292, -0.313819), (-0.327863, -0.286533, -0.316141), (-0.406673, -0.257505, -0.3162), (-0.408256, -0.259466, -0.313819), (-0.410623, -0.258171, -0.3162), (-0.3253, -0.277224, -0.313819), (-0.324698, -0.274956, -0.316141), (-0.408256, -0.259466, -0.344408), (-0.4067, -0.257499, -0.342056), (-0.4106, -0.258156, -0.342056), (-0.324698, -0.274956, -0.342086), (-0.3253, -0.277224, -0.344408), (-0.000988, -0.323071, -0.316141), (-0.000988, -0.320744, -0.313819), (-0.150805, -0.315676, -0.313819), (-0.151153, -0.317982, -0.316141), (-0.000989, -0.303622, -0.313819), (-0.000989, -0.301298, -0.316141), (-0.151153, -0.297802, -0.316141), (-0.151392, -0.300117, -0.313819), (-0.000989, -0.301298, -0.342086), (-0.000989, -0.303622, -0.344408), (-0.151392, -0.300117, -0.344408), (-0.151153, -0.297802, -0.342086), (-0.000988, -0.320744, -0.344408), (-0.000988, -0.323071, -0.342086), (-0.151153, -0.317982, -0.342086), (-0.150805, -0.315676, -0.344408), (-0.238139, -0.302332, -0.313819), (-0.238717, -0.304603, -0.316141), (-0.238717, -0.288591, -0.316141), (-0.239149, -0.290886, -0.313819), (-0.239149, -0.290886, -0.344408), (-0.238717, -0.288591, -0.342086), (-0.238717, -0.304603, -0.342086), (-0.238139, -0.302332, -0.344408), (0.423935, -0.26239, -0.344408), (0.426524, -0.264382, -0.342168), (0.427187, -0.261264, -0.342168), (0.338795, -0.284291, -0.344408), (0.339528, -0.286531, -0.342086), (0.427187, -0.261264, -0.316058), (0.42667, -0.264345, -0.315976), (0.423935, -0.26239, -0.313819), (0.338795, -0.284291, -0.313819), (0.339528, -0.286531, -0.316141), (0.422286, -0.258169, -0.3162), (0.41992, -0.259464, -0.313819), (0.418338, -0.257504, -0.3162), (0.336964, -0.277223, -0.313819), (0.336363, -0.274955, -0.316141), (0.422264, -0.258155, -0.342056), (0.418338, -0.257504, -0.342026), (0.41992, -0.259464, -0.344408), (0.336363, -0.274955, -0.342086), (0.336964, -0.277223, -0.344408), (0.162817, -0.317982, -0.316141), (0.16247, -0.315675, -0.313819), (0.163056, -0.300116, -0.313819), (0.162817, -0.297802, -0.316141), (0.162817, -0.297802, -0.342086), (0.163056, -0.300116, -0.344408), (0.16247, -0.315675, -0.344408), (0.162817, -0.317982, -0.342086), (0.250381, -0.304602, -0.316141), (0.249804, -0.302331, -0.313819), (0.250813, -0.290885, -0.313819), (0.250381, -0.28859, -0.316141), (0.250381, -0.28859, -0.342086), (0.250813, -0.290885, -0.344408), (0.249804, -0.302331, -0.344408), (0.250381, -0.304602, -0.342086), (0.436638, -0.262793, -0.533139), (0.442207, -0.258395, -0.538614), (0.437055, -0.258485, -0.543011), (0.431684, -0.262793, -0.538356), (-0.42002, -0.262794, -0.538356), (-0.425282, -0.258396, -0.543011), (-0.430543, -0.258487, -0.538704), (-0.424974, -0.262794, -0.533139), (0.429903, -0.049742, -0.295187), (0.436947, -0.045087, -0.299584), (0.442207, -0.049395, -0.299494), (0.436639, -0.053559, -0.295187), (-0.424975, -0.05356, -0.295187), (-0.430543, -0.049486, -0.299585), (-0.425391, -0.045088, -0.299493), (-0.418239, -0.049744, -0.295187), (0.442207, -0.049575, -0.538523), (0.436839, -0.045087, -0.538523), (0.436839, -0.049575, -0.543011), (-0.425175, -0.049576, -0.543011), (-0.425175, -0.045088, -0.538523), (-0.430543, -0.049576, -0.538523), (0.436839, -0.258305, -0.295187), (0.442207, -0.258305, -0.299675), (0.436839, -0.262793, -0.299675), (-0.425175, -0.262794, -0.299675), (-0.430543, -0.258306, -0.299675), (-0.425175, -0.258306, -0.295187), (0.416646, -0.262793, -0.524715), (0.411543, -0.258354, -0.520123), (0.416853, -0.258385, -0.515716), (0.422304, -0.262793, -0.520302), (-0.41064, -0.262794, -0.520302), (-0.405189, -0.258346, -0.515676), (-0.399939, -0.258405, -0.520123), (-0.404982, -0.262794, -0.524715), (-0.405189, -0.258306, -0.299675), (-0.410558, -0.262794, -0.299675), (-0.410558, -0.258306, -0.295187), (0.422222, -0.258305, -0.295187), (0.422222, -0.262793, -0.299675), (0.416853, -0.258305, -0.299675), (0.416852, -0.068148, -0.299623), (0.411571, -0.063712, -0.299601), (0.417212, -0.059218, -0.295187), (0.422317, -0.063998, -0.295187), (-0.410654, -0.063999, -0.295187), (-0.405552, -0.059169, -0.295187), (-0.399864, -0.063713, -0.299639), (-0.405189, -0.068149, -0.299623), (-0.405189, -0.068201, -0.515635), (-0.39982, -0.063713, -0.515635), (-0.39982, -0.068201, -0.520123), (0.411484, -0.0682, -0.520123), (0.411484, -0.063712, -0.515635), (0.416852, -0.0682, -0.515635)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-118.53981, -109.61047), (-118.53981, -113.51364), (-115.25104, -113.51364), (-115.25104, -109.61047)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer1E3_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1E3_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1E3_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1E3_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1E3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1E3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

