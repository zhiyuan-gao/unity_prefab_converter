#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer2_27_FridgeDrawer2E3_3_GeomSubset_4"
    {
        def Mesh "FridgeDrawer2_27_FridgeDrawer2E3_3_GeomSubset_4"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [16, 17, 19, 18, 84, 85, 87, 86, 86, 87, 89, 88, 88, 89, 91, 90, 90, 91, 85, 84, 85, 91, 89, 87, 90, 84, 86, 88]
            rel material:binding = </root/_materials/M_FridgeDrawer2E3_4>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.0000024268018, -1, 0), (0.0000024268018, -1, 0), (0.0000024268018, -1, 0), (0.0000024268018, -1, 0), (-8.8256885e-10, 0, 1), (-8.8256885e-10, 0, 1), (-8.8256885e-10, 0, 1), (-8.8256885e-10, 0, 1), (-0.0000012134009, 1, 0), (-0.0000012134009, 1, 0), (-0.0000012134009, 1, 0), (-0.0000012134009, 1, 0), (2.8694358e-10, 0, -1), (2.8694358e-10, 0, -1), (2.8694358e-10, 0, -1), (2.8694358e-10, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (-0.000994, -0.055211, -0.941303), (-0.000984, -0.055211, -0.941303), (-0.000994, -0.055202, -0.941303), (-0.000984, -0.055202, -0.941303), (-0.424974, -0.262794, -0.784551), (-0.430543, -0.258397, -0.790025), (-0.42539, -0.258487, -0.794423), (-0.42002, -0.262794, -0.789768), (0.431684, -0.262793, -0.789768), (0.436947, -0.258395, -0.794423), (0.442207, -0.258486, -0.790116), (0.436638, -0.262793, -0.784551), (-0.418239, -0.049744, -0.546598), (-0.425284, -0.045088, -0.550996), (-0.430543, -0.049396, -0.550906), (-0.424975, -0.05356, -0.546598), (0.436639, -0.053559, -0.546598), (0.442207, -0.049485, -0.550996), (0.437055, -0.045087, -0.550905), (0.429903, -0.049742, -0.546598), (-0.430543, -0.049576, -0.789935), (-0.425175, -0.045088, -0.789935), (-0.425175, -0.049576, -0.794423), (0.436839, -0.049575, -0.794423), (0.436839, -0.045087, -0.789935), (0.442207, -0.049575, -0.789935), (-0.425175, -0.258306, -0.546598), (-0.430543, -0.258306, -0.551086), (-0.425175, -0.262794, -0.551086), (0.436839, -0.262793, -0.551086), (0.442207, -0.258305, -0.551086), (0.436839, -0.258305, -0.546598), (-0.404982, -0.262794, -0.776127), (-0.39988, -0.258356, -0.771535), (-0.405189, -0.258387, -0.767128), (-0.41064, -0.262794, -0.771714), (0.422304, -0.262793, -0.771714), (0.416853, -0.258345, -0.767087), (0.411603, -0.258404, -0.771535), (0.416646, -0.262793, -0.776127), (0.416853, -0.258305, -0.551086), (0.422222, -0.262793, -0.551086), (0.422222, -0.258305, -0.546598), (-0.410558, -0.258306, -0.546598), (-0.410558, -0.262794, -0.551086), (-0.405189, -0.258306, -0.551086), (-0.405189, -0.068149, -0.551034), (-0.399908, -0.063713, -0.551013), (-0.405548, -0.05922, -0.546598), (-0.410654, -0.063999, -0.546598), (0.422317, -0.063998, -0.546598), (0.417215, -0.059168, -0.546598), (0.411528, -0.063712, -0.55105), (0.416852, -0.068148, -0.551034), (0.416852, -0.0682, -0.767047), (0.411484, -0.063712, -0.767047), (0.411484, -0.0682, -0.771535), (-0.39982, -0.068201, -0.771535), (-0.39982, -0.063713, -0.767047), (-0.405189, -0.068201, -0.767047), (-0.405564, -0.254767, -0.773319), (0.417229, -0.254765, -0.773319), (-0.405564, -0.254767, -0.554116), (0.417229, -0.254765, -0.554116), (-0.405564, -0.238876, -0.554116), (0.417229, -0.238875, -0.554116), (-0.405564, -0.238876, -0.773319), (0.417229, -0.238875, -0.773319), (0.427187, -0.261264, -0.59358), (0.42667, -0.264345, -0.593662), (0.423935, -0.26239, -0.59582), (0.338795, -0.284291, -0.59582), (0.339528, -0.286531, -0.593498), (0.423935, -0.26239, -0.565231), (0.426524, -0.264382, -0.56747), (0.427187, -0.261264, -0.56747), (0.338795, -0.284291, -0.565231), (0.339528, -0.286531, -0.567552), (0.418338, -0.257504, -0.567612), (0.41992, -0.259464, -0.565231), (0.422286, -0.258169, -0.567612), (0.336964, -0.277223, -0.565231), (0.336363, -0.274955, -0.567552), (0.41992, -0.259464, -0.59582), (0.418365, -0.257498, -0.593468), (0.422264, -0.258155, -0.593468), (0.336363, -0.274955, -0.593498), (0.336964, -0.277223, -0.59582), (-0.000988, -0.323071, -0.567552), (-0.000988, -0.320744, -0.565231), (0.16247, -0.315675, -0.565231), (0.162817, -0.317982, -0.567552), (-0.000989, -0.303622, -0.565231), (-0.000989, -0.301298, -0.567552), (0.162817, -0.297802, -0.567552), (0.163056, -0.300116, -0.565231), (-0.000989, -0.301298, -0.593498), (-0.000989, -0.303622, -0.59582), (0.163056, -0.300116, -0.59582), (0.162817, -0.297802, -0.593498), (-0.000988, -0.320744, -0.59582), (-0.000988, -0.323071, -0.593498), (0.162817, -0.317982, -0.593498), (0.16247, -0.315675, -0.59582), (0.249804, -0.302331, -0.565231), (0.250381, -0.304602, -0.567552), (0.250381, -0.28859, -0.567552), (0.250813, -0.290885, -0.565231), (0.250813, -0.290885, -0.59582), (0.250381, -0.28859, -0.593498), (0.250381, -0.304602, -0.593498), (0.249804, -0.302331, -0.59582), (-0.412271, -0.262391, -0.59582), (-0.41486, -0.264384, -0.59358), (-0.415522, -0.261266, -0.59358), (-0.327131, -0.284292, -0.59582), (-0.327863, -0.286533, -0.593498), (-0.415522, -0.261266, -0.56747), (-0.415006, -0.264347, -0.567388), (-0.412271, -0.262391, -0.565231), (-0.327131, -0.284292, -0.565231), (-0.327863, -0.286533, -0.567552), (-0.410623, -0.258171, -0.567612), (-0.408256, -0.259466, -0.565231), (-0.406673, -0.257505, -0.567612), (-0.3253, -0.277224, -0.565231), (-0.324698, -0.274956, -0.567552), (-0.4106, -0.258156, -0.593468), (-0.406673, -0.257505, -0.593438), (-0.408256, -0.259466, -0.59582), (-0.324698, -0.274956, -0.593498), (-0.3253, -0.277224, -0.59582), (-0.151153, -0.317982, -0.567552), (-0.150805, -0.315676, -0.565231), (-0.151392, -0.300117, -0.565231), (-0.151153, -0.297802, -0.567552), (-0.151153, -0.297802, -0.593498), (-0.151392, -0.300117, -0.59582), (-0.150805, -0.315676, -0.59582), (-0.151153, -0.317982, -0.593498), (-0.238717, -0.304603, -0.567552), (-0.238139, -0.302332, -0.565231), (-0.239149, -0.290886, -0.565231), (-0.238717, -0.288591, -0.567552), (-0.238717, -0.288591, -0.593498), (-0.239149, -0.290886, -0.59582), (-0.238139, -0.302332, -0.59582), (-0.238717, -0.304603, -0.593498)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-68.66739, -112.803406), (-68.66739, -112.80342), (-68.66738, -112.80342), (-68.66738, -112.803406), (-72.15786, 0.969813), (-72.15786, -1.31757), (-71.54847, -1.31757), (-71.54847, 0.969813), (-71.72657, 0.969813), (-71.72657, -1.317569), (-71.682396, -1.317569), (-71.682396, 0.969813), (-71.8606, 0.969813), (-71.8606, -1.317569), (-71.25121, -1.317569), (-71.25121, 0.969813), (-71.4295, 0.969816), (-71.4295, -1.317572), (-71.38532, -1.317572), (-71.38532, 0.969816), (-71.403984, -0.843903), (-71.3598, -0.843903), (-71.3598, -0.234517), (-71.403984, -0.234517), (-71.37846, -0.843903), (-71.33429, -0.843903), (-71.33429, -0.234518), (-71.37846, -0.234518)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer2E3_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2E3_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }
    }
}

