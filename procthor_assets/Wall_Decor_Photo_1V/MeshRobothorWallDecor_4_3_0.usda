#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "RobothorWallDecor_4_3"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "RobothorWallDecor_4_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.259724, 0.000323, -0.38576), (0.262107, 0.014978, 0.194755)]
            int[] faceVertexCounts = [4, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 28, 30, 29, 28, 31, 30, 4, 5, 7, 6, 12, 14, 13, 12, 15, 14, 13, 17, 16, 13, 14, 17, 16, 19, 18, 16, 17, 19, 20, 22, 21, 20, 23, 22, 13, 18, 12, 13, 16, 18, 17, 15, 19, 17, 14, 15, 24, 15, 12, 24, 23, 15, 20, 18, 19, 20, 25, 18, 25, 12, 18, 25, 24, 12, 23, 19, 15, 23, 20, 19, 25, 21, 26, 25, 20, 21, 24, 26, 27, 24, 25, 26, 23, 27, 22, 23, 24, 27, 29, 22, 27, 29, 30, 22, 31, 26, 21, 31, 28, 26, 28, 27, 26, 28, 29, 27, 30, 21, 22, 30, 31, 21, 8, 9, 11, 10]
            rel material:binding = </root/_materials/M_RobothorWallDecor_4_3_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.000031585114, -0.99999994, -0.0004023888), (0.0000316745, -0.99999994, -0.00040284666), (-0.00003098536, -0.99999994, -0.00040333753), (0.000031585114, -0.99999994, -0.0004023888), (-0.000031075142, -0.99999994, -0.00040319256), (0.0000316745, -0.99999994, -0.00040284666), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 3.3870425e-8, 0), (-1, 0.0000013898862, 0), (-1, 0, 0), (-1, 3.3870425e-8, 0), (-1, 0.0000014237565, 0), (-1, 0.0000013898862, 0), (0, 1, 0.0003412848), (0, 1, 0.0003412848), (0, 0.99999994, 0.00034128476), (0, 1, 0.0003412848), (0, 0.99999994, 0.00034128473), (0, 1, 0.0003412848), (1, 8.6121155e-9, 0), (1, 3.5340332e-7, 0), (1, 0, 0), (1, 8.6121155e-9, 0), (1, 3.620154e-7, 0), (1, 3.5340332e-7, 0), (0, 0.00027129834, -0.99999994), (0, 0.00027129828, -0.99999994), (0, 0.00027129837, -0.99999994), (0, 0.00027129834, -0.99999994), (0, 0.0002712983, -0.99999994), (0, 0.00027129828, -0.99999994), (0, 0.00034512507, -0.99999994), (0, 0.0003451251, -0.99999994), (0, 0.00034512504, -0.99999994), (0, 0.00034512507, -0.99999994), (0, 0.00034512507, -0.99999994), (0, 0.0003451251, -0.99999994), (0, -0.0003461553, 0.99999994), (0, -0.00034615526, 0.99999994), (0, -0.00034615526, 0.9999999), (0, -0.0003461553, 0.99999994), (0, -0.00034615523, 0.99999994), (0, -0.00034615526, 0.99999994), (0.000081925115, -1, -0.00026621643), (-0.000029065064, -0.99999994, -0.00031368172), (0.00007820969, -0.99999994, -0.00026152038), (0.000081925115, -1, -0.00026621643), (-0.000035062065, -1, -0.00031574853), (-0.000029065064, -0.99999994, -0.00031368172), (0.000030434712, -1, -0.0003126856), (-0.000077454635, -0.99999994, -0.0002643379), (0.000029819592, -0.99999994, -0.00031087408), (0.000030434712, -1, -0.0003126856), (-0.00008655226, -1, -0.00026928904), (-0.000077454635, -0.99999994, -0.0002643379), (-0.00008655226, -1, -0.00026928904), (0.00007820969, -0.99999994, -0.00026152038), (-0.000077454635, -0.99999994, -0.0002643379), (-0.00008655226, -1, -0.00026928904), (0.000081925115, -1, -0.00026621643), (0.00007820969, -0.99999994, -0.00026152038), (-0.000035062065, -1, -0.00031574853), (0.000029819592, -0.99999994, -0.00031087408), (-0.000029065064, -0.99999994, -0.00031368172), (-0.000035062065, -1, -0.00031574853), (0.000030434712, -1, -0.0003126856), (0.000029819592, -0.99999994, -0.00031087408), (-1, 0.000010945346, 0), (-1, -0.000008746764, 0), (-0.99999994, 0.000011073135, 0), (-1, 0.000010945346, 0), (-1, -0.0000088745555, 0), (-1, -0.000008746764, 0), (0, -0.0002712246, 0.99999994), (0, -0.0002712246, 0.99999994), (0, -0.00027122462, 1), (0, -0.0002712246, 0.99999994), (0, -0.00027122462, 1), (0, -0.0002712246, 0.99999994), (1, 3.4169027e-8, 0), (1, 0.000005302094, 0), (0.99999994, 0, 0), (1, 3.4169027e-8, 0), (0.99999994, 0.000005336263, 0), (1, 0.000005302094, 0), (-0.00003098536, -0.99999994, -0.00040333753), (0.00005566746, -0.9999998, -0.0003998676), (-0.000055812638, -0.99999994, -0.00040078876), (-0.00003098536, -0.99999994, -0.00040333753), (0.0000316745, -0.99999994, -0.00040284666), (0.00005566746, -0.9999998, -0.0003998676), (-0.000031075142, -0.99999994, -0.00040319256), (0.000055488854, -0.9999998, -0.0003994588), (-0.000055992292, -0.99999994, -0.00040063178), (-0.000031075142, -0.99999994, -0.00040319256), (0.000031585114, -0.99999994, -0.0004023888), (0.000055488854, -0.9999998, -0.0003994588), (0.000031585114, -0.99999994, -0.0004023888), (-0.000055812638, -0.99999994, -0.00040078876), (0.000055488854, -0.9999998, -0.0003994588), (0.000031585114, -0.99999994, -0.0004023888), (-0.00003098536, -0.99999994, -0.00040333753), (-0.000055812638, -0.99999994, -0.00040078876), (0.0000316745, -0.99999994, -0.00040284666), (-0.000055992292, -0.99999994, -0.00040063178), (0.00005566746, -0.9999998, -0.0003998676), (0.0000316745, -0.99999994, -0.00040284666), (-0.000031075142, -0.99999994, -0.00040319256), (-0.000055992292, -0.99999994, -0.00040063178), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.001043, 0.014596, -0.38576), (0.001435, 0.014596, -0.38576), (0.001043, 0.014978, -0.38576), (0.001435, 0.014978, -0.38576), (0.001043, 0.014596, -0.38576), (0.001435, 0.014596, -0.38576), (0.001043, 0.014978, -0.38576), (0.001435, 0.014978, -0.38576), (0.001043, 0.014596, -0.38576), (0.001435, 0.014596, -0.38576), (0.001043, 0.014978, -0.38576), (0.001435, 0.014978, -0.38576), (-0.259724, 0.000455, -0.192023), (-0.259724, 0.014919, -0.192018), (-0.259724, 0.014787, 0.194755), (-0.259724, 0.000323, 0.19475), (0.262107, 0.014919, -0.192018), (0.262107, 0.014787, 0.194755), (0.262107, 0.000455, -0.192023), (0.262107, 0.000323, 0.19475), (0.252248, 0.000326, 0.184154), (0.252248, 0.004006, 0.184155), (-0.249865, 0.004006, 0.184155), (-0.249865, 0.000326, 0.184154), (-0.249865, 0.000453, -0.181427), (0.252248, 0.000453, -0.181427), (0.252248, 0.004134, -0.181426), (-0.249865, 0.004134, -0.181426), (0.24922, 0.004133, -0.179352), (-0.246837, 0.004133, -0.179352), (-0.246837, 0.004007, 0.182082), (0.24922, 0.004007, 0.182082)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-9.379675, -9.755536), (-9.379675, -9.75594), (-9.379271, -9.75594), (-9.379271, -9.755536), (-9, 0), (-10, 1), (-10, 0), (-9, 0), (-9, 1), (-10, 1), (-19.367811, -9.606503), (-19.367811, -9.606655), (-19.36766, -9.606655), (-19.36766, -9.606503), (-18.92621, 0.496147), (-20.878542, 0.422902), (-18.926235, 0.422224), (-18.92621, 0.496147), (-20.878517, 0.496825), (-20.878542, 0.422902), (-18.274233, -0.384711), (-20.876123, 1.567579), (-20.876123, -0.384711), (-18.274233, -0.384711), (-18.274233, 1.567579), (-20.876123, 1.567579), (-18.926281, 0.476635), (-20.878471, 0.402035), (-18.926256, 0.402714), (-18.926281, 0.476635), (-20.878496, 0.475954), (-20.878471, 0.402035), (-18.208565, 0.636526), (-20.712126, 0.617714), (-18.208565, 0.617716), (-18.208565, 0.636526), (-20.712126, 0.636525), (-20.712126, 0.617714), (-20.770592, 0.168532), (-18.168613, 0.242449), (-20.770592, 0.242447), (-20.770592, 0.168532), (-18.168613, 0.168534), (-18.168613, 0.242449), (-18.168652, 0.263895), (-20.770554, 0.189968), (-18.168652, 0.18997), (-18.168652, 0.263895), (-20.770554, 0.263893), (-20.770554, 0.189968), (-20.721394, -0.497451), (-20.770554, 1.401366), (-20.770554, -0.550933), (-20.721394, -0.497451), (-20.721394, 1.347883), (-20.770554, 1.401366), (-18.217812, 1.347883), (-18.168652, -0.550932), (-18.168652, 1.401366), (-18.217812, 1.347883), (-18.217812, -0.49745), (-18.168652, -0.550932), (-18.217812, -0.49745), (-20.770554, -0.550933), (-18.168652, -0.550932), (-18.217812, -0.49745), (-20.721394, -0.497451), (-20.770554, -0.550933), (-20.721394, 1.347883), (-18.168652, 1.401366), (-20.770554, 1.401366), (-20.721394, 1.347883), (-18.217812, 1.347883), (-18.168652, 1.401366), (-18.969456, 0.433438), (-20.815151, 0.41527), (-18.969461, 0.414624), (-18.969456, 0.433438), (-20.815145, 0.434084), (-20.815151, 0.41527), (-20.711739, 0.607981), (-18.208954, 0.626787), (-20.711739, 0.626786), (-20.711739, 0.607981), (-18.208954, 0.607983), (-18.208954, 0.626787), (-20.81515, 0.40481), (-18.96946, 0.424286), (-20.815153, 0.423624), (-20.81515, 0.40481), (-18.969454, 0.405472), (-18.96946, 0.424286), (-21.19094, -0.265751), (-21.20604, 1.569066), (-21.20604, -0.276224), (-21.19094, -0.265751), (-21.19094, 1.558592), (-21.20604, 1.569066), (-18.717615, 1.558592), (-18.702517, -0.276222), (-18.702517, 1.569065), (-18.717615, 1.558592), (-18.717615, -0.265749), (-18.702517, -0.276222), (-18.717615, -0.265749), (-21.20604, -0.276224), (-18.702517, -0.276222), (-18.717615, -0.265749), (-21.19094, -0.265751), (-21.20604, -0.276224), (-21.19094, 1.558592), (-18.702517, 1.569065), (-21.20604, 1.569066), (-21.19094, 1.558592), (-18.717615, 1.558592), (-18.702517, 1.569065), (-29.683226, -9.316775), (-29.683226, -9.683225), (-29.316845, -9.683225), (-29.316845, -9.316775)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_RobothorWallDecor_4_3_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2]
                rel material:binding = </root/_materials/M_RobothorWallDecor_4_3_0>
            }

            def GeomSubset "M_RobothorWallDecor_4_3_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]
                rel material:binding = </root/_materials/M_RobothorWallDecor_4_3_1>
            }

            def GeomSubset "M_RobothorWallDecor_4_3_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [38]
                rel material:binding = </root/_materials/M_RobothorWallDecor_4_3_2>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorWallDecor_4_3_0"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecor_4_3_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorWallDecor_4_3_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Wall_Decor_Photo_1V_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecor_4_3_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_RobothorWallDecor_4_3_1"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecor_4_3_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.14705884, 0.14705884, 0.14705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_RobothorWallDecor_4_3_2"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecor_4_3_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (1, 0.97794116, 0.97794116)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorWallDecor_4_3_2/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecor_4_3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

