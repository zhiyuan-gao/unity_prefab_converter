#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "RobothorWallDecorInset_3_4"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "RobothorWallDecorInset_3_4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.295983, -0.014927, -0.532804), (0.298684, 0.005055, 0.35872)]
            int[] faceVertexCounts = [4, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [0, 1, 3, 2, 28, 30, 29, 28, 31, 30, 4, 5, 7, 6, 12, 14, 13, 12, 15, 14, 13, 17, 16, 13, 14, 17, 16, 19, 18, 16, 17, 19, 20, 22, 21, 20, 23, 22, 13, 18, 12, 13, 16, 18, 17, 15, 19, 17, 14, 15, 24, 15, 12, 24, 23, 15, 20, 18, 19, 20, 25, 18, 25, 12, 18, 25, 24, 12, 23, 19, 15, 23, 20, 19, 25, 21, 26, 25, 20, 21, 24, 26, 27, 24, 25, 26, 23, 27, 22, 23, 24, 27, 8, 9, 11, 10, 29, 22, 27, 29, 30, 22, 31, 26, 21, 31, 28, 26, 28, 27, 26, 28, 29, 27, 30, 21, 22, 30, 31, 21]
            rel material:binding = </root/_materials/M_RobothorWallDecorInset_3_4_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.000004188955, -1, 0.0000062996805), (0.000004188952, -1, 0.000006326652), (-0.000005688958, -1, 0.000005210595), (0.000004188955, -1, 0.0000062996805), (-0.000005688962, -1, 0.0000052189066), (0.000004188952, -1, 0.000006326652), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -0.99999994), (0, 0, -1), (0, 0, -0.99999994), (0, 0, -1), (0, 1, 0.0000014029595), (0, 1, 0.0000014030857), (0, 0.99999994, 0.0000014035716), (0, 1, 0.0000014029595), (0, 1, 0.0000014024733), (0, 1, 0.0000014030857), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, -1.8055761e-8, 0), (1, -0.0000039443835, 0), (1, 0, 0), (1, -1.8055761e-8, 0), (1, -0.0000039624415, 0), (1, -0.0000039443835, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, -1, -1.0463306e-9), (0, -1, -1.6439043e-7), (0, -1, 0), (0, -1, -1.0463306e-9), (0, -1, -2.468194e-7), (0, -1, -1.6439043e-7), (0, -1, 2.6709696e-7), (0, -1, 2.6480588e-8), (0, -1, 1.819641e-7), (0, -1, 2.6709696e-7), (0, -1, 3.4648593e-8), (0, -1, 2.6480588e-8), (0, -1, 3.4648593e-8), (0, -1, 0), (0, -1, 2.6480588e-8), (0, -1, 3.4648593e-8), (0, -1, -1.0463306e-9), (0, -1, 0), (0, -1, -2.468194e-7), (0, -1, 1.819641e-7), (0, -1, -1.6439043e-7), (0, -1, -2.468194e-7), (0, -1, 2.6709696e-7), (0, -1, 1.819641e-7), (0.0000017748181, -3.4337377e-10, -1), (0.0000017748198, -1.9165162e-12, -1), (0.0000017748181, -3.4529007e-10, -1), (0.0000017748181, -3.4337377e-10, -1), (0.0000017748198, 0, -1), (0.0000017748198, -1.9165162e-12, -1), (-1, 0.00020354151, -2.788761e-10), (-1, 0.00018669119, -1.2780638e-12), (-1, 0.00020361907, -2.8015415e-10), (-1, 0.00020354151, -2.788761e-10), (-1, 0.00018661362, 0), (-1, 0.00018669119, -1.2780638e-12), (-0.0000017653181, 0.00020088804, 1), (-9.8542206e-9, 0.0000011213816, 1), (-0.0000017751711, 0.0002020093, 1), (-0.0000017653181, 0.00020088804, 1), (0, 0, 1), (-9.8542206e-9, 0.0000011213816, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.000005688958, -1, 0.000005210595), (0.000007020738, -1, 0.000008197034), (-0.000006512517, -1, 0.0000066756784), (-0.000005688958, -1, 0.000005210595), (0.000004188952, -1, 0.000006326652), (0.000007020738, -1, 0.000008197034), (-0.000005688962, -1, 0.0000052189066), (0.0000070207407, -1, 0.0000081726575), (-0.0000065125237, -1, 0.0000066876673), (-0.000005688962, -1, 0.0000052189066), (0.000004188955, -1, 0.0000062996805), (0.0000070207407, -1, 0.0000081726575), (0.000004188955, -1, 0.0000062996805), (-0.000006512517, -1, 0.0000066756784), (0.0000070207407, -1, 0.0000081726575), (0.000004188955, -1, 0.0000062996805), (-0.000005688958, -1, 0.000005210595), (-0.000006512517, -1, 0.0000066756784), (0.000004188952, -1, 0.000006326652), (-0.0000065125237, -1, 0.0000066876673), (0.000007020738, -1, 0.000008197034), (0.000004188952, -1, 0.000006326652), (-0.000005688962, -1, 0.0000052189066), (-0.0000065125237, -1, 0.0000066876673)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.000722, 0.00452, -0.532804), (0.001317, 0.00452, -0.532804), (0.000722, 0.005055, -0.532804), (0.001317, 0.005055, -0.532804), (0.000722, 0.00452, -0.532804), (0.001317, 0.00452, -0.532804), (0.000722, 0.005055, -0.532804), (0.001317, 0.005055, -0.532804), (0.000722, 0.00452, -0.532804), (0.001317, 0.00452, -0.532804), (0.000722, 0.005055, -0.532804), (0.001317, 0.005055, -0.532804), (0.298684, -0.014927, -0.354285), (0.298684, 0.004788, -0.354285), (-0.295983, 0.004788, -0.354285), (-0.295983, -0.014927, -0.354285), (0.298684, 0.004787, 0.35872), (-0.295983, 0.004787, 0.35872), (0.298684, -0.014927, 0.35872), (-0.295983, -0.014927, 0.35872), (-0.28628, -0.014927, 0.352368), (-0.28628, -0.00991, 0.352368), (-0.28628, -0.009911, -0.347934), (-0.28628, -0.014927, -0.347933), (0.28898, -0.014927, -0.347933), (0.28898, -0.014927, 0.352369), (0.288981, -0.00991, 0.352369), (0.288981, -0.009911, -0.347933), (0.218197, -0.009911, 0.290877), (0.218197, -0.00991, -0.286442), (-0.215496, -0.00991, -0.286442), (-0.215496, -0.009911, 0.290877)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-9.410954, -9.755466), (-9.410954, -9.75594), (-9.41048, -9.75594), (-9.41048, -9.755466), (-9, 1), (-10, 0), (-9, 0), (-9, 1), (-10, 1), (-10, 0), (-19.25046, -9.574757), (-19.25046, -9.574932), (-19.250284, -9.574932), (-19.250284, -9.574757), (-19.040348, -0.200416), (-19.112328, 1.751057), (-19.112328, -0.200416), (-19.040348, -0.200416), (-19.040348, 1.751057), (-19.112328, 1.751057), (-20.709984, -0.98778), (-18.758385, 1.61543), (-20.709984, 1.61543), (-20.709984, -0.98778), (-18.758385, -0.98778), (-18.758385, 1.61543), (-19.061764, -0.190279), (-19.133732, 1.761129), (-19.133732, -0.190279), (-19.061764, -0.190279), (-19.061764, 1.761129), (-19.133732, 1.761129), (-19.09922, 1.559012), (-19.080912, -0.998008), (-19.080902, 1.559012), (-19.09922, 1.559012), (-19.099228, -0.998008), (-19.080912, -0.998008), (-19.954315, -1.016076), (-20.026293, 1.587184), (-20.026293, -1.016076), (-19.954315, -1.016076), (-19.954315, 1.587183), (-20.026293, 1.587184), (-20.004282, 1.587219), (-19.932302, -1.016111), (-19.932302, 1.58722), (-20.004282, 1.587219), (-20.004282, -1.016111), (-19.932302, -1.016111), (-18.797777, -0.992839), (-20.717503, -1.016029), (-18.765934, -1.016029), (-18.797777, -0.992839), (-20.685652, -0.992839), (-20.717503, -1.016029), (-20.685652, 1.563947), (-18.765934, 1.587138), (-20.717503, 1.587137), (-20.685652, 1.563947), (-18.797777, 1.563947), (-18.765934, 1.587138), (-18.797777, 1.563947), (-18.765934, -1.016029), (-18.765934, 1.587138), (-18.797777, 1.563947), (-18.797777, -0.992839), (-18.765934, -1.016029), (-20.685652, -0.992839), (-20.717503, 1.587137), (-20.717503, -1.016029), (-20.685652, -0.992839), (-20.685652, 1.563947), (-20.717503, 1.587137), (-19.10415, -0.165141), (-19.122461, 1.722116), (-19.122461, -0.165141), (-19.10415, -0.165141), (-19.10415, 1.722116), (-19.122461, 1.722116), (-19.06999, -0.997888), (-19.088305, 1.558892), (-19.088305, -0.997889), (-19.06999, -0.997888), (-19.06999, 1.558892), (-19.088305, 1.558892), (-19.132187, 1.722939), (-19.113861, -0.165964), (-19.113861, 1.722939), (-19.132187, 1.722939), (-19.132187, -0.165964), (-19.113861, -0.165964), (-29.410194, -9.682945), (-29.410194, -9.683225), (-29.409914, -9.683225), (-29.409914, -9.682945), (-29.294693, 0.061222), (-29.791374, -0.00613), (-29.225004, -0.00613), (-29.294693, 0.061222), (-29.721684, 0.061222), (-29.791374, -0.00613), (-29.721684, 0.693565), (-29.225004, 0.760918), (-29.791374, 0.760918), (-29.721684, 0.693565), (-29.294693, 0.693565), (-29.225004, 0.760918), (-29.294693, 0.693565), (-29.225004, -0.00613), (-29.225004, 0.760918), (-29.294693, 0.693565), (-29.294693, 0.061222), (-29.225004, -0.00613), (-29.721684, 0.061222), (-29.791374, 0.760918), (-29.791374, -0.00613), (-29.721684, 0.061222), (-29.721684, 0.693565), (-29.791374, 0.760918)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_RobothorWallDecorInset_3_4_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2]
                rel material:binding = </root/_materials/M_RobothorWallDecorInset_3_4_0>
            }

            def GeomSubset "M_RobothorWallDecorInset_3_4_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
                rel material:binding = </root/_materials/M_RobothorWallDecorInset_3_4_1>
            }

            def GeomSubset "M_RobothorWallDecorInset_3_4_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [30, 31, 32, 33, 34, 35, 36, 37, 38]
                rel material:binding = </root/_materials/M_RobothorWallDecorInset_3_4_2>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorWallDecorInset_3_4_0"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecorInset_3_4_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorWallDecorInset_3_4_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Wall_Decor_Painting_2_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecorInset_3_4_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_RobothorWallDecorInset_3_4_1"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecorInset_3_4_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorWallDecorInset_3_4_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorWallDecorInset_3_4_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/DarkWood2.tif@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecorInset_3_4_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecorInset_3_4_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_RobothorWallDecorInset_3_4_2"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecorInset_3_4_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (1, 0.97794116, 0.97794116)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorWallDecorInset_3_4_2/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecorInset_3_4_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

