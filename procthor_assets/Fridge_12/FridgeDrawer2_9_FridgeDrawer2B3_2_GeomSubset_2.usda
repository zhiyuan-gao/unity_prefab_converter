#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer2_9_FridgeDrawer2B3_2_GeomSubset_2"
    {
        def Mesh "FridgeDrawer2_9_FridgeDrawer2B3_2_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer2B3_2>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.002324, 0.027207, -0.887726), (0.002316, 0.027207, -0.887726), (0.002324, 0.027215, -0.887726), (0.002316, 0.027215, -0.887726), (0.002324, 0.027207, -0.887726), (0.002316, 0.027207, -0.887726), (0.002324, 0.027215, -0.887726), (0.002316, 0.027215, -0.887726), (0.002324, 0.027207, -0.887726), (0.002316, 0.027207, -0.887726), (0.002324, 0.027215, -0.887726), (0.002316, 0.027215, -0.887726), (0.002324, 0.027207, -0.887726), (0.002316, 0.027207, -0.887726), (0.002324, 0.027215, -0.887726), (0.002316, 0.027215, -0.887726), (0.002324, 0.027207, -0.887726), (0.002316, 0.027207, -0.887726), (0.002324, 0.027215, -0.887726), (0.002316, 0.027215, -0.887726), (0.002324, 0.027207, -0.887726), (0.002316, 0.027207, -0.887726), (0.002324, 0.027215, -0.887726), (0.002316, 0.027215, -0.887726), (0.002324, 0.027207, -0.887726), (0.002316, 0.027207, -0.887726), (0.002324, 0.027215, -0.887726), (0.002316, 0.027215, -0.887726), (-0.024873, 0.181424, -0.565239), (-0.289098, 0.181425, -0.565239), (-0.024873, 0.118256, -0.697172), (-0.024873, 0.113761, -0.699847), (-0.289098, 0.113762, -0.699847), (-0.289098, 0.118257, -0.697172), (-0.024873, 0.181424, -0.557949), (-0.024873, 0.118256, -0.557949), (-0.024873, 0.113761, -0.557949), (-0.024874, -0.197588, -0.557949), (-0.289098, 0.118257, -0.557949), (-0.289098, 0.181425, -0.557949), (-0.289098, 0.113762, -0.557949), (-0.289099, -0.197587, -0.557949), (-0.289099, -0.164121, -0.699847), (-0.289099, -0.182688, -0.679424), (-0.024874, -0.182689, -0.679424), (-0.024874, -0.164122, -0.699847), (-0.024874, -0.181276, -0.68724), (-0.289099, -0.181275, -0.68724), (-0.024874, -0.177251, -0.693866), (-0.289099, -0.17725, -0.693866), (-0.024874, -0.171227, -0.698293), (-0.289099, -0.171227, -0.698293), (-0.28268, 0.114044, -0.692136), (-0.031291, 0.114043, -0.692136), (-0.285101, -0.174826, -0.677825), (-0.282778, -0.191357, -0.556776), (-0.031195, -0.191357, -0.556776), (-0.028872, -0.174827, -0.677825), (-0.28268, 0.112235, -0.693212), (-0.031291, 0.112234, -0.693212), (-0.033812, 0.118256, -0.557949), (-0.031194, 0.175103, -0.557949), (-0.033812, 0.113761, -0.557949), (-0.285039, -0.173917, -0.683887), (-0.285039, -0.171618, -0.687671), (-0.285039, -0.168179, -0.690199), (-0.285086, -0.163339, -0.691103), (-0.280159, 0.113762, -0.557949), (-0.282777, 0.175104, -0.557949), (-0.280159, 0.118257, -0.557949), (-0.028887, -0.163339, -0.691103), (-0.028934, -0.16818, -0.690199), (-0.028934, -0.171619, -0.687671), (-0.028934, -0.173918, -0.683887), (-0.033301, 0.113451, -0.580192), (-0.030625, -0.1873, -0.580192), (-0.280671, 0.113452, -0.580192), (-0.280676, 0.117394, -0.580192), (-0.284579, 0.163778, -0.580192), (-0.283348, -0.187299, -0.580192), (-0.033296, 0.117393, -0.580192), (-0.029392, 0.163777, -0.580192), (-0.024873, 0.172538, -0.580192), (-0.289098, 0.172539, -0.580192), (-0.289099, -0.194129, -0.580192), (-0.024874, -0.19413, -0.580192), (-0.024873, 0.118256, -0.580192), (-0.024873, 0.113761, -0.580192), (-0.289098, 0.113762, -0.580192), (-0.289098, 0.118257, -0.580192), (-0.024874, -0.210195, -0.557949), (-0.289099, -0.210194, -0.557949), (-0.289099, -0.206736, -0.580192), (-0.024874, -0.206737, -0.580192)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-116.597755, -111.56199), (-116.597755, -111.562126), (-116.59764, -111.562126), (-116.59764, -111.56199)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer2B3_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2B3_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2B3_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2B3_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

