#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "ToasterLever_20_ToasterLever_20_1_GeomSubset_0"
    {
        def Mesh "ToasterLever_20_ToasterLever_20_1_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            rel material:binding = </root/_materials/M_ToasterLever_20_0>
            normal3f[] normals = [(-0.8471957, -3.70321e-8, 0.53128093), (3.70321e-8, -0.8471957, 0.53128093), (0.8471957, 3.70321e-8, 0.53128093), (-3.70321e-8, 0.8471957, 0.53128093)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.002036, -0.21673, 0.049938), (0.002036, -0.21266, 0.049938), (-0.002036, -0.21673, 0.049938), (-0.002036, -0.21266, 0.049938), (0.002036, -0.21673, 0.049938), (0.002036, -0.21266, 0.049938), (-0.002036, -0.21673, 0.049938), (-0.002036, -0.21266, 0.049938), (0.002036, -0.21673, 0.049938), (0.002036, -0.21266, 0.049938), (-0.002036, -0.21673, 0.049938), (-0.002036, -0.21266, 0.049938), (0.002036, -0.21673, 0.049938), (0.002036, -0.21266, 0.049938), (-0.002036, -0.21673, 0.049938), (-0.002036, -0.21266, 0.049938), (0.002036, -0.21673, 0.049938), (0.002036, -0.21266, 0.049938), (-0.002036, -0.21673, 0.049938), (-0.002036, -0.21266, 0.049938), (0.002036, -0.21673, 0.049938), (0.002036, -0.21266, 0.049938), (-0.002036, -0.21673, 0.049938), (-0.002036, -0.21266, 0.049938), (0.002331, -0.203646, 0.050904), (0.001784, -0.203646, 0.051722), (0.000966, -0.203646, 0.052269), (0, -0.203646, 0.052461), (-0.000966, -0.203646, 0.052269), (-0.001784, -0.203646, 0.051722), (-0.002331, -0.203646, 0.050904), (-0.002523, -0.203646, 0.049938), (-0.002331, -0.203646, 0.048972), (-0.001784, -0.203646, 0.048154), (-0.000966, -0.203646, 0.047607), (0, -0.203646, 0.047415), (0.000966, -0.203646, 0.047607), (0.001784, -0.203646, 0.048154), (0.002331, -0.203646, 0.048972), (0.002523, -0.203646, 0.049938), (0.006811, -0.205909, 0.052759), (0.005213, -0.205909, 0.055151), (0.002821, -0.205909, 0.056749), (0, -0.205909, 0.05731), (-0.002821, -0.205909, 0.056749), (-0.005213, -0.205909, 0.055151), (-0.006811, -0.205909, 0.052759), (-0.007372, -0.205909, 0.049938), (-0.006811, -0.205909, 0.047117), (-0.005213, -0.205909, 0.044726), (-0.002821, -0.205909, 0.043128), (0, -0.205909, 0.042566), (0.002821, -0.205909, 0.043128), (0.005213, -0.205909, 0.044726), (0.006811, -0.205909, 0.047117), (0.007372, -0.205909, 0.049938), (0.010123, -0.210156, 0.054131), (0.007748, -0.210156, 0.057686), (0.004193, -0.210156, 0.060061), (0, -0.210156, 0.060895), (-0.004193, -0.210156, 0.060061), (-0.007748, -0.210156, 0.057686), (-0.010123, -0.210156, 0.054131), (-0.010957, -0.210156, 0.049938), (-0.010123, -0.210156, 0.045745), (-0.007748, -0.210156, 0.04219), (-0.004193, -0.210156, 0.039815), (0, -0.210156, 0.038981), (0.004193, -0.210156, 0.039815), (0.007748, -0.210156, 0.04219), (0.010123, -0.210156, 0.045745), (0.010957, -0.210156, 0.049938), (0.010957, -0.214695, 0.054477), (0.008386, -0.214695, 0.058324), (0.004539, -0.214695, 0.060895), (0, -0.214695, 0.061798), (-0.004539, -0.214695, 0.060895), (-0.008386, -0.214695, 0.058324), (-0.010957, -0.214695, 0.054477), (-0.01186, -0.214695, 0.049938), (-0.010957, -0.214695, 0.045399), (-0.008386, -0.214695, 0.041552), (-0.004539, -0.214695, 0.038981), (0, -0.214695, 0.038078), (0.004539, -0.214695, 0.038981), (0.008386, -0.214695, 0.041552), (0.010957, -0.214695, 0.045399), (0.01186, -0.214695, 0.049938), (0.010123, -0.219234, 0.054131), (0.007748, -0.219234, 0.057686), (0.004193, -0.219234, 0.060061), (0, -0.219234, 0.060895), (-0.004193, -0.219234, 0.060061), (-0.007748, -0.219234, 0.057686), (-0.010123, -0.219234, 0.054131), (-0.010957, -0.219234, 0.049938), (-0.010123, -0.219234, 0.045745), (-0.007748, -0.219234, 0.04219), (-0.004193, -0.219234, 0.039815), (0, -0.219234, 0.038981), (0.004193, -0.219234, 0.039815), (0.007748, -0.219234, 0.04219), (0.010123, -0.219234, 0.045745), (0.010957, -0.219234, 0.049938), (0.007748, -0.223081, 0.053147), (0.00593, -0.223081, 0.055868), (0.003209, -0.223081, 0.057686), (0, -0.223081, 0.058324), (-0.003209, -0.223081, 0.057686), (-0.00593, -0.223081, 0.055868), (-0.007748, -0.223081, 0.053147), (-0.008386, -0.223081, 0.049938), (-0.007748, -0.223081, 0.046729), (-0.00593, -0.223081, 0.044008), (-0.003209, -0.223081, 0.04219), (0, -0.223081, 0.041552), (0.003209, -0.223081, 0.04219), (0.00593, -0.223081, 0.044008), (0.007748, -0.223081, 0.046729), (0.008386, -0.223081, 0.049938), (0.004193, -0.225652, 0.051675), (0.003209, -0.225652, 0.053147), (0.001737, -0.225652, 0.054131), (0, -0.225652, 0.054477), (-0.001737, -0.225652, 0.054131), (-0.003209, -0.225652, 0.053147), (-0.004193, -0.225652, 0.051675), (-0.004539, -0.225652, 0.049938), (-0.004193, -0.225652, 0.048201), (-0.003209, -0.225652, 0.046729), (-0.001737, -0.225652, 0.045745), (0, -0.225652, 0.045399), (0.001737, -0.225652, 0.045745), (0.003209, -0.225652, 0.046729), (0.004193, -0.225652, 0.048201), (0.004539, -0.225652, 0.049938), (0, -0.226555, 0.049938), (0.001784, -0.183341, 0.051722), (0.000966, -0.183341, 0.052269), (0, -0.183341, 0.052461), (-0.000966, -0.183341, 0.052269), (-0.001784, -0.183341, 0.051722), (-0.002331, -0.183341, 0.050904), (-0.002523, -0.183341, 0.049938), (-0.002331, -0.183341, 0.048972), (-0.001784, -0.183341, 0.048154), (-0.000966, -0.183341, 0.047607), (0, -0.183341, 0.047415), (0.000966, -0.183341, 0.047607), (0.001784, -0.183341, 0.048154), (0.002331, -0.183341, 0.048972), (0.002523, -0.183341, 0.049938), (0.002331, -0.183341, 0.050904)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-66.13853, -17.511345), (-66.07993, -17.511345), (-66.07993, -17.45275), (-66.13853, -17.45275)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_ToasterLever_20_0"
        {
            token outputs:surface.connect = </root/_materials/M_ToasterLever_20_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_ToasterLever_20_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0.203
                float3 inputs:normal.connect = </root/_materials/M_ToasterLever_20_0/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Metal_generic_Metallic.tif@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_ToasterLever_20_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_ToasterLever_20_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

