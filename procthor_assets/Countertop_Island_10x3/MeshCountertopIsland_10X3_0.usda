#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "CountertopIsland_10X3"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "CountertopIsland_10X3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-1.524245, -0.456922, -0.516547), (1.523755, 0.457478, 0.419483)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 2, 3, 5, 4, 4, 5, 7, 6, 1, 7, 5, 3, 6, 0, 2, 4, 0, 6, 8, 9, 6, 7, 10, 8, 7, 1, 11, 10, 1, 0, 9, 11, 9, 8, 14, 15, 8, 10, 13, 14, 10, 11, 12, 13, 11, 9, 15, 12, 17, 16, 18, 19, 20, 17, 19, 21, 22, 20, 21, 23, 16, 22, 23, 18, 13, 12, 16, 17, 14, 13, 17, 20, 15, 14, 20, 22, 12, 15, 22, 16, 18, 23, 21, 19]
            rel material:binding = </root/_materials/M_CountertopIsland_10X3_0>
            normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-8.330263e-7, 0, -1), (-8.330263e-7, 0, -1), (-8.330263e-7, 0, -1), (-8.330263e-7, 0, -1), (-8.330263e-7, 0, -1), (8.330263e-7, 0, -1), (8.330263e-7, 0, -1), (-8.330263e-7, 0, -1), (8.330263e-7, 0, -1), (8.330263e-7, 0, -1), (8.330263e-7, 0, -1), (8.330263e-7, 0, -1), (8.330263e-7, 0, -1), (-8.330263e-7, 0, -1), (-8.330263e-7, 0, -1), (8.330263e-7, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-1.524245, -0.456922, 0.389483), (1.523755, -0.456922, 0.389483), (-1.524245, -0.456922, 0.419483), (1.523755, -0.456922, 0.419483), (-1.524245, 0.457478, 0.419483), (1.523755, 0.457478, 0.419483), (-1.524245, 0.457478, 0.389483), (1.523755, 0.457478, 0.389483), (-1.504245, 0.437478, 0.389483), (-1.504245, -0.436922, 0.389483), (1.503755, 0.437478, 0.389483), (1.503755, -0.436922, 0.389483), (1.503755, -0.436922, -0.436547), (1.503755, 0.437478, -0.436547), (-1.504245, 0.437478, -0.436547), (-1.504245, -0.436922, -0.436547), (1.483755, -0.416922, -0.436547), (1.483755, 0.417478, -0.436547), (1.483755, -0.416922, -0.516547), (1.483755, 0.417478, -0.516547), (-1.484245, 0.417478, -0.436547), (-1.484245, 0.417478, -0.516547), (-1.484245, -0.416922, -0.436547), (-1.484245, -0.416922, -0.516547)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-12.11911, 0.206651), (-7.356585, 0.206651), (-7.356585, 0.253525), (-12.11911, 0.253525), (-12.119098, -0.323049), (-7.356598, -0.32305), (-7.356597, 1.1057), (-12.119098, 1.105701), (-12.11917, 0.528709), (-7.356524, 0.528708), (-7.356524, 0.575582), (-12.11917, 0.575583), (-10.103639, 0.850582), (-8.674847, 0.850582), (-8.674847, 0.897456), (-10.103639, 0.897456), (-10.103621, 0.867136), (-8.674864, 0.867136), (-8.674864, 0.914011), (-10.103621, 0.914011), (-12.119123, 1.427582), (-12.119123, -0.001183), (-12.087873, 0.030068), (-12.087873, 1.396334), (-12.119123, -0.001183), (-7.356572, -0.001183), (-7.387821, 0.030068), (-12.087873, 0.030068), (-7.356572, -0.001183), (-7.356572, 1.427583), (-7.38782, 1.396333), (-7.387821, 0.030068), (-7.356572, 1.427583), (-12.119123, 1.427582), (-12.087873, 1.396334), (-7.38782, 1.396333), (-19.551683, 1.147119), (-20.234808, 1.147119), (-20.234808, 0.501783), (-19.551683, 0.501783), (-20.610687, -0.297171), (-18.260693, -0.297171), (-18.260693, 0.348167), (-20.610687, 0.348167), (-19.561224, 0.94392), (-20.24435, 0.94392), (-20.24435, 0.298586), (-19.561224, 0.298586), (-18.26069, 0.553001), (-20.610691, 0.553001), (-20.610691, -0.092335), (-18.26069, -0.092335), (-19.572079, 0.538294), (-20.223955, 0.538294), (-20.223955, 0.475794), (-19.572079, 0.475794), (-20.590303, 0.531069), (-18.271536, 0.531069), (-18.271536, 0.593569), (-20.590303, 0.593569), (-19.57208, 0.513075), (-20.223953, 0.513075), (-20.223953, 0.450573), (-19.57208, 0.450573), (-18.27155, 0.618904), (-20.59029, 0.618904), (-20.59029, 0.556404), (-18.27155, 0.556404), (-18.260685, 0.099178), (-18.260685, 0.782306), (-18.27631, 0.766683), (-18.27631, 0.114803), (-20.610697, 0.099178), (-18.260685, 0.099178), (-18.27631, 0.114803), (-20.595072, 0.114803), (-20.610697, 0.782306), (-20.610697, 0.099178), (-20.595072, 0.114803), (-20.595072, 0.766683), (-18.260685, 0.782306), (-20.610697, 0.782306), (-20.595072, 0.766683), (-18.27631, 0.766683), (-18.271544, 1.028915), (-20.590294, 1.028915), (-20.590294, 0.377042), (-18.271544, 0.377043)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_CountertopIsland_10X3_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8]
                rel material:binding = </root/_materials/M_CountertopIsland_10X3_0>
            }

            def GeomSubset "M_CountertopIsland_10X3_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
                rel material:binding = </root/_materials/M_CountertopIsland_10X3_1>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_CountertopIsland_10X3_0"
        {
            token outputs:surface.connect = </root/_materials/M_CountertopIsland_10X3_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_CountertopIsland_10X3_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/marbleBase2.jpg@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_CountertopIsland_10X3_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_CountertopIsland_10X3_1"
        {
            token outputs:surface.connect = </root/_materials/M_CountertopIsland_10X3_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_CountertopIsland_10X3_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_CountertopIsland_10X3_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/DarkWood2.tif@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_CountertopIsland_10X3_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_CountertopIsland_10X3_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

