#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshBook_23_0_GeomSubset_0"
    {
        def Mesh "MeshBook_23_0_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [1, 0, 3, 2, 4, 5, 6, 7, 7, 6, 10, 11, 8, 9, 11, 10, 6, 2, 3, 10, 7, 11, 24, 25, 6, 5, 1, 2, 0, 8, 10, 3, 11, 9, 27, 24, 25, 26, 4, 7, 17, 16, 20, 21, 21, 22, 18, 17, 16, 19, 23, 20, 21, 20, 13, 14, 14, 15, 22, 21, 20, 23, 12, 13, 25, 24, 16, 17, 17, 18, 26, 25, 24, 27, 19, 16, 135, 134, 132, 133, 13, 12, 132, 134, 15, 14, 135, 133, 132, 12, 15, 133, 13, 134, 135, 14]
            rel material:binding = </root/_materials/M_Book_23_0>
            normal3f[] normals = [(1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0.000014168526), (0, 1, 0.0000053426334), (0, 1, 0), (-0.8625196, 6.985206e-10, -0.5060236), (-0.008613914, 0, -0.9999628), (-0.008613884, -2.9210305e-8, -0.99996287), (-0.8625196, 0, -0.5060236), (0, -1, 0.000014168526), (0, -1, 0), (0, -1, 0), (0, -1, 0.0000053426334), (-0.008613914, 0, -0.9999628), (0, 0, -1), (0, 0, -1), (-0.008613884, -2.9210305e-8, -0.99996287), (-0.8625196, 6.985206e-10, -0.5060236), (-0.8625196, 0, -0.5060236), (-0.977353, 0, -0.21161549), (-0.977353, 0, -0.21161549), (0, 1, 0.0000053426334), (0, 1, 0.000014168526), (0, 0.99999994, 0.000021361016), (0, 0.99999994, 0.000021361016), (0, -0.99999994, 0.000021361016), (0, -1, 0.000014168526), (0, -1, 0.0000053426334), (0, -0.99999994, 0.000021361016), (0, -1, 0), (0, -1, 0), (0, -1, 0.0000025064876), (0, -1, 0.0000015549159), (0, 1, 0.0000015549143), (0, 1, 0.0000025064849), (0, 1, 0), (0, 1, 0), (-0.9896421, 0, -0.14355671), (-0.9896421, -3.2248085e-8, -0.14355671), (-0.9978736, 0, -0.065178886), (-0.9978736, 0, -0.065178886), (0, 1, 0), (0, 1, 0), (0, 1, 0.00000173079), (0, 1, 0.0000022711215), (0, -1, 0.0000022711238), (0, -1, 0.0000017307917), (0, -1, 0), (0, -1, 0), (-0.9978736, 0, -0.065178886), (-0.9978736, 0, -0.065178886), (-0.9993612, -0.000007137656, 0.035737198), (-0.9993612, 0, 0.035737187), (5.662441e-7, 0.9994238, 0.03394084), (0.00000414066, 0.99950594, 0.031431034), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (-0.0000012560089, -0.99951005, 0.03129864), (0.0000011392403, -0.9994289, 0.033790115), (-0.977353, 0, -0.21161549), (-0.977353, 0, -0.21161549), (-0.9896421, -3.2248085e-8, -0.14355671), (-0.9896421, 0, -0.14355671), (0, 1, 0.0000022711215), (0, 1, 0.00000173079), (0, 1, 0.0000025064849), (0, 1, 0.0000015549143), (0, -1, 0.0000015549159), (0, -1, 0.0000025064876), (0, -1, 0.0000017307917), (0, -1, 0.0000022711238), (-0.52969724, 0.0000018551946, 0.8481869), (-0.52969724, -3.087284e-7, 0.84818685), (0.5296915, -3.0733645e-7, 0.8481903), (0.5296915, -0.0000012676069, 0.84819037), (-0.000022663853, -0.9994274, 0.03383854), (-0.000024601817, -0.99950856, 0.03134711), (1.1621844e-8, -0.9094025, 0.4159173), (3.122841e-8, -0.9094822, 0.41574293), (0.00000414066, 0.99950594, 0.031431034), (5.662441e-7, 0.9994238, 0.03394084), (0, 0.909203, 0.41635323), (0, 0.909203, 0.41635323), (0.5296915, -3.0733645e-7, 0.8481903), (0.7979344, 0, 0.60274434), (0.7979344, 0, 0.60274434), (0.5296915, -0.0000012676069, 0.84819037), (-0.9993612, -0.000007137656, 0.035737198), (-0.52969724, -3.087284e-7, 0.84818685), (-0.52969724, 0.0000018551946, 0.8481869), (-0.9993612, 0, 0.035737187)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.103902, -0.15546, -0.015447), (0.103902, 0.15546, -0.015447), (0.103902, 0.15546, -0.01627), (0.103902, -0.15546, -0.01627), (-0.109827, 0.15546, -0.013521), (-0.107414, 0.15546, -0.015447), (-0.108589, 0.15546, -0.01627), (-0.110781, 0.15546, -0.014429), (-0.107414, -0.15546, -0.015447), (-0.109827, -0.15546, -0.013521), (-0.108589, -0.15546, -0.01627), (-0.110781, -0.15546, -0.014429), (-0.111152, -0.15546, -0.002671), (-0.112438, -0.15546, -0.002671), (-0.112438, 0.15546, -0.002671), (-0.111152, 0.15546, -0.002671), (-0.112054, -0.15546, -0.00855), (-0.112054, 0.15546, -0.00855), (-0.110775, 0.15546, -0.008096), (-0.110775, -0.15546, -0.008096), (-0.112245, -0.15546, -0.00561), (-0.112245, 0.15546, -0.00561), (-0.110982, 0.15546, -0.005383), (-0.110982, -0.15546, -0.005383), (-0.111392, -0.15546, -0.011489), (-0.111392, 0.15546, -0.011489), (-0.110326, 0.15546, -0.010809), (-0.110326, -0.15546, -0.010809), (-0.10945, 0.15546, -0.002671), (0.103902, 0.15546, -0.002671), (0.103902, -0.15546, -0.002671), (-0.10945, -0.15546, -0.002671), (-0.109042, 0.15546, -0.009059), (0.103902, 0.15546, -0.009059), (0.103902, -0.15546, -0.009059), (-0.109042, -0.15546, -0.009059), (-0.10945, -0.153761, 0.000543), (-0.111152, -0.15546, -0.002671), (-0.10945, 0.153761, 0.000543), (-0.111152, 0.15546, -0.002671), (0.102552, -0.153761, -0.001856), (0.102552, 0.153761, -0.001856), (0.103902, -0.15546, -0.015447), (0.103902, 0.15546, -0.015447), (-0.107414, 0.15546, -0.015447), (-0.109827, 0.15546, -0.013521), (-0.109827, -0.15546, -0.013521), (-0.107414, -0.15546, -0.015447), (-0.110775, 0.15546, -0.008096), (-0.110775, -0.15546, -0.008096), (-0.035005, 0.15546, -0.015447), (-0.03609, 0.15546, -0.009059), (-0.036362, 0.15546, -0.002671), (-0.036739, 0.153761, 0.01046), (-0.036739, -0.153761, 0.01046), (-0.036362, -0.15546, -0.002671), (-0.03609, -0.15546, -0.009059), (-0.035005, -0.15546, -0.015447), (0.030835, 0.15546, -0.015447), (0.030293, 0.15546, -0.009059), (0.030157, 0.15546, -0.002671), (0.029403, 0.153761, 0.006563), (0.029403, -0.153761, 0.006563), (0.030157, -0.15546, -0.002671), (0.030293, -0.15546, -0.009059), (0.030835, -0.15546, -0.015447), (-0.016123, 0.15546, -0.015447), (-0.017028, 0.15546, -0.009059), (-0.017253, 0.15546, -0.002671), (-0.017756, 0.153761, 0.009894), (-0.017756, -0.153761, 0.009894), (-0.017253, -0.15546, -0.002671), (-0.017028, -0.15546, -0.009059), (-0.016123, -0.15546, -0.015447), (0.007357, 0.15546, -0.015447), (0.006632, 0.15546, -0.009059), (0.006451, 0.15546, -0.002671), (0.005824, 0.153761, 0.008558), (0.005824, -0.153761, 0.008558), (0.006451, -0.15546, -0.002671), (0.006632, -0.15546, -0.009059), (0.007357, -0.15546, -0.015447), (-0.092107, 0.15546, -0.015447), (-0.093626, 0.15546, -0.009059), (-0.094006, 0.15546, -0.002671), (-0.094081, 0.153761, 0.006968), (-0.094081, -0.153761, 0.006968), (-0.094006, -0.15546, -0.002671), (-0.093626, -0.15546, -0.009059), (-0.092107, -0.15546, -0.015447), (-0.079239, 0.15546, -0.015447), (-0.08065, 0.15546, -0.009059), (-0.081003, 0.15546, -0.002671), (-0.081154, 0.153761, 0.009557), (-0.081154, -0.153761, 0.009557), (-0.081003, -0.15546, -0.002671), (-0.08065, -0.15546, -0.009059), (-0.079239, -0.15546, -0.015447), (-0.065151, 0.15546, -0.015447), (-0.066454, 0.15546, -0.009059), (-0.066778, 0.15546, -0.002671), (-0.067005, 0.153761, 0.0106), (-0.067005, -0.153761, 0.0106), (-0.066778, -0.15546, -0.002671), (-0.066454, -0.15546, -0.009059), (-0.065151, -0.15546, -0.015447), (-0.051063, 0.15546, -0.015447), (-0.052257, 0.15546, -0.009059), (-0.052556, 0.15546, -0.002671), (-0.052858, 0.153761, 0.010662), (-0.052858, -0.153761, 0.010662), (-0.052556, -0.15546, -0.002671), (-0.052257, -0.15546, -0.009059), (-0.051063, -0.15546, -0.015447), (0.054293, 0.15546, -0.015447), (0.05402, 0.15546, -0.009059), (0.053953, 0.15546, -0.002671), (0.05301, 0.153761, 0.004387), (0.05301, -0.153761, 0.004387), (0.053953, -0.15546, -0.002671), (0.05402, -0.15546, -0.009059), (0.054293, -0.15546, -0.015447), (0.077783, 0.15546, -0.015447), (0.077648, 0.15546, -0.009059), (0.077614, 0.15546, -0.002671), (0.076576, 0.153761, 0.001838), (0.076576, -0.153761, 0.001838), (0.077614, -0.15546, -0.002671), (0.077648, -0.15546, -0.009059), (0.077783, -0.15546, -0.015447), (-0.110948, -0.153977, -0.000861), (-0.110948, 0.153978, -0.000861), (-0.111538, -0.155226, -0.00216), (-0.111538, 0.155226, -0.00216), (-0.112053, -0.155226, -0.00216), (-0.112053, 0.155226, -0.00216), (-0.101772, 0.15546, -0.015447), (-0.103345, 0.15546, -0.009059), (-0.103739, 0.15546, -0.002671), (-0.103777, 0.153761, 0.003848), (-0.103777, -0.153761, 0.003848), (-0.103739, -0.15546, -0.002671), (-0.103345, -0.15546, -0.009059), (-0.101772, -0.15546, -0.015447), (-0.111843, -0.154081, -0.002041), (-0.111843, -0.15546, -0.002671), (-0.111843, 0.154081, -0.002041), (-0.111843, 0.15546, -0.002671), (0.096346, 0.15546, -0.015447), (0.096309, 0.15546, -0.009059), (0.096302, 0.15546, -0.002671), (0.095194, 0.153761, -0.000484), (0.095194, -0.153761, -0.000484), (0.096302, -0.15546, -0.002671), (0.096309, -0.15546, -0.009059), (0.096346, -0.15546, -0.015447)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(0.666755, 0.497732), (0.666777, 0.335038), (0.667857, 0.335027), (0.667835, 0.497744), (0.671375, 0.499307), (0.670735, 0.499307), (0.670737, 0.497744), (0.671338, 0.497744), (0.671338, 0.497744), (0.670737, 0.497744), (0.670737, 0.335027), (0.671338, 0.335027), (0.670735, 0.333722), (0.671375, 0.333722), (0.671338, 0.335027), (0.670737, 0.335027), (0.670737, 0.497744), (0.667835, 0.497744), (0.667857, 0.335027), (0.670737, 0.335027), (0.671338, 0.497744), (0.671338, 0.335027), (0.672681, 0.335027), (0.672681, 0.497744), (0.670737, 0.497744), (0.670735, 0.499307), (0.667851, 0.499326), (0.667835, 0.497744), (0.667877, 0.333708), (0.670735, 0.333722), (0.670737, 0.335027), (0.667857, 0.335027), (0.671338, 0.335027), (0.671375, 0.333722), (0.672747, 0.333722), (0.672681, 0.335027), (0.672681, 0.497744), (0.672709, 0.499307), (0.671375, 0.499307), (0.671338, 0.497744), (0.674024, 0.497744), (0.674024, 0.335027), (0.675367, 0.335027), (0.675367, 0.497744), (0.675367, 0.497744), (0.675378, 0.499307), (0.674043, 0.499307), (0.674024, 0.497744), (0.674024, 0.335027), (0.674119, 0.333722), (0.675491, 0.333722), (0.675367, 0.335027), (0.675367, 0.497744), (0.675367, 0.335027), (0.676659, 0.334968), (0.676657, 0.497744), (0.676657, 0.497744), (0.676651, 0.499307), (0.675378, 0.499307), (0.675367, 0.497744), (0.675367, 0.335027), (0.675491, 0.333722), (0.676659, 0.333722), (0.676659, 0.334968), (0.672681, 0.497744), (0.672681, 0.335027), (0.674024, 0.335027), (0.674024, 0.497744), (0.674024, 0.497744), (0.674043, 0.499307), (0.672709, 0.499307), (0.672681, 0.497744), (0.672681, 0.335027), (0.672747, 0.333722), (0.674119, 0.333722), (0.674024, 0.335027), (0.676973, 0.498213), (0.676973, 0.334679), (0.677391, 0.334679), (0.677391, 0.498213), (0.676659, 0.334968), (0.676659, 0.333722), (0.676973, 0.334081), (0.676973, 0.334679), (0.676651, 0.499307), (0.676657, 0.497744), (0.676973, 0.498213), (0.676973, 0.498865), (0.677391, 0.334679), (0.677876, 0.334679), (0.677868, 0.498213), (0.677391, 0.498213), (0.676659, 0.334968), (0.676973, 0.334679), (0.676973, 0.498213), (0.676657, 0.497744)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_Book_23_0"
        {
            token outputs:surface.connect = </root/_materials/M_Book_23_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_Book_23_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Book_Cover_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_Book_23_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

