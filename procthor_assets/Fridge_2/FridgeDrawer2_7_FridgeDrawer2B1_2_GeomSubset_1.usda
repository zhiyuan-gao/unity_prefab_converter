#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer2_7_FridgeDrawer2B1_2_GeomSubset_1"
    {
        def Mesh "FridgeDrawer2_7_FridgeDrawer2B1_2_GeomSubset_1"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [4, 5, 7, 6]
            rel material:binding = </root/_materials/M_FridgeDrawer2B1_1>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.004786, 0.044805, -0.909221), (-0.004777, 0.044805, -0.909221), (-0.004786, 0.044814, -0.909221), (-0.004777, 0.044814, -0.909221), (-0.004786, 0.044805, -0.909221), (-0.004777, 0.044805, -0.909221), (-0.004786, 0.044814, -0.909221), (-0.004777, 0.044814, -0.909221), (-0.004786, 0.044805, -0.909221), (-0.004777, 0.044805, -0.909221), (-0.004786, 0.044814, -0.909221), (-0.004777, 0.044814, -0.909221), (-0.004786, 0.044805, -0.909221), (-0.004777, 0.044805, -0.909221), (-0.004786, 0.044814, -0.909221), (-0.004777, 0.044814, -0.909221), (-0.004786, 0.044805, -0.909221), (-0.004777, 0.044805, -0.909221), (-0.004786, 0.044814, -0.909221), (-0.004777, 0.044814, -0.909221), (-0.004786, 0.044805, -0.909221), (-0.004777, 0.044805, -0.909221), (-0.004786, 0.044814, -0.909221), (-0.004777, 0.044814, -0.909221), (-0.004786, 0.044805, -0.909221), (-0.004777, 0.044805, -0.909221), (-0.004786, 0.044814, -0.909221), (-0.004777, 0.044814, -0.909221), (0.024687, 0.211928, -0.631387), (0.311026, 0.211928, -0.631387), (0.024687, 0.143474, -0.736102), (0.024687, 0.138602, -0.738737), (0.311026, 0.138602, -0.738737), (0.311026, 0.143474, -0.736102), (0.024687, 0.211928, -0.624204), (0.024687, 0.143474, -0.624204), (0.024687, 0.138602, -0.624204), (0.024687, -0.198804, -0.624204), (0.311026, 0.143474, -0.624204), (0.311026, 0.211928, -0.624204), (0.311026, 0.138602, -0.624204), (0.311026, -0.198804, -0.624204), (0.311026, -0.162537, -0.738737), (0.311026, -0.182658, -0.718617), (0.024687, -0.182658, -0.718617), (0.024687, -0.162537, -0.738737), (0.024687, -0.181126, -0.726317), (0.311026, -0.181126, -0.726317), (0.024687, -0.176765, -0.732844), (0.311026, -0.176765, -0.732844), (0.024687, -0.170237, -0.737206), (0.311026, -0.170237, -0.737206), (0.30407, 0.138908, -0.73114), (0.031642, 0.138908, -0.73114), (0.306693, -0.174137, -0.717041), (0.304175, -0.192052, -0.623049), (0.031537, -0.192052, -0.623049), (0.029019, -0.174137, -0.717041), (0.30407, 0.136948, -0.732201), (0.031642, 0.136948, -0.732201), (0.034374, 0.143474, -0.624204), (0.031537, 0.205078, -0.624204), (0.034374, 0.138602, -0.624204), (0.306626, -0.173152, -0.723014), (0.306626, -0.170662, -0.726741), (0.306626, -0.166934, -0.729232), (0.306676, -0.161689, -0.730123), (0.301338, 0.138602, -0.624204), (0.304175, 0.205078, -0.624204), (0.301338, 0.143474, -0.624204), (0.029036, -0.161689, -0.730123), (0.029087, -0.166934, -0.729232), (0.029087, -0.170662, -0.726741), (0.029087, -0.173152, -0.723014), (0.03382, 0.138267, -0.646117), (0.030919, -0.187655, -0.646117), (0.301892, 0.138267, -0.646117), (0.301898, 0.142538, -0.646117), (0.306128, 0.192804, -0.646117), (0.304793, -0.187655, -0.646117), (0.033814, 0.142538, -0.646117), (0.029584, 0.192804, -0.646117), (0.024687, 0.202298, -0.646117), (0.311026, 0.202298, -0.646117), (0.311026, -0.195056, -0.646117), (0.024687, -0.195056, -0.646117), (0.024687, 0.143474, -0.646117), (0.024687, 0.138602, -0.646117), (0.311026, 0.138602, -0.646117), (0.311026, 0.143474, -0.646117), (0.024687, -0.212466, -0.624204), (0.311026, -0.212466, -0.624204), (0.311026, -0.208718, -0.646117), (0.024687, -0.208718, -0.646117)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-141.05603, -111.06724), (-141.05603, -111.06727), (-141.056, -111.06727), (-141.056, -111.06724)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer2B1_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2B1_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2B1_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2B1_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B1_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B1_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

