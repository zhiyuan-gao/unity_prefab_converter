#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer1_7_FridgeDrawer1B1_1_GeomSubset_2"
    {
        def Mesh "FridgeDrawer1_7_FridgeDrawer1B1_1_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer1B1_2>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.004786, 0.044805, -0.909221), (0.004777, 0.044805, -0.909221), (0.004786, 0.044814, -0.909221), (0.004777, 0.044814, -0.909221), (0.004786, 0.044805, -0.909221), (0.004777, 0.044805, -0.909221), (0.004786, 0.044814, -0.909221), (0.004777, 0.044814, -0.909221), (0.004786, 0.044805, -0.909221), (0.004777, 0.044805, -0.909221), (0.004786, 0.044814, -0.909221), (0.004777, 0.044814, -0.909221), (0.004786, 0.044805, -0.909221), (0.004777, 0.044805, -0.909221), (0.004786, 0.044814, -0.909221), (0.004777, 0.044814, -0.909221), (0.004786, 0.044805, -0.909221), (0.004777, 0.044805, -0.909221), (0.004786, 0.044814, -0.909221), (0.004777, 0.044814, -0.909221), (0.004786, 0.044805, -0.909221), (0.004777, 0.044805, -0.909221), (0.004786, 0.044814, -0.909221), (0.004777, 0.044814, -0.909221), (0.004786, 0.044805, -0.909221), (0.004777, 0.044805, -0.909221), (0.004786, 0.044814, -0.909221), (0.004777, 0.044814, -0.909221), (0.326799, 0.209259, -0.631387), (0.040461, 0.209259, -0.631387), (0.326799, 0.140805, -0.736102), (0.326799, 0.135934, -0.738737), (0.040461, 0.135934, -0.738737), (0.040461, 0.140805, -0.736102), (0.326799, 0.209259, -0.624204), (0.326799, 0.140805, -0.624204), (0.326799, 0.135934, -0.624204), (0.326799, -0.201472, -0.624204), (0.040461, 0.140805, -0.624204), (0.040461, 0.209259, -0.624204), (0.040461, 0.135934, -0.624204), (0.040461, -0.201472, -0.624204), (0.040461, -0.165206, -0.738737), (0.040461, -0.185326, -0.718617), (0.326799, -0.185326, -0.718617), (0.326799, -0.165206, -0.738737), (0.326799, -0.183795, -0.726317), (0.040461, -0.183795, -0.726317), (0.326799, -0.179433, -0.732844), (0.040461, -0.179433, -0.732844), (0.326799, -0.172906, -0.737206), (0.040461, -0.172906, -0.737206), (0.047416, 0.136239, -0.73114), (0.319844, 0.136239, -0.73114), (0.044793, -0.176806, -0.717041), (0.047311, -0.19472, -0.623049), (0.319949, -0.19472, -0.623049), (0.322467, -0.176806, -0.717041), (0.047416, 0.134279, -0.732201), (0.319844, 0.134279, -0.732201), (0.317112, 0.140805, -0.624204), (0.319949, 0.202409, -0.624204), (0.317112, 0.135934, -0.624204), (0.044861, -0.175821, -0.723014), (0.044861, -0.17333, -0.726741), (0.044861, -0.169603, -0.729232), (0.04481, -0.164357, -0.730123), (0.050148, 0.135934, -0.624204), (0.047311, 0.202409, -0.624204), (0.050148, 0.140805, -0.624204), (0.32245, -0.164357, -0.730123), (0.322399, -0.169603, -0.729232), (0.322399, -0.17333, -0.726741), (0.322399, -0.175821, -0.723014), (0.317666, 0.135598, -0.646117), (0.320567, -0.190324, -0.646117), (0.049594, 0.135598, -0.646117), (0.049588, 0.13987, -0.646117), (0.045358, 0.190136, -0.646117), (0.046693, -0.190324, -0.646117), (0.317672, 0.13987, -0.646117), (0.321902, 0.190136, -0.646117), (0.326799, 0.19963, -0.646117), (0.040461, 0.19963, -0.646117), (0.040461, -0.197725, -0.646117), (0.326799, -0.197725, -0.646117), (0.326799, 0.140805, -0.646117), (0.326799, 0.135934, -0.646117), (0.040461, 0.135934, -0.646117), (0.040461, 0.140805, -0.646117), (0.326799, -0.215134, -0.624204), (0.040461, -0.215134, -0.624204), (0.040461, -0.211387, -0.646117), (0.326799, -0.211387, -0.646117)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-116.597755, -111.562), (-116.597755, -111.56212), (-116.59764, -111.56212), (-116.59764, -111.562)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer1B1_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1B1_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1B1_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1B1_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1B1_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1B1_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

