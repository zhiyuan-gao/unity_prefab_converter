#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer2C5"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer2C5" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.397509, -0.204924, -1.019143), (-0.000189, 0.167817, 0.027991)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 52, 53, 70, 63, 58, 37, 41, 57, 63, 34, 35, 62, 62, 35, 36, 64, 57, 41, 40, 69, 71, 38, 39, 70, 69, 40, 38, 71, 64, 36, 37, 58, 70, 39, 34, 63, 28, 34, 39, 29, 58, 77, 76, 64, 71, 79, 78, 69, 71, 70, 53, 80, 79, 57, 69, 78, 81, 62, 64, 76, 82, 62, 82, 83, 52, 63, 77, 58, 57, 81, 53, 52, 83, 80, 85, 84, 28, 29, 95, 94, 93, 92, 35, 34, 28, 84, 88, 89, 36, 35, 88, 40, 41, 86, 90, 38, 91, 85, 29, 39, 91, 38, 40, 90, 37, 36, 89, 87, 41, 37, 92, 93, 37, 87, 95, 92, 87, 86, 94, 95, 86, 41, 93, 94, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 67, 68, 72, 73, 66, 67, 73, 74, 65, 66, 74, 75, 56, 65, 75, 59, 61, 72, 68, 60, 54, 55, 61, 60, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 76, 77, 59, 75, 74, 73, 72, 61, 78, 79, 54, 60, 79, 80, 54, 78, 60, 68, 67, 66, 65, 56, 81, 76, 61, 55, 82, 82, 55, 83, 56, 59, 77, 81, 80, 83, 55, 54, 85, 33, 30, 84, 87, 44, 43, 86, 88, 84, 30, 89, 88, 30, 31, 90, 86, 43, 47, 49, 51, 42, 32, 85, 91, 33, 90, 32, 33, 91, 89, 31, 45, 50, 48, 46, 44, 87, 20, 21, 23, 22, 24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer2C5_0>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0.0000021172455, 0.93770564, -0.34743068), (6.239861e-7, 0.9377057, -0.34743062), (0, 0.9599153, -0.28029025), (0, 0.9599153, -0.28029025), (-0.051787347, 0.06722491, -0.9963929), (-0.029098123, 0.0616968, -0.9976706), (0.029098095, 0.061696786, -0.9976706), (0.05178734, 0.06722494, -0.9963929), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-0.0027319156, -0.000101428246, -0.9999963), (-0.0009259321, -7.596098e-7, -0.9999996), (0.05178734, 0.06722494, -0.9963929), (0.029098095, 0.061696786, -0.9976706), (0.0027318187, -0.00010144501, -0.99999624), (0.0009258352, -8.7183435e-7, -0.9999996), (-5.3743058e-8, 0, -1), (-5.4398594e-8, 0, -1), (-4.7288335e-8, 0, -1), (-5.717902e-8, 0, -1), (0.0009258352, -8.7183435e-7, -0.9999996), (0.0027318187, -0.00010144501, -0.99999624), (-5.4398594e-8, 0, -1), (-5.3743058e-8, 0, -1), (-0.0009259321, -7.596098e-7, -0.9999996), (-0.0027319156, -0.000101428246, -0.9999963), (-0.029098123, 0.0616968, -0.9976706), (-0.051787347, 0.06722491, -0.9963929), (-5.717902e-8, 0, -1), (-4.7288335e-8, 0, -1), (0, 0, -1), (0, 0, -1), (8.481727e-9, -0.9815637, 0.19113517), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.9815637, 0.19113517), (0.99970806, 0.009800144, 0.022086723), (0.99971646, 0.01007956, 0.021573195), (0.9997745, -0.0024097145, 0.021099357), (0.9997856, -0.00036676624, 0.020704566), (-0.9996484, -0.006901874, 0.025601633), (-0.999549, -0.008510524, 0.028801836), (-0.99977446, -0.002410606, 0.021099046), (-0.9997856, -0.0003713118, 0.020703778), (-0.9996484, -0.006901874, 0.025601633), (-0.99547553, -0.06451428, 0.06975977), (-0.99547553, -0.06451428, 0.06975977), (-0.9960139, -0.06520353, 0.06086804), (-0.999549, -0.008510524, 0.028801836), (-0.9997085, 0.009798194, 0.022066513), (-0.9997856, -0.0003713118, 0.020703778), (-0.99977446, -0.002410606, 0.021099046), (-0.99971235, 0.009898587, 0.021845244), (0.9996484, -0.0069016293, 0.025598912), (0.9997856, -0.00036676624, 0.020704566), (0.9997745, -0.0024097145, 0.021099357), (0.99954885, -0.008511247, 0.028801648), (0.9996484, -0.0069016293, 0.025598912), (0.99954885, -0.008511247, 0.028801648), (0.99600667, -0.06530187, 0.06087904), (0.99547553, -0.064514525, 0.0697598), (0.99547553, -0.064514525, 0.0697598), (0, -0.9823155, -0.18723343), (0, -0.98231214, -0.1872505), (0, -0.98231214, -0.1872505), (0, -0.9823155, -0.18723345), (6.239861e-7, 0.9377057, -0.34743062), (0.0000021172455, 0.93770564, -0.34743068), (0, 0.8446047, -0.5353903), (0, 0.8446047, -0.5353904), (0, -0.83701885, 0.54717416), (0, -0.83701885, 0.54717416), (8.481727e-9, -0.9815637, 0.19113517), (0, -0.9815637, 0.19113517), (0, 0.98569036, 0.16856624), (0, 0.98569036, 0.16856624), (0, 0.98569036, 0.16856624), (0, 0.98569036, 0.16856624), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 5.300946e-8, 0), (-1, 5.300946e-8, 0), (-1, 0, 0), (-1, 0, 0), (-1, 5.300946e-8, 0), (1, 0, 0), (1, 0, 0), (1, 5.3195253e-9, 0), (1, 4.3110626e-9, 0), (1, 6.597861e-8, 0), (1, 3.2989306e-8, 0), (1, 9.029789e-8, 0), (1, 1.3195722e-7, 0), (1, 1.3195722e-7, 0), (1, 3.2989306e-8, 0), (1, 6.597861e-8, 0), (1, 0, 0), (1, 4.3110626e-9, 0), (-1, 0, 0), (-1, 0, 0), (-1, 5.300946e-8, 0), (-1, 0, 0), (0.029098095, 0.061696786, -0.9976706), (-0.029098123, 0.0616968, -0.9976706), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 5.3195253e-9, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (2.559682e-7, -0.38928387, -0.92111784), (-5.111797e-7, -0.16875142, -0.9856586), (-0.0006270281, -0.16874896, -0.9856589), (0, -0.38928404, -0.9211178), (0, -0.70704705, -0.70716655), (2.559682e-7, -0.38928387, -0.92111784), (0, -0.38928404, -0.9211178), (0, -0.70704705, -0.70716655), (0, -0.9154151, -0.4025112), (0, -0.70704705, -0.70716655), (0, -0.70704705, -0.70716655), (1.4429679e-7, -0.91541505, -0.40251124), (1.3431418e-8, -0.9863581, -0.16461359), (0, -0.9154151, -0.4025112), (1.4429679e-7, -0.91541505, -0.40251124), (5.4191332e-8, -0.9863581, -0.16461363), (-1.4575198e-7, 0.5214988, -0.8532521), (-0.0006270281, -0.16874896, -0.9856589), (-5.111797e-7, -0.16875142, -0.9856586), (0, 0.52149844, -0.8532523), (0.0000017434359, 0.4351388, -0.90036345), (0, 0.4351381, -0.9003636), (-1.4575198e-7, 0.5214988, -0.8532521), (0, 0.52149844, -0.8532523), (0.000086621854, -0.53302366, 0.84610045), (0, -0.424886, 0.9052469), (1.6585602e-8, -0.424886, 0.9052469), (0, -0.53302366, 0.84610045), (1.6585602e-8, -0.424886, 0.9052469), (0, -0.424886, 0.9052469), (-7.3252204e-9, 0.18107688, 0.9834689), (0, 0.18107688, 0.9834689), (0, 0.9813172, 0.19239643), (9.375374e-10, 0.9813172, 0.19239643), (0, 0.9238783, 0.38268653), (0, 0.9238783, 0.38268653), (0, 0.9238783, 0.38268653), (0, 0.9238783, 0.38268653), (0, 0.70710653, 0.70710707), (0, 0.70710653, 0.70710707), (0, 0.70710653, 0.70710707), (0, 0.70710653, 0.70710707), (0, 0.38268661, 0.92387825), (0, 0.38268661, 0.92387825), (0, 0.38268661, 0.92387825), (0, 0.38268661, 0.92387825), (0, 0.18107688, 0.9834689), (-7.3252204e-9, 0.18107688, 0.9834689), (0.9997745, -0.0024097145, 0.021099357), (0.99971646, 0.01007956, 0.021573195), (0.99972665, 0.010434977, 0.020919971), (0.99972665, 0.010434977, 0.020919971), (0.99972665, 0.010434977, 0.020919971), (0.99972665, 0.010434977, 0.020919971), (0.99972665, 0.010434977, 0.020919971), (0.999783, -0.0012003377, 0.020799305), (-0.99977446, -0.002410606, 0.021099046), (-0.999549, -0.008510524, 0.028801836), (-0.99972063, 0.012599472, 0.020001242), (-0.9997829, -0.0011990675, 0.020799829), (-0.999549, -0.008510524, 0.028801836), (-0.9960139, -0.06520353, 0.06086804), (-0.99972063, 0.012599472, 0.020001242), (-0.99977446, -0.002410606, 0.021099046), (-0.9997829, -0.0011990675, 0.020799829), (-0.9997266, 0.010435144, 0.020920366), (-0.9997266, 0.010435144, 0.020920366), (-0.9997266, 0.010435144, 0.020920366), (-0.9997266, 0.010435144, 0.020920366), (-0.9997266, 0.010435144, 0.020920366), (-0.99971235, 0.009898587, 0.021845244), (0.9997745, -0.0024097145, 0.021099357), (0.999783, -0.0012003377, 0.020799305), (0.99972063, 0.012596518, 0.020001896), (0.99954885, -0.008511247, 0.028801648), (0.99954885, -0.008511247, 0.028801648), (0.99972063, 0.012596518, 0.020001896), (0.99600667, -0.06530187, 0.06087904), (1.3431418e-8, -0.9863581, -0.16461359), (5.4191332e-8, -0.9863581, -0.16461363), (0, -0.9823155, -0.18723343), (0, -0.9823155, -0.18723345), (0, 0.8446047, -0.5353904), (0, 0.8446047, -0.5353903), (0, 0.4351381, -0.9003636), (0.0000017434359, 0.4351388, -0.90036345), (0, -0.83701885, 0.54717416), (0.000086621854, -0.53302366, 0.84610045), (0, -0.53302366, 0.84610045), (0, -0.83701885, 0.54717416), (0, 0.9856903, 0.16856644), (9.375374e-10, 0.9813172, 0.19239643), (0, 0.9813172, 0.19239643), (0, 0.9856903, 0.16856644), (-1, 5.300946e-8, 0), (-1, 0, 0), (-1, 1.6563489e-7, 0), (-1, 5.300946e-8, 0), (-1, 5.300946e-8, 0), (-1, 1.6563489e-7, 0), (-1, 8.614473e-8, 0), (1, 4.3110626e-9, 0), (1, 5.3195253e-9, 0), (1, 1.724425e-8, 0), (1, 1.724425e-8, 0), (1, 1.724425e-8, 0), (1, 1.724425e-8, 0), (1, 1.724425e-8, 0), (1, 1.0238419e-8, 0), (1, 9.029789e-8, 0), (1, 3.2989306e-8, 0), (1, 0, 0), (1, 4.3110626e-9, 0), (1, 1.0238419e-8, 0), (1, 0, 0), (1, 3.2989306e-8, 0), (-1, 5.300946e-8, 0), (-1, 8.614473e-8, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (-0.024848, 0.167817, 0.018727), (-0.397509, 0.167817, 0.018727), (-0.024848, 0.091756, -0.097624), (-0.024848, 0.086344, -0.100552), (-0.397509, 0.086344, -0.100552), (-0.397509, 0.091756, -0.097624), (-0.024848, 0.167817, 0.026708), (-0.024848, 0.091756, 0.026708), (-0.024848, 0.086344, 0.026708), (-0.024848, -0.189744, 0.026708), (-0.397509, 0.091756, 0.026708), (-0.397509, 0.167817, 0.026708), (-0.397509, 0.086344, 0.026708), (-0.397509, -0.189744, 0.026708), (-0.397509, -0.149448, -0.100552), (-0.397509, -0.171804, -0.078196), (-0.024848, -0.171804, -0.078196), (-0.024848, -0.149448, -0.100552), (-0.024848, -0.170102, -0.086751), (-0.397509, -0.170102, -0.086751), (-0.024848, -0.165256, -0.094004), (-0.397509, -0.165256, -0.094004), (-0.024848, -0.158003, -0.09885), (-0.397509, -0.158003, -0.09885), (-0.028897, 0.15867, 0.021451), (-0.39346, 0.15867, 0.021451), (-0.391223, 0.086683, -0.09211), (-0.031133, 0.086683, -0.09211), (-0.393594, -0.162337, -0.076445), (-0.391319, -0.182242, 0.027991), (-0.031038, -0.182242, 0.027991), (-0.028763, -0.162337, -0.076445), (-0.391223, 0.084505, -0.093289), (-0.031133, 0.084505, -0.093289), (-0.033602, 0.091756, 0.026708), (-0.031038, 0.160205, 0.026708), (-0.033602, 0.086344, 0.026708), (-0.393533, -0.161243, -0.083081), (-0.393533, -0.158475, -0.087223), (-0.393533, -0.154333, -0.08999), (-0.393579, -0.148505, -0.09098), (-0.388755, 0.086344, 0.026708), (-0.391319, 0.160205, 0.026708), (-0.388755, 0.091756, 0.026708), (-0.028778, -0.148505, -0.09098), (-0.028824, -0.154333, -0.08999), (-0.028824, -0.158475, -0.087223), (-0.028824, -0.161243, -0.083081), (-0.033101, 0.085971, 0.002359), (-0.030479, -0.177356, 0.002359), (-0.389256, 0.085971, 0.002359), (-0.389261, 0.090717, 0.002359), (-0.393084, 0.146568, 0.002359), (-0.391877, -0.177356, 0.002359), (-0.033096, 0.090717, 0.002359), (-0.029273, 0.146568, 0.002359), (-0.024848, 0.157117, 0.002359), (-0.397509, 0.157117, 0.002359), (-0.397509, -0.18558, 0.002359), (-0.024848, -0.18558, 0.002359), (-0.024848, 0.091756, 0.002359), (-0.024848, 0.086344, 0.002359), (-0.397509, 0.086344, 0.002359), (-0.397509, 0.091756, 0.002359), (-0.024848, -0.204924, 0.026708), (-0.397509, -0.204924, 0.026708), (-0.397509, -0.20076, 0.002359), (-0.024848, -0.20076, 0.002359)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-170.34332, -111.26219), (-170.34323, -111.26219), (-170.34323, -111.262115), (-170.34332, -111.262115), (-170.16176, 0.467683), (-170.16176, -0.569811), (-170.14682, -0.563719), (-170.14682, 0.461591), (-171.17992, -0.479131), (-171.19635, -0.499042), (-170.20735, -0.499042), (-170.22377, -0.479131), (-171.17992, 0.429692), (-171.19635, 0.449892), (-171.19635, 0.248035), (-171.17313, 0.248035), (-171.17313, 0.248035), (-171.19635, 0.248035), (-171.19635, 0.23367), (-171.17313, 0.23367), (-170.22377, -0.479131), (-170.20735, -0.499042), (-170.20735, 0.23367), (-170.23056, 0.23367), (-170.23056, 0.248035), (-170.20735, 0.248035), (-170.20735, 0.449892), (-170.22377, 0.429692), (-170.23056, 0.23367), (-170.20735, 0.23367), (-170.20735, 0.248035), (-170.23056, 0.248035), (-171.17313, 0.23367), (-171.19635, 0.23367), (-171.19635, -0.499042), (-171.17992, -0.479131), (-170.22377, 0.429692), (-170.20735, 0.449892), (-171.19635, 0.449892), (-171.17992, 0.429692), (-170.31119, 0.480121), (-170.33368, 0.480121), (-170.33368, -0.569682), (-170.31119, -0.569682), (-170.0562, 0.385702), (-170.12413, 0.372751), (-170.12413, -0.325348), (-170.05959, -0.326337), (-170.03864, 0.739387), (-170.1032, 0.736631), (-170.1032, 0.724051), (-170.03864, 0.72504), (-170.03864, 0.739387), (-170.03864, 0.920828), (-170.0526, 0.91676), (-170.1032, 0.884679), (-170.1032, 0.736631), (-170.03526, 0.013086), (-170.03864, 0.72504), (-170.1032, 0.724051), (-170.1032, 0.026035), (-170.05959, -0.340686), (-170.05959, -0.326337), (-170.12413, -0.325348), (-170.12413, -0.33793), (-170.05959, -0.340686), (-170.12413, -0.33793), (-170.12413, -0.485995), (-170.07353, -0.51808), (-170.05959, -0.522149), (-170.10196, 0.429498), (-170.17049, 0.428005), (-170.17049, -0.535045), (-170.10196, -0.536537), (-170.16176, -0.569811), (-170.16176, 0.467683), (-170.2161, 0.466614), (-170.2161, -0.568741), (-170.26505, -0.569682), (-170.26505, 0.480121), (-170.31119, 0.480121), (-170.31119, -0.569682), (-170.28763, 0.452494), (-170.28763, -0.542055), (-170.22266, -0.542055), (-170.22266, 0.452494), (-170.35556, 0.247587), (-170.35556, 0.449137), (-170.3767, 0.449137), (-170.42006, 0.420784), (-170.42006, 0.247587), (-170.42006, 0.233245), (-170.35556, 0.233245), (-170.35556, 0.247587), (-170.42006, 0.247587), (-170.31134, -0.32267), (-170.31134, 0.408892), (-170.37585, 0.397859), (-170.37585, -0.32267), (-170.31134, -0.337011), (-170.37585, -0.337011), (-170.37585, -0.5102), (-170.33249, -0.538552), (-170.31134, -0.538552), (-170.37585, -0.337011), (-170.31134, -0.337011), (-170.31134, -0.32267), (-170.37585, -0.32267), (-170.35556, -0.498348), (-170.35556, 0.233245), (-170.42006, 0.233245), (-170.42006, -0.487315), (-170.20735, -0.499042), (-171.19635, -0.499042), (-171.19635, -0.539329), (-170.20735, -0.539329), (-170.35556, -0.498348), (-170.42006, -0.487315), (-170.42006, -0.527539), (-170.35556, -0.538573), (-170.23816, 0.448746), (-170.23816, -0.538306), (-170.19792, -0.538306), (-170.19792, 0.448746), (-170.37585, 0.397859), (-170.31134, 0.408892), (-170.31134, 0.449115), (-170.37585, 0.438081), (-143.9566, -113.63171), (-139.32785, -113.63171), (-139.32785, -107.93224), (-143.9566, -107.93224), (-118.540054, -113.51364), (-115.37141, -113.51364), (-115.37141, -109.61047), (-118.540054, -109.61047), (-88.71556, -113.93459), (-86.12613, -113.93459), (-86.12613, -110.74826), (-88.71556, -110.74826), (-69.25111, -112.321434), (-69.2511, -112.321434), (-69.2511, -112.32143), (-69.25111, -112.32143), (-71.58162, -0.45602), (-71.565956, -0.456144), (-71.565956, 0.524268), (-71.58162, 0.524145), (-71.59275, -0.45602), (-71.58162, -0.45602), (-71.58162, 0.524145), (-71.59275, 0.524145), (-71.60019, -0.45602), (-71.59275, -0.45602), (-71.59275, 0.524145), (-71.60019, 0.524145), (-71.292404, -0.893271), (-71.27584, -0.893118), (-71.27584, 0.017182), (-71.292404, 0.017333), (-70.93974, 0.517938), (-71.565956, 0.524268), (-71.565956, -0.456144), (-70.93974, -0.449814), (-70.93388, -0.449814), (-70.93388, 0.517938), (-70.93974, 0.517938), (-70.93974, -0.449814), (-72.03978, -0.934682), (-72.02521, -0.934682), (-72.02521, 0.06879), (-72.03978, 0.06879), (-72.02521, 0.06879), (-72.02521, -0.934682), (-71.39028, -0.934682), (-71.39028, 0.06879), (-71.59069, -0.897414), (-71.59068, 0.031523), (-71.612015, 0.031523), (-71.612015, -0.897414), (-71.33467, -0.934682), (-71.33467, 0.06879), (-71.34772, 0.06879), (-71.34772, -0.934682), (-71.34772, -0.934682), (-71.34772, 0.06879), (-71.36725, 0.06879), (-71.36725, -0.934682), (-71.36725, -0.934682), (-71.36725, 0.06879), (-71.39028, 0.06879), (-71.39028, -0.934682), (-71.60948, -0.232976), (-71.60948, 0.418717), (-71.804504, 0.381547), (-71.82093, 0.378838), (-71.83118, 0.371989), (-71.83803, 0.361739), (-71.84048, 0.347315), (-71.84619, -0.229348), (-71.73833, 0.268749), (-71.73833, 0.280494), (-71.97212, 0.270512), (-71.97504, 0.265122), (-71.73833, 0.280494), (-71.73833, 0.418717), (-71.97212, 0.270512), (-71.73833, 0.268749), (-71.97504, 0.265122), (-71.96932, -0.311541), (-71.96687, -0.325965), (-71.96003, -0.336215), (-71.949776, -0.343065), (-71.93335, -0.345773), (-71.73833, -0.382944), (-71.60948, -0.232976), (-71.84619, -0.229348), (-71.84328, -0.234738), (-71.60948, -0.244721), (-71.60948, -0.244721), (-71.84328, -0.234738), (-71.60948, -0.382944), (-71.292404, -0.893271), (-71.292404, 0.017333), (-71.4891, 0.013049), (-71.4891, -0.888986), (-70.77294, -0.454814), (-70.77294, 0.522938), (-70.93388, 0.517938), (-70.93388, -0.449814), (-72.21578, -0.934682), (-72.03978, -0.934682), (-72.03978, 0.06879), (-72.21578, 0.06879), (-71.389885, 0.031523), (-71.59068, 0.031523), (-71.59069, -0.897414), (-71.389885, -0.897414), (-71.32885, 0.292166), (-71.32885, 0.453883), (-71.57623, 0.292166), (-71.32885, 0.278775), (-71.32885, 0.292166), (-71.57623, 0.292166), (-71.58348, 0.278775), (-71.46702, -0.218917), (-71.46702, 0.453883), (-71.66633, 0.419798), (-71.68749, 0.415587), (-71.705444, 0.403597), (-71.71743, 0.385651), (-71.72164, 0.364484), (-71.72164, -0.218917), (-71.46702, -0.394025), (-71.46702, -0.232308), (-71.71439, -0.232308), (-71.46702, -0.218917), (-71.72164, -0.218917), (-71.71439, -0.232308), (-71.46702, -0.232308), (-71.32885, 0.278775), (-71.58348, 0.278775), (-71.58348, -0.304626), (-71.57927, -0.325793), (-71.567276, -0.343738), (-71.54933, -0.355729), (-71.52817, -0.359939), (-71.32885, -0.394025), (5.646933, -121.22408), (7.358486, -121.22408), (7.358486, -119.51253), (5.646933, -119.51253), (-5.253075, -117.71076), (-3.54152, -117.71076), (-3.54152, -115.99921), (-5.253075, -115.99921)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer2C5_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
                rel material:binding = </root/_materials/M_FridgeDrawer2C5_0>
            }

            def GeomSubset "M_FridgeDrawer2C5_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer2C5_1>
            }

            def GeomSubset "M_FridgeDrawer2C5_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer2C5_2>
            }

            def GeomSubset "M_FridgeDrawer2C5_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33]
                rel material:binding = </root/_materials/M_FridgeDrawer2C5_3>
            }

            def GeomSubset "M_FridgeDrawer2C5_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]
                rel material:binding = </root/_materials/M_FridgeDrawer2C5_4>
            }

            def GeomSubset "M_FridgeDrawer2C5_5" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [63]
                rel material:binding = </root/_materials/M_FridgeDrawer2C5_5>
            }

            def GeomSubset "M_FridgeDrawer2C5_6" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [64]
                rel material:binding = </root/_materials/M_FridgeDrawer2C5_6>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer2C5_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C5_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.03676468, 0.03676468, 0.03676468)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C5_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge.tga@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C5_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer2C5_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C5_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C5_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C5_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C5_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C5_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer2C5_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C5_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C5_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C5_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C5_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C5_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer2C5_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C5_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C5_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C5_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer2C5_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C5_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_FridgeDrawer2C5_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C5_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C5_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C5_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C5_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C5_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer2C5_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C5_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C5_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C5_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C5_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C5_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

