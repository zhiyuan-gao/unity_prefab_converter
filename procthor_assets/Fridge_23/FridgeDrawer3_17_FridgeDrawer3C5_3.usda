#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer3C5"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer3C5" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.000198, -0.204924, -1.019143), (0.397143, 0.167817, -0.14313)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 52, 53, 70, 63, 58, 37, 41, 57, 63, 34, 35, 62, 62, 35, 36, 64, 57, 41, 40, 69, 71, 38, 39, 70, 69, 40, 38, 71, 64, 36, 37, 58, 70, 39, 34, 63, 28, 34, 39, 29, 58, 77, 76, 64, 71, 79, 78, 69, 71, 70, 53, 80, 79, 57, 69, 78, 81, 62, 64, 76, 82, 62, 82, 83, 52, 63, 77, 58, 57, 81, 53, 52, 83, 80, 85, 84, 28, 29, 95, 94, 93, 92, 35, 34, 28, 84, 88, 89, 36, 35, 88, 40, 41, 86, 90, 38, 91, 85, 29, 39, 91, 38, 40, 90, 37, 36, 89, 87, 41, 37, 92, 93, 37, 87, 95, 92, 87, 86, 94, 95, 86, 41, 93, 94, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 67, 68, 72, 73, 66, 67, 73, 74, 65, 66, 74, 75, 56, 65, 75, 59, 61, 72, 68, 60, 54, 55, 61, 60, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 76, 77, 59, 75, 74, 73, 72, 61, 78, 79, 54, 60, 79, 80, 54, 78, 60, 68, 67, 66, 65, 56, 81, 76, 61, 55, 82, 82, 55, 83, 56, 59, 77, 81, 80, 83, 55, 54, 85, 33, 30, 84, 87, 44, 43, 86, 88, 84, 30, 89, 88, 30, 31, 90, 86, 43, 47, 49, 51, 42, 32, 85, 91, 33, 90, 32, 33, 91, 89, 31, 45, 50, 48, 46, 44, 87, 20, 21, 23, 22, 24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer3C5_0>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-0.0000024107285, 0.9377143, -0.34740743), (0.0000051986426, 0.9377142, -0.3474075), (0, 0.95990115, -0.28033876), (0, 0.95990115, -0.28033876), (-0.0517865, 0.067224, -0.996393), (-0.02909777, 0.061696265, -0.99767065), (0.029097801, 0.061696276, -0.9976706), (0.051788464, 0.06722495, -0.99639285), (-9.1486436e-7, 0, -1), (-7.566134e-7, 0, -1), (-8.703776e-7, 0, -1), (-8.5988904e-7, 0, -1), (-8.5988904e-7, 0, -1), (-8.703776e-7, 0, -1), (-0.0027310997, -0.000101427315, -0.99999624), (-0.0009251386, -7.5926056e-7, -0.9999995), (0.051788464, 0.06722495, -0.99639285), (0.029097801, 0.061696276, -0.9976706), (0.002731178, -0.00010141893, -0.99999624), (0.0009252094, -8.480856e-7, -0.9999995), (4.2994498e-7, 0, -1), (4.3518926e-7, 0, -1), (3.7830705e-7, 0, -1), (4.5743266e-7, 0, -1), (0.0009252094, -8.480856e-7, -0.9999995), (0.002731178, -0.00010141893, -0.99999624), (4.3518926e-7, 0, -1), (4.2994498e-7, 0, -1), (-0.0009251386, -7.5926056e-7, -0.9999995), (-0.0027310997, -0.000101427315, -0.99999624), (-0.02909777, 0.061696265, -0.99767065), (-0.0517865, 0.067224, -0.996393), (4.5743266e-7, 0, -1), (3.7830705e-7, 0, -1), (-7.566134e-7, 0, -1), (-9.1486436e-7, 0, -1), (8.481727e-9, -0.9815637, 0.19113517), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.9815637, 0.19113517), (0.999708, 0.009800129, 0.022087842), (0.99971646, 0.010079529, 0.021573804), (0.9997746, -0.0023634038, 0.021100152), (0.99978554, -0.0003689632, 0.020704351), (-0.9996484, -0.00690223, 0.025600972), (-0.999549, -0.008509925, 0.028802669), (-0.99977446, -0.002409708, 0.021099338), (-0.99978566, -0.00041653216, 0.020697616), (-0.9996484, -0.00690223, 0.025600972), (-0.9954753, -0.06451513, 0.069762975), (-0.9954753, -0.06451513, 0.069762975), (-0.9960067, -0.06530213, 0.060877834), (-0.999549, -0.008509925, 0.028802669), (-0.9997084, 0.009798222, 0.022067478), (-0.99978566, -0.00041653216, 0.020697616), (-0.99977446, -0.002409708, 0.021099338), (-0.9997167, 0.010078608, 0.021562554), (0.9996484, -0.006903559, 0.025601866), (0.99978554, -0.0003689632, 0.020704351), (0.9997746, -0.0023634038, 0.021100152), (0.99955225, -0.008484511, 0.028694782), (0.9996484, -0.006903559, 0.025601866), (0.99955225, -0.008484511, 0.028694782), (0.9960066, -0.0653018, 0.060881007), (0.9954753, -0.06451482, 0.06976281), (0.9954753, -0.06451482, 0.06976281), (0, -0.98231494, -0.18723638), (0, -0.98231107, -0.18725626), (0, -0.98231107, -0.18725626), (0, -0.98231494, -0.1872364), (0.0000051986426, 0.9377142, -0.3474075), (-0.0000024107285, 0.9377143, -0.34740743), (0, 0.8446049, -0.53539014), (0, 0.84460485, -0.5353902), (0, -0.8370188, 0.54717416), (0, -0.8370188, 0.54717416), (8.481727e-9, -0.9815637, 0.19113517), (0, -0.9815637, 0.19113517), (0, 0.9856891, 0.16857292), (0, 0.9856891, 0.16857292), (0, 0.9856891, 0.16857292), (0, 0.9856891, 0.16857292), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 1.060189e-7, 0), (-1, 3.7041918e-8, 0), (-1, 0, 0), (-1, 0, 0), (-1, 1.060189e-7, 0), (1, 0, 0), (1, 0, 0), (1, 4.1558781e-10, 0), (1, 3.3680167e-10, 0), (1, 4.1238413e-9, 0), (1, 2.0619206e-9, 0), (1, 5.643862e-9, 0), (1, 8.2476825e-9, 0), (1, 8.2476825e-9, 0), (1, 2.0619206e-9, 0), (1, 4.1238413e-9, 0), (1, 0, 0), (1, 3.3680167e-10, 0), (-1, 0, 0), (-1, 0, 0), (-1, 3.7041918e-8, 0), (-1, -8.51124e-8, 0), (0.029097801, 0.061696276, -0.9976706), (-0.02909777, 0.061696265, -0.99767065), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, -8.51124e-8, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 4.1558781e-10, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (3.389141e-8, -0.38938004, -0.92107725), (-7.834751e-7, -0.1688978, -0.9856336), (-0.0006283882, -0.16889518, -0.98563385), (0, -0.38937983, -0.92107725), (0, -0.7070476, -0.707166), (3.389141e-8, -0.38938004, -0.92107725), (0, -0.38937983, -0.92107725), (0, -0.7070476, -0.707166), (0, -0.9154154, -0.4025104), (0, -0.7070476, -0.707166), (0, -0.7070476, -0.707166), (-1.4415127e-7, -0.91541547, -0.4025104), (2.0809239e-9, -0.9863581, -0.16461362), (0, -0.9154154, -0.4025104), (-1.4415127e-7, -0.91541547, -0.4025104), (5.590846e-8, -0.9863581, -0.1646137), (-0.0000019369181, 0.5214547, -0.85327893), (-0.0006283882, -0.16889518, -0.98563385), (-7.834751e-7, -0.1688978, -0.9856336), (0, 0.52145445, -0.8532791), (0.0000029252842, 0.4351401, -0.9003628), (0, 0.4351395, -0.9003631), (-0.0000019369181, 0.5214547, -0.85327893), (0, 0.52145445, -0.8532791), (-1.5789798e-8, -0.5330969, 0.8460542), (0, -0.4249645, 0.90520996), (-0.00006550854, -0.4249645, 0.90520996), (0, -0.5330969, 0.8460542), (-0.00006550854, -0.4249645, 0.90520996), (0, -0.4249645, 0.90520996), (-7.3294055e-9, 0.18106851, 0.9834705), (0, 0.18106851, 0.9834705), (0, 0.9813172, 0.1923965), (4.107142e-7, 0.9813172, 0.1923965), (0, 0.9238781, 0.3826868), (0, 0.9238781, 0.3826868), (0, 0.9238781, 0.3826868), (0, 0.9238781, 0.3826868), (0, 0.70714074, 0.7070728), (0, 0.70714074, 0.7070728), (0, 0.70714074, 0.7070728), (0, 0.70714074, 0.7070728), (0, 0.38267928, 0.9238812), (0, 0.38267928, 0.9238812), (0, 0.38267928, 0.9238812), (0, 0.38267928, 0.9238812), (0, 0.18106851, 0.9834705), (-7.3294055e-9, 0.18106851, 0.9834705), (0.9997746, -0.0023634038, 0.021100152), (0.99971646, 0.010079529, 0.021573804), (0.9997268, 0.010434927, 0.020919926), (0.9997268, 0.010434927, 0.020919926), (0.9997268, 0.010434927, 0.020919926), (0.9997268, 0.010434927, 0.020919926), (0.9997268, 0.010434927, 0.020919926), (0.999783, -0.001200929, 0.020799262), (-0.99977446, -0.002409708, 0.021099338), (-0.999549, -0.008509925, 0.028802669), (-0.99972063, 0.01259882, 0.020001158), (-0.99978304, -0.0011515461, 0.020800278), (-0.999549, -0.008509925, 0.028802669), (-0.9960067, -0.06530213, 0.060877834), (-0.99972063, 0.01259882, 0.020001158), (-0.99977446, -0.002409708, 0.021099338), (-0.99978304, -0.0011515461, 0.020800278), (-0.99972665, 0.010435258, 0.020920265), (-0.99972665, 0.010435258, 0.020920265), (-0.99972665, 0.010435258, 0.020920265), (-0.99972665, 0.010435258, 0.020920265), (-0.99972665, 0.010435258, 0.020920265), (-0.9997167, 0.010078608, 0.021562554), (0.9997746, -0.0023634038, 0.021100152), (0.999783, -0.001200929, 0.020799262), (0.9997194, 0.012690522, 0.02000074), (0.99955225, -0.008484511, 0.028694782), (0.99955225, -0.008484511, 0.028694782), (0.9997194, 0.012690522, 0.02000074), (0.9960066, -0.0653018, 0.060881007), (2.0809239e-9, -0.9863581, -0.16461362), (5.590846e-8, -0.9863581, -0.1646137), (0, -0.98231494, -0.18723638), (0, -0.98231494, -0.1872364), (0, 0.84460485, -0.5353902), (0, 0.8446049, -0.53539014), (0, 0.4351395, -0.9003631), (0.0000029252842, 0.4351401, -0.9003628), (0, -0.8370188, 0.54717416), (-1.5789798e-8, -0.5330969, 0.8460542), (0, -0.5330969, 0.8460542), (0, -0.8370188, 0.54717416), (0, 0.9856903, 0.16856642), (4.107142e-7, 0.9813172, 0.1923965), (0, 0.9813172, 0.1923965), (0, 0.9856903, 0.16856642), (-1, 1.060189e-7, 0), (-1, 0, 0), (-1, 3.3126983e-7, 0), (-1, 3.7041918e-8, 0), (-1, 1.060189e-7, 0), (-1, 3.3126983e-7, 0), (-1, 8.474439e-9, 0), (1, 3.3680167e-10, 0), (1, 4.1558781e-10, 0), (0.99999994, 1.3472068e-9, 0), (0.99999994, 1.3472068e-9, 0), (0.99999994, 1.3472068e-9, 0), (0.99999994, 1.3472068e-9, 0), (0.99999994, 1.3472068e-9, 0), (1, 7.99877e-10, 0), (1, 5.643862e-9, 0), (1, 2.0619206e-9, 0), (1, 0, 0), (1, 3.3680167e-10, 0), (1, 7.99877e-10, 0), (1, 0, 0), (1, 2.0619206e-9, 0), (-1, 3.7041918e-8, 0), (-1, 8.474439e-9, 0), (-0.99999994, -2.7590795e-7, 0), (-0.99999994, -2.7590795e-7, 0), (-0.99999994, -2.7590795e-7, 0), (-0.99999994, -2.7590795e-7, 0), (-0.99999994, -2.7590795e-7, 0), (-1, -8.51124e-8, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (-0.000189, 0.040386, -1.019143), (-0.000198, 0.040386, -1.019143), (-0.000189, 0.040396, -1.019143), (-0.000198, 0.040396, -1.019143), (0.397143, 0.167817, -0.152393), (0.024482, 0.167817, -0.152393), (0.397143, 0.091756, -0.268744), (0.397143, 0.086344, -0.271672), (0.024482, 0.086344, -0.271672), (0.024482, 0.091756, -0.268744), (0.397143, 0.167817, -0.144413), (0.397143, 0.091756, -0.144413), (0.397143, 0.086344, -0.144413), (0.397143, -0.189744, -0.144413), (0.024482, 0.091756, -0.144413), (0.024482, 0.167817, -0.144413), (0.024482, 0.086344, -0.144413), (0.024482, -0.189744, -0.144413), (0.024482, -0.149448, -0.271672), (0.024482, -0.171804, -0.249316), (0.397143, -0.171804, -0.249316), (0.397143, -0.149448, -0.271672), (0.397143, -0.170102, -0.257871), (0.024482, -0.170102, -0.257871), (0.397143, -0.165256, -0.265124), (0.024482, -0.165256, -0.265124), (0.397143, -0.158003, -0.269971), (0.024482, -0.158003, -0.269971), (0.393094, 0.15867, -0.149669), (0.028531, 0.15867, -0.149669), (0.030768, 0.086683, -0.26323), (0.390858, 0.086683, -0.26323), (0.028397, -0.162337, -0.247565), (0.030672, -0.182242, -0.14313), (0.390953, -0.182242, -0.14313), (0.393228, -0.162337, -0.247565), (0.030768, 0.084505, -0.264409), (0.390858, 0.084505, -0.264409), (0.388389, 0.091756, -0.144413), (0.390953, 0.160205, -0.144413), (0.388389, 0.086344, -0.144413), (0.028458, -0.161243, -0.254201), (0.028458, -0.158475, -0.258343), (0.028458, -0.154333, -0.26111), (0.028412, -0.148505, -0.2621), (0.033236, 0.086344, -0.144413), (0.030672, 0.160205, -0.144413), (0.033236, 0.091756, -0.144413), (0.393213, -0.148505, -0.2621), (0.393167, -0.154333, -0.26111), (0.393167, -0.158475, -0.258343), (0.393167, -0.161243, -0.254201), (0.38889, 0.085971, -0.168761), (0.391512, -0.177356, -0.168761), (0.032735, 0.085971, -0.168761), (0.03273, 0.090717, -0.168761), (0.028907, 0.146568, -0.168761), (0.030114, -0.177356, -0.168761), (0.388895, 0.090717, -0.168761), (0.392718, 0.146568, -0.168761), (0.397143, 0.157117, -0.168761), (0.024482, 0.157117, -0.168761), (0.024482, -0.18558, -0.168761), (0.397143, -0.18558, -0.168761), (0.397143, 0.091756, -0.168761), (0.397143, 0.086344, -0.168761), (0.024482, 0.086344, -0.168761), (0.024482, 0.091756, -0.168761), (0.397143, -0.204924, -0.144413), (0.024482, -0.204924, -0.144413), (0.024482, -0.20076, -0.168761), (0.397143, -0.20076, -0.168761)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-170.34326, -111.26219), (-170.34323, -111.26219), (-170.34323, -111.262115), (-170.34326, -111.262115), (-170.16176, 0.46768), (-170.16176, -0.569807), (-170.14682, -0.563714), (-170.14682, 0.461587), (-171.17989, -0.479112), (-171.19632, -0.499021), (-170.20737, -0.499021), (-170.2238, -0.479112), (-171.17989, 0.42967), (-171.19632, 0.449869), (-171.19632, 0.248021), (-171.1731, 0.248021), (-171.1731, 0.248021), (-171.19632, 0.248021), (-171.19632, 0.233658), (-171.1731, 0.233658), (-170.2238, -0.479112), (-170.20737, -0.499021), (-170.20737, 0.233658), (-170.2306, 0.233658), (-170.2306, 0.248021), (-170.20737, 0.248021), (-170.20737, 0.449869), (-170.2238, 0.42967), (-170.2306, 0.233658), (-170.20737, 0.233658), (-170.20737, 0.248021), (-170.2306, 0.248021), (-171.1731, 0.233658), (-171.19632, 0.233658), (-171.19632, -0.499021), (-171.17989, -0.479112), (-170.2238, 0.42967), (-170.20737, 0.449869), (-171.19632, 0.449869), (-171.17989, 0.42967), (-170.31119, 0.480206), (-170.33368, 0.480206), (-170.33368, -0.569766), (-170.31119, -0.569766), (-170.0562, 0.385702), (-170.12413, 0.372751), (-170.12413, -0.325348), (-170.05959, -0.326337), (-170.03864, 0.739407), (-170.1032, 0.736651), (-170.1032, 0.72407), (-170.03864, 0.725058), (-170.03864, 0.739407), (-170.03864, 0.920861), (-170.0526, 0.916792), (-170.1032, 0.88471), (-170.1032, 0.736651), (-170.03526, 0.013053), (-170.03864, 0.725058), (-170.1032, 0.72407), (-170.1032, 0.026003), (-170.05959, -0.340686), (-170.05959, -0.326337), (-170.12413, -0.325348), (-170.12413, -0.33793), (-170.05959, -0.340686), (-170.12413, -0.33793), (-170.12413, -0.485995), (-170.07353, -0.51808), (-170.05959, -0.522149), (-170.10196, 0.429495), (-170.17049, 0.428002), (-170.17049, -0.535041), (-170.10196, -0.536533), (-170.16176, -0.569807), (-170.16176, 0.46768), (-170.2161, 0.46661), (-170.2161, -0.568737), (-170.26506, -0.569766), (-170.26506, 0.480206), (-170.31119, 0.480206), (-170.31119, -0.569766), (-170.28763, 0.452509), (-170.28763, -0.542069), (-170.22266, -0.542069), (-170.22266, 0.452509), (-170.35556, 0.247571), (-170.35556, 0.449109), (-170.3767, 0.449109), (-170.42006, 0.420758), (-170.42006, 0.247571), (-170.42006, 0.233229), (-170.35556, 0.233229), (-170.35556, 0.247571), (-170.42006, 0.247571), (-170.31134, -0.322668), (-170.31134, 0.408889), (-170.37585, 0.397856), (-170.37585, -0.322668), (-170.31134, -0.33701), (-170.37585, -0.33701), (-170.37585, -0.510198), (-170.33249, -0.538549), (-170.31134, -0.538549), (-170.37585, -0.33701), (-170.31134, -0.33701), (-170.31134, -0.322668), (-170.37585, -0.322668), (-170.35556, -0.498323), (-170.35556, 0.233229), (-170.42006, 0.233229), (-170.42006, -0.48729), (-170.20737, -0.499021), (-171.19632, -0.499021), (-171.19632, -0.539306), (-170.20737, -0.539306), (-170.35556, -0.498323), (-170.42006, -0.48729), (-170.42006, -0.527512), (-170.35556, -0.538546), (-170.23816, 0.448903), (-170.23816, -0.538463), (-170.19792, -0.538463), (-170.19792, 0.448903), (-170.37585, 0.397856), (-170.31134, 0.408889), (-170.31134, 0.449112), (-170.37585, 0.438079), (-143.9566, -113.63171), (-139.32785, -113.63171), (-139.32785, -107.93224), (-143.9566, -107.93224), (-118.540054, -113.51364), (-115.37141, -113.51364), (-115.37141, -109.61047), (-118.540054, -109.61047), (-88.71556, -113.93459), (-86.12613, -113.93459), (-86.12613, -110.74826), (-88.71556, -110.74826), (-69.25111, -112.321434), (-69.2511, -112.321434), (-69.2511, -112.32143), (-69.25111, -112.32143), (-71.58162, -0.456021), (-71.565956, -0.456144), (-71.565956, 0.524268), (-71.58162, 0.524145), (-71.59275, -0.456021), (-71.58162, -0.456021), (-71.58162, 0.524145), (-71.59275, 0.524145), (-71.60019, -0.456021), (-71.59275, -0.456021), (-71.59275, 0.524145), (-71.60019, 0.524145), (-71.292404, -0.893271), (-71.27584, -0.893119), (-71.27584, 0.017181), (-71.292404, 0.017333), (-70.939735, 0.517938), (-71.565956, 0.524268), (-71.565956, -0.456144), (-70.939735, -0.449814), (-70.93388, -0.449814), (-70.93388, 0.517938), (-70.939735, 0.517938), (-70.939735, -0.449814), (-72.03978, -0.934683), (-72.02521, -0.934683), (-72.02521, 0.068791), (-72.03978, 0.068791), (-72.02521, 0.068791), (-72.02521, -0.934683), (-71.39028, -0.934683), (-71.39028, 0.068791), (-71.59069, -0.897414), (-71.59069, 0.031523), (-71.612015, 0.031523), (-71.612015, -0.897414), (-71.33467, -0.934683), (-71.33467, 0.068791), (-71.34772, 0.068791), (-71.34772, -0.934683), (-71.34772, -0.934683), (-71.34772, 0.068791), (-71.36725, 0.068791), (-71.36725, -0.934683), (-71.36725, -0.934683), (-71.36725, 0.068791), (-71.39028, 0.068791), (-71.39028, -0.934683), (-71.60948, -0.232976), (-71.60948, 0.418718), (-71.80451, 0.381547), (-71.82093, 0.378839), (-71.831184, 0.371989), (-71.83803, 0.361739), (-71.840485, 0.347315), (-71.84619, -0.229349), (-71.73833, 0.268749), (-71.73833, 0.280495), (-71.97212, 0.270512), (-71.975044, 0.265122), (-71.73833, 0.280495), (-71.73833, 0.418718), (-71.97212, 0.270512), (-71.73833, 0.268749), (-71.975044, 0.265122), (-71.96933, -0.311542), (-71.96688, -0.325966), (-71.96003, -0.336216), (-71.949776, -0.343065), (-71.93336, -0.345774), (-71.73833, -0.382944), (-71.60948, -0.232976), (-71.84619, -0.229349), (-71.84328, -0.234739), (-71.60948, -0.244722), (-71.60948, -0.244722), (-71.84328, -0.234739), (-71.60948, -0.382945), (-71.292404, -0.893271), (-71.292404, 0.017333), (-71.4891, 0.013049), (-71.4891, -0.888986), (-70.77294, -0.454814), (-70.77294, 0.522938), (-70.93388, 0.517938), (-70.93388, -0.449814), (-72.21578, -0.934683), (-72.03978, -0.934683), (-72.03978, 0.068791), (-72.21578, 0.068791), (-71.389885, 0.031523), (-71.59069, 0.031523), (-71.59069, -0.897414), (-71.389885, -0.897414), (-71.32885, 0.292165), (-71.32885, 0.453882), (-71.57623, 0.292165), (-71.32885, 0.278774), (-71.32885, 0.292165), (-71.57623, 0.292165), (-71.58348, 0.278774), (-71.46702, -0.218917), (-71.46702, 0.453883), (-71.66633, 0.419797), (-71.6875, 0.415587), (-71.705444, 0.403596), (-71.71743, 0.385651), (-71.72164, 0.364484), (-71.72164, -0.218917), (-71.46702, -0.394025), (-71.46702, -0.232308), (-71.71439, -0.232308), (-71.46702, -0.218917), (-71.72164, -0.218917), (-71.71439, -0.232308), (-71.46702, -0.232308), (-71.32885, 0.278774), (-71.58348, 0.278774), (-71.58348, -0.304625), (-71.57927, -0.325792), (-71.567276, -0.343738), (-71.54933, -0.355728), (-71.52816, -0.359938), (-71.32885, -0.394024), (5.646933, -121.22408), (7.358486, -121.22408), (7.358486, -119.51253), (5.646933, -119.51253), (-5.253075, -117.71076), (-3.54152, -117.71076), (-3.54152, -115.99921), (-5.253075, -115.99921)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer3C5_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
                rel material:binding = </root/_materials/M_FridgeDrawer3C5_0>
            }

            def GeomSubset "M_FridgeDrawer3C5_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer3C5_1>
            }

            def GeomSubset "M_FridgeDrawer3C5_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer3C5_2>
            }

            def GeomSubset "M_FridgeDrawer3C5_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33]
                rel material:binding = </root/_materials/M_FridgeDrawer3C5_3>
            }

            def GeomSubset "M_FridgeDrawer3C5_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]
                rel material:binding = </root/_materials/M_FridgeDrawer3C5_4>
            }

            def GeomSubset "M_FridgeDrawer3C5_5" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [63]
                rel material:binding = </root/_materials/M_FridgeDrawer3C5_5>
            }

            def GeomSubset "M_FridgeDrawer3C5_6" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [64]
                rel material:binding = </root/_materials/M_FridgeDrawer3C5_6>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer3C5_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C5_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.03676468, 0.03676468, 0.03676468)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C5_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge.tga@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C5_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer3C5_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C5_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer3C5_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C5_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C5_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C5_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer3C5_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C5_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer3C5_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C5_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C5_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C5_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer3C5_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C5_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C5_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C5_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer3C5_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C5_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_FridgeDrawer3C5_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C5_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer3C5_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C5_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C5_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C5_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer3C5_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C5_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer3C5_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C5_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C5_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C5_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

