#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer1C5"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer1C5" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.397143, -0.204924, -1.019143), (0.000198, 0.167817, 0.027991)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 52, 53, 70, 63, 58, 37, 41, 57, 63, 34, 35, 62, 62, 35, 36, 64, 57, 41, 40, 69, 71, 38, 39, 70, 69, 40, 38, 71, 64, 36, 37, 58, 70, 39, 34, 63, 28, 34, 39, 29, 58, 77, 76, 64, 71, 79, 78, 69, 71, 70, 53, 80, 79, 57, 69, 78, 81, 62, 64, 76, 82, 62, 82, 83, 52, 63, 77, 58, 57, 81, 53, 52, 83, 80, 85, 84, 28, 29, 95, 94, 93, 92, 35, 34, 28, 84, 88, 89, 36, 35, 88, 40, 41, 86, 90, 38, 91, 85, 29, 39, 91, 38, 40, 90, 37, 36, 89, 87, 41, 37, 92, 93, 37, 87, 95, 92, 87, 86, 94, 95, 86, 41, 93, 94, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 67, 68, 72, 73, 66, 67, 73, 74, 65, 66, 74, 75, 56, 65, 75, 59, 61, 72, 68, 60, 54, 55, 61, 60, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 76, 77, 59, 75, 74, 73, 72, 61, 78, 79, 54, 60, 79, 80, 54, 78, 60, 68, 67, 66, 65, 56, 81, 76, 61, 55, 82, 82, 55, 83, 56, 59, 77, 81, 80, 83, 55, 54, 85, 33, 30, 84, 87, 44, 43, 86, 88, 84, 30, 89, 88, 30, 31, 90, 86, 43, 47, 49, 51, 42, 32, 85, 91, 33, 90, 32, 33, 91, 89, 31, 45, 50, 48, 46, 44, 87, 20, 21, 23, 22, 24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer1C5_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.000001909444, -0.8671869, 0.4979829), (-5.867332e-7, -0.86718684, 0.49798295), (0, -0.9599153, 0.28029022), (0, -0.9599153, 0.28029022), (-0.038692962, -0.093112916, 0.9949034), (-0.009697421, -0.03239756, 0.999428), (0.009697418, -0.03239758, 0.999428), (0.038692877, -0.09311287, 0.9949034), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.084898144, 0.0026967265, 0.996386), (-0.084864065, 0.0026989353, 0.9963889), (0.038692877, -0.09311287, 0.9949034), (0.009697418, -0.03239758, 0.999428), (0.084898144, 0.0026967223, 0.996386), (0.084864065, 0.0026988264, 0.9963889), (-5.3743122e-8, 0, 1), (-5.4398658e-8, 0, 1), (-4.728838e-8, 0, 1), (-5.7179083e-8, 0, 1), (0.084864065, 0.0026988264, 0.9963889), (0.084898144, 0.0026967223, 0.996386), (-5.4398658e-8, 0, 1), (-5.3743122e-8, 0, 1), (-0.084864065, 0.0026989353, 0.9963889), (-0.084898144, 0.0026967265, 0.996386), (-0.009697421, -0.03239756, 0.999428), (-0.038692962, -0.093112916, 0.9949034), (-5.7179083e-8, 0, 1), (-4.728838e-8, 0, 1), (0, 0, 1), (0, 0, 1), (-1.0856583e-8, 0.91552013, -0.4022721), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.91552013, -0.4022721), (0.99970806, -0.009800152, -0.022086948), (0.9997237, -0.010282291, -0.021138953), (0.99972636, -0.010100305, -0.021100745), (0.99971175, -0.009613543, -0.022001768), (-0.99599385, 0.060002297, -0.0663015), (-0.9974197, 0.060786296, -0.03819756), (-0.9997242, -0.0101013705, -0.02120064), (-0.9997117, -0.009613454, -0.02200164), (-0.99599385, 0.060002297, -0.0663015), (-0.99547553, 0.064514466, -0.06975992), (-0.99547553, 0.064514466, -0.06975992), (-0.99659836, 0.06620089, -0.049084138), (-0.9974197, 0.060786296, -0.03819756), (-0.9997085, -0.009798212, -0.022066588), (-0.9997117, -0.009613454, -0.02200164), (-0.9997242, -0.0101013705, -0.02120064), (-0.99972177, -0.010220041, -0.02125778), (0.99599373, 0.060002893, -0.06630341), (0.99971175, -0.009613543, -0.022001768), (0.99972636, -0.010100305, -0.021100745), (0.9974135, 0.06088785, -0.03819497), (0.99599373, 0.060002893, -0.06630341), (0.9974135, 0.06088785, -0.03819497), (0.9965981, 0.066201024, -0.049087394), (0.99547553, 0.06451428, -0.06975977), (0.99547553, 0.06451428, -0.06975977), (0, 0.98231554, 0.18723291), (0, 0.98231244, 0.18724918), (0, 0.98231244, 0.18724918), (0, 0.98231554, 0.18723288), (-5.867332e-7, -0.86718684, 0.49798295), (-0.000001909444, -0.8671869, 0.4979829), (0, -0.8446049, 0.5353901), (0, -0.8446049, 0.5353901), (0, 0.83701885, -0.54717416), (0, 0.83701885, -0.54717416), (-1.0856583e-8, 0.91552013, -0.4022721), (0, 0.91552013, -0.4022721), (0, -0.98569036, -0.16856624), (0, -0.98569036, -0.16856624), (0, -0.98569036, -0.16856624), (0, -0.98569036, -0.16856624), (-1, -1.3195722e-7, 0), (-1, -2.6391444e-7, 0), (-1, -2.6391444e-7, 0), (-1, -1.8059578e-7, 0), (-1, -8.611205e-7, 0), (-1, -7.951419e-7, 0), (-1, 0, 0), (-1, -1.3195722e-7, 0), (-1, -8.611205e-7, 0), (1, 0, 0), (1, 0, 0), (1, -2.4935273e-10, 0), (1, 1.0581684e-7, 0), (1, 0, 0), (1, 1.0601892e-7, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 1.0601892e-7, 0), (1, 0, 0), (1, 0, 0), (1, 1.0581684e-7, 0), (-1, 0, 0), (-1, 0, 0), (-1, -7.951419e-7, 0), (-1, 0, 0), (0.009697418, -0.03239758, 0.999428), (-0.009697421, -0.03239756, 0.999428), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, -2.4935273e-10, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-2.825982e-8, 0.35211483, 0.9359568), (7.317285e-7, 0.013907912, 0.99990326), (0.00058691116, 0.013910048, 0.9999031), (0, 0.3520738, 0.93597215), (0, 0.70704705, 0.70716655), (-2.825982e-8, 0.35211483, 0.9359568), (0, 0.3520738, 0.93597215), (0, 0.70704705, 0.70716655), (0, 0.9416135, 0.33669564), (0, 0.70704705, 0.70716655), (0, 0.70704705, 0.70716655), (1.14378054e-7, 0.94161355, 0.33669558), (-2.2344466e-8, 0.9826845, 0.18528631), (0, 0.9416135, 0.33669564), (1.14378054e-7, 0.94161355, 0.33669558), (-5.6636054e-8, 0.9826846, 0.18528637), (1.2828968e-7, 0.0047733067, 0.9999887), (0.00058691116, 0.013910048, 0.9999031), (7.317285e-7, 0.013907912, 0.99990326), (0, 0.0047736466, 0.9999887), (-0.0000014631078, -0.83891284, 0.54426575), (0, -0.8389124, 0.5442663), (1.2828968e-7, 0.0047733067, 0.9999887), (0, 0.0047736466, 0.9999887), (1.9452102e-8, 0.82389575, -0.56674147), (0, 0.012237191, -0.9999252), (-2.041736e-8, 0.012237176, -0.9999252), (0, 0.82389575, -0.56674147), (-2.041736e-8, 0.012237176, -0.9999252), (0, 0.012237191, -0.9999252), (7.960325e-9, -0.0070103407, -0.9999754), (0, -0.0070103407, -0.9999754), (0, -0.98525554, -0.17108907), (-9.567624e-10, -0.98525554, -0.17108907), (0, -0.9238783, -0.38268653), (0, -0.9238783, -0.38268653), (0, -0.9238783, -0.38268653), (0, -0.9238783, -0.38268653), (0, -0.70710653, -0.70710707), (0, -0.70710653, -0.70710707), (0, -0.70710653, -0.70710707), (0, -0.70710653, -0.70710707), (0, -0.38268661, -0.92387825), (0, -0.38268661, -0.92387825), (0, -0.38268661, -0.92387825), (0, -0.38268661, -0.92387825), (0, -0.0070103407, -0.9999754), (7.960325e-9, -0.0070103407, -0.9999754), (0.99972636, -0.010100305, -0.021100745), (0.9997237, -0.010282291, -0.021138953), (0.99972665, -0.010434936, -0.020919928), (0.99972665, -0.010434936, -0.020919928), (0.99972665, -0.010434936, -0.020919928), (0.99972665, -0.010434936, -0.020919928), (0.99972665, -0.010434936, -0.020919928), (0.99972844, -0.010303562, -0.020900978), (-0.9997242, -0.0101013705, -0.02120064), (-0.9974197, 0.060786296, -0.03819756), (-0.9986367, 0.047004923, -0.022701174), (-0.9997284, -0.010305249, -0.020900786), (-0.9974197, 0.060786296, -0.03819756), (-0.99659836, 0.06620089, -0.049084138), (-0.9986367, 0.047004923, -0.022701174), (-0.9997242, -0.0101013705, -0.02120064), (-0.9997284, -0.010305249, -0.020900786), (-0.9997266, -0.010435262, -0.020920271), (-0.9997266, -0.010435262, -0.020920271), (-0.9997266, -0.010435262, -0.020920271), (-0.9997266, -0.010435262, -0.020920271), (-0.9997266, -0.010435262, -0.020920271), (-0.99972177, -0.010220041, -0.02125778), (0.99972636, -0.010100305, -0.021100745), (0.99972844, -0.010303562, -0.020900978), (0.9986364, 0.04700826, -0.02270157), (0.9974135, 0.06088785, -0.03819497), (0.9974135, 0.06088785, -0.03819497), (0.9986364, 0.04700826, -0.02270157), (0.9965981, 0.066201024, -0.049087394), (-2.2344466e-8, 0.9826845, 0.18528631), (-5.6636054e-8, 0.9826846, 0.18528637), (0, 0.98231554, 0.18723291), (0, 0.98231554, 0.18723288), (0, -0.8446049, 0.5353901), (0, -0.8446049, 0.5353901), (0, -0.8389124, 0.5442663), (-0.0000014631078, -0.83891284, 0.54426575), (0, 0.83701885, -0.54717416), (1.9452102e-8, 0.82389575, -0.56674147), (0, 0.82389575, -0.56674147), (0, 0.83701885, -0.54717416), (0, -0.9856903, -0.16856644), (-9.567624e-10, -0.98525554, -0.17108907), (0, -0.98525554, -0.17108907), (0, -0.9856903, -0.16856644), (-1, -8.611205e-7, 0), (-1, -1.8059578e-7, 0), (-1, -0.0000024845233, 0), (-1, -7.951419e-7, 0), (-1, -8.611205e-7, 0), (-1, -0.0000024845233, 0), (-1, -0.0000012921711, 0), (1, 1.0581684e-7, 0), (1, -2.4935273e-10, 0), (1, -8.0832424e-10, 0), (1, -8.0832424e-10, 0), (1, -8.0832424e-10, 0), (1, -8.0832424e-10, 0), (1, -8.0832424e-10, 0), (1, 1.7180953e-7, 0), (1, 0, 0), (1, 1.0601892e-7, 0), (1, 3.3126977e-7, 0), (1, 1.0581684e-7, 0), (1, 1.7180953e-7, 0), (1, 3.3126977e-7, 0), (1, 1.0601892e-7, 0), (-1, -7.951419e-7, 0), (-1, -0.0000012921711, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (-0.397143, 0.167817, 0.018727), (-0.024482, 0.167817, 0.018727), (-0.397143, 0.091756, -0.097624), (-0.397143, 0.086344, -0.100552), (-0.024482, 0.086344, -0.100552), (-0.024482, 0.091756, -0.097624), (-0.397143, 0.167817, 0.026708), (-0.397143, 0.091756, 0.026708), (-0.397143, 0.086344, 0.026708), (-0.397143, -0.189744, 0.026708), (-0.024482, 0.091756, 0.026708), (-0.024482, 0.167817, 0.026708), (-0.024482, 0.086344, 0.026708), (-0.024482, -0.189744, 0.026708), (-0.024482, -0.149448, -0.100552), (-0.024482, -0.171804, -0.078196), (-0.397143, -0.171804, -0.078196), (-0.397143, -0.149448, -0.100552), (-0.397143, -0.170102, -0.086751), (-0.024482, -0.170102, -0.086751), (-0.397143, -0.165256, -0.094004), (-0.024482, -0.165256, -0.094004), (-0.397143, -0.158003, -0.09885), (-0.024482, -0.158003, -0.09885), (-0.393094, 0.15867, 0.021451), (-0.028531, 0.15867, 0.021451), (-0.030768, 0.086683, -0.09211), (-0.390858, 0.086683, -0.09211), (-0.028397, -0.162337, -0.076445), (-0.030672, -0.182242, 0.027991), (-0.390953, -0.182242, 0.027991), (-0.393228, -0.162337, -0.076445), (-0.030768, 0.084505, -0.093289), (-0.390858, 0.084505, -0.093289), (-0.388389, 0.091756, 0.026708), (-0.390953, 0.160205, 0.026708), (-0.388389, 0.086344, 0.026708), (-0.028458, -0.161243, -0.083081), (-0.028458, -0.158475, -0.087223), (-0.028458, -0.154333, -0.08999), (-0.028412, -0.148505, -0.09098), (-0.033236, 0.086344, 0.026708), (-0.030672, 0.160205, 0.026708), (-0.033236, 0.091756, 0.026708), (-0.393213, -0.148505, -0.09098), (-0.393167, -0.154333, -0.08999), (-0.393167, -0.158475, -0.087223), (-0.393167, -0.161243, -0.083081), (-0.38889, 0.085971, 0.002359), (-0.391512, -0.177356, 0.002359), (-0.032735, 0.085971, 0.002359), (-0.03273, 0.090717, 0.002359), (-0.028907, 0.146568, 0.002359), (-0.030114, -0.177356, 0.002359), (-0.388895, 0.090717, 0.002359), (-0.392718, 0.146568, 0.002359), (-0.397143, 0.157117, 0.002359), (-0.024482, 0.157117, 0.002359), (-0.024482, -0.18558, 0.002359), (-0.397143, -0.18558, 0.002359), (-0.397143, 0.091756, 0.002359), (-0.397143, 0.086344, 0.002359), (-0.024482, 0.086344, 0.002359), (-0.024482, 0.091756, 0.002359), (-0.397143, -0.204924, 0.026708), (-0.024482, -0.204924, 0.026708), (-0.024482, -0.20076, 0.002359), (-0.397143, -0.20076, 0.002359)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-170.34326, -111.26219), (-170.34323, -111.26219), (-170.34323, -111.262115), (-170.34326, -111.262115), (-170.16176, 0.4677), (-170.16176, -0.569827), (-170.14682, -0.563734), (-170.14682, 0.461607), (-171.17992, -0.479141), (-171.19637, -0.499052), (-170.20734, -0.499052), (-170.22377, -0.479141), (-171.17992, 0.429702), (-171.19637, 0.449903), (-171.19637, 0.248041), (-171.17313, 0.248041), (-171.17313, 0.248041), (-171.19637, 0.248041), (-171.19637, 0.233676), (-171.17313, 0.233676), (-170.22377, -0.479141), (-170.20734, -0.499052), (-170.20734, 0.233676), (-170.23056, 0.233676), (-170.23056, 0.248041), (-170.20734, 0.248041), (-170.20734, 0.449903), (-170.22377, 0.429702), (-170.23056, 0.233676), (-170.20734, 0.233676), (-170.20734, 0.248041), (-170.23056, 0.248041), (-171.17313, 0.233676), (-171.19637, 0.233676), (-171.19637, -0.499052), (-171.17992, -0.479141), (-170.22377, 0.429702), (-170.20734, 0.449903), (-171.19637, 0.449903), (-171.17992, 0.429702), (-170.31119, 0.480091), (-170.33368, 0.480091), (-170.33368, -0.569651), (-170.31119, -0.569651), (-170.0562, 0.385719), (-170.12413, 0.372768), (-170.12413, -0.325357), (-170.05959, -0.326346), (-170.03864, 0.739376), (-170.1032, 0.736621), (-170.1032, 0.724041), (-170.03864, 0.72503), (-170.03864, 0.739376), (-170.03864, 0.920811), (-170.0526, 0.916742), (-170.1032, 0.884663), (-170.1032, 0.736621), (-170.03526, 0.013103), (-170.03864, 0.72503), (-170.1032, 0.724041), (-170.1032, 0.026052), (-170.05959, -0.340696), (-170.05959, -0.326346), (-170.12413, -0.325357), (-170.12413, -0.33794), (-170.05959, -0.340696), (-170.12413, -0.33794), (-170.12413, -0.486011), (-170.07353, -0.518096), (-170.05959, -0.522166), (-170.10197, 0.429561), (-170.17047, 0.428069), (-170.17047, -0.535107), (-170.10197, -0.5366), (-170.16176, -0.569827), (-170.16176, 0.4677), (-170.2161, 0.46663), (-170.2161, -0.568757), (-170.26505, -0.569651), (-170.26505, 0.480091), (-170.31119, 0.480091), (-170.31119, -0.569651), (-170.28763, 0.452512), (-170.28763, -0.542072), (-170.22266, -0.542072), (-170.22266, 0.452512), (-170.35556, 0.247587), (-170.35556, 0.449137), (-170.3767, 0.449137), (-170.42006, 0.420784), (-170.42006, 0.247587), (-170.42006, 0.233245), (-170.35556, 0.233245), (-170.35556, 0.247587), (-170.42006, 0.247587), (-170.31134, -0.32267), (-170.31134, 0.408892), (-170.37585, 0.397859), (-170.37585, -0.32267), (-170.31134, -0.337011), (-170.37585, -0.337011), (-170.37585, -0.5102), (-170.33249, -0.538552), (-170.31134, -0.538552), (-170.37585, -0.337011), (-170.31134, -0.337011), (-170.31134, -0.32267), (-170.37585, -0.32267), (-170.35556, -0.498348), (-170.35556, 0.233245), (-170.42006, 0.233245), (-170.42006, -0.487315), (-170.20734, -0.499052), (-171.19637, -0.499052), (-171.19637, -0.539339), (-170.20734, -0.539339), (-170.35556, -0.498348), (-170.42006, -0.487315), (-170.42006, -0.527539), (-170.35556, -0.538573), (-170.23816, 0.448824), (-170.23816, -0.538384), (-170.19792, -0.538384), (-170.19792, 0.448824), (-170.37585, 0.397859), (-170.31134, 0.408892), (-170.31134, 0.449115), (-170.37585, 0.438081), (-143.9566, -113.63171), (-139.32785, -113.63171), (-139.32785, -107.93224), (-143.9566, -107.93224), (-118.540054, -113.51364), (-115.37141, -113.51364), (-115.37141, -109.61047), (-118.540054, -109.61047), (-88.71556, -113.93459), (-86.12613, -113.93459), (-86.12613, -110.74826), (-88.71556, -110.74826), (-69.25111, -112.321434), (-69.2511, -112.321434), (-69.2511, -112.32143), (-69.25111, -112.32143), (-71.58162, -0.456021), (-71.565956, -0.456145), (-71.565956, 0.524269), (-71.58162, 0.524146), (-71.59275, -0.456021), (-71.58162, -0.456021), (-71.58162, 0.524146), (-71.59275, 0.524146), (-71.60019, -0.456021), (-71.59275, -0.456021), (-71.59275, 0.524146), (-71.60019, 0.524146), (-71.292404, -0.893269), (-71.27584, -0.893118), (-71.27584, 0.01718), (-71.292404, 0.017332), (-70.939735, 0.517939), (-71.565956, 0.524269), (-71.565956, -0.456145), (-70.939735, -0.449814), (-70.93388, -0.449814), (-70.93388, 0.517939), (-70.939735, 0.517939), (-70.939735, -0.449814), (-72.03978, -0.934682), (-72.02521, -0.934682), (-72.02521, 0.068791), (-72.03978, 0.068791), (-72.02521, 0.068791), (-72.02521, -0.934682), (-71.39028, -0.934682), (-71.39028, 0.068791), (-71.59069, -0.897414), (-71.59068, 0.031523), (-71.612015, 0.031523), (-71.612015, -0.897414), (-71.33467, -0.934682), (-71.33467, 0.068791), (-71.34772, 0.068791), (-71.34772, -0.934682), (-71.34772, -0.934682), (-71.34772, 0.068791), (-71.36725, 0.068791), (-71.36725, -0.934682), (-71.36725, -0.934682), (-71.36725, 0.068791), (-71.39028, 0.068791), (-71.39028, -0.934682), (-71.60948, -0.232975), (-71.60948, 0.418717), (-71.804504, 0.381547), (-71.82093, 0.378838), (-71.83118, 0.371989), (-71.83803, 0.361739), (-71.84048, 0.347315), (-71.84619, -0.229348), (-71.73833, 0.268749), (-71.73833, 0.280494), (-71.97212, 0.270512), (-71.97504, 0.265122), (-71.73833, 0.280494), (-71.73833, 0.418717), (-71.97212, 0.270512), (-71.73833, 0.268749), (-71.97504, 0.265122), (-71.96932, -0.311541), (-71.96687, -0.325965), (-71.96003, -0.336215), (-71.949776, -0.343064), (-71.93335, -0.345773), (-71.73833, -0.382943), (-71.60948, -0.232975), (-71.84619, -0.229348), (-71.84328, -0.234738), (-71.60948, -0.244721), (-71.60948, -0.244721), (-71.84328, -0.234738), (-71.60948, -0.382944), (-71.292404, -0.893269), (-71.292404, 0.017332), (-71.4891, 0.013048), (-71.4891, -0.888985), (-70.77294, -0.454814), (-70.77294, 0.522938), (-70.93388, 0.517939), (-70.93388, -0.449814), (-72.21578, -0.934682), (-72.03978, -0.934682), (-72.03978, 0.068791), (-72.21578, 0.068791), (-71.389885, 0.031523), (-71.59068, 0.031523), (-71.59069, -0.897414), (-71.389885, -0.897414), (-71.32885, 0.292167), (-71.32885, 0.453884), (-71.57623, 0.292167), (-71.32885, 0.278775), (-71.32885, 0.292167), (-71.57623, 0.292167), (-71.58348, 0.278775), (-71.46702, -0.218916), (-71.46702, 0.453883), (-71.66633, 0.419798), (-71.68749, 0.415587), (-71.705444, 0.403597), (-71.71743, 0.385651), (-71.72164, 0.364484), (-71.72164, -0.218916), (-71.46702, -0.394025), (-71.46702, -0.232308), (-71.71439, -0.232308), (-71.46702, -0.218916), (-71.72164, -0.218916), (-71.71439, -0.232308), (-71.46702, -0.232308), (-71.32885, 0.278775), (-71.58348, 0.278775), (-71.58348, -0.304627), (-71.57927, -0.325794), (-71.567276, -0.343739), (-71.54933, -0.35573), (-71.52817, -0.35994), (-71.32885, -0.394026), (5.646933, -121.22408), (7.358486, -121.22408), (7.358486, -119.51253), (5.646933, -119.51253), (-5.253075, -117.71076), (-3.54152, -117.71076), (-3.54152, -115.99921), (-5.253075, -115.99921)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer1C5_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
                rel material:binding = </root/_materials/M_FridgeDrawer1C5_0>
            }

            def GeomSubset "M_FridgeDrawer1C5_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer1C5_1>
            }

            def GeomSubset "M_FridgeDrawer1C5_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer1C5_2>
            }

            def GeomSubset "M_FridgeDrawer1C5_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33]
                rel material:binding = </root/_materials/M_FridgeDrawer1C5_3>
            }

            def GeomSubset "M_FridgeDrawer1C5_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]
                rel material:binding = </root/_materials/M_FridgeDrawer1C5_4>
            }

            def GeomSubset "M_FridgeDrawer1C5_5" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [63]
                rel material:binding = </root/_materials/M_FridgeDrawer1C5_5>
            }

            def GeomSubset "M_FridgeDrawer1C5_6" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [64]
                rel material:binding = </root/_materials/M_FridgeDrawer1C5_6>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer1C5_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C5_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.03676468, 0.03676468, 0.03676468)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C5_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge.tga@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C5_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer1C5_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C5_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C5_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C5_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C5_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C5_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer1C5_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C5_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C5_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C5_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C5_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C5_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer1C5_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C5_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C5_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C5_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer1C5_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C5_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_FridgeDrawer1C5_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C5_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C5_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C5_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C5_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C5_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer1C5_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C5_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C5_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C5_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C5_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C5_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

