#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer4_17_FridgeDrawer4C5_4_GeomSubset_6"
    {
        def Mesh "FridgeDrawer4_17_FridgeDrawer4C5_4_GeomSubset_6"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer4C5_6>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.024848, 0.167817, -0.152393), (0.397509, 0.167817, -0.152393), (0.024848, 0.091756, -0.268744), (0.024848, 0.086344, -0.271672), (0.397509, 0.086344, -0.271672), (0.397509, 0.091756, -0.268744), (0.024848, 0.167817, -0.144413), (0.024848, 0.091756, -0.144413), (0.024848, 0.086344, -0.144413), (0.024848, -0.189744, -0.144413), (0.397509, 0.091756, -0.144413), (0.397509, 0.167817, -0.144413), (0.397509, 0.086344, -0.144413), (0.397509, -0.189744, -0.144413), (0.397509, -0.149448, -0.271672), (0.397509, -0.171804, -0.249316), (0.024848, -0.171804, -0.249316), (0.024848, -0.149448, -0.271672), (0.024848, -0.170102, -0.257871), (0.397509, -0.170102, -0.257871), (0.024848, -0.165256, -0.265124), (0.397509, -0.165256, -0.265124), (0.024848, -0.158003, -0.269971), (0.397509, -0.158003, -0.269971), (0.028897, 0.15867, -0.149669), (0.39346, 0.15867, -0.149669), (0.391223, 0.086683, -0.26323), (0.031133, 0.086683, -0.26323), (0.393594, -0.162337, -0.247565), (0.391319, -0.182242, -0.14313), (0.031038, -0.182242, -0.14313), (0.028763, -0.162337, -0.247565), (0.391223, 0.084505, -0.264409), (0.031133, 0.084505, -0.264409), (0.033602, 0.091756, -0.144413), (0.031038, 0.160205, -0.144413), (0.033602, 0.086344, -0.144413), (0.393533, -0.161243, -0.254201), (0.393533, -0.158475, -0.258343), (0.393533, -0.154333, -0.26111), (0.393579, -0.148505, -0.2621), (0.388755, 0.086344, -0.144413), (0.391319, 0.160205, -0.144413), (0.388755, 0.091756, -0.144413), (0.028778, -0.148505, -0.2621), (0.028824, -0.154333, -0.26111), (0.028824, -0.158475, -0.258343), (0.028824, -0.161243, -0.254201), (0.033101, 0.085971, -0.168761), (0.030479, -0.177356, -0.168761), (0.389256, 0.085971, -0.168761), (0.389261, 0.090717, -0.168761), (0.393084, 0.146568, -0.168761), (0.391877, -0.177356, -0.168761), (0.033096, 0.090717, -0.168761), (0.029273, 0.146568, -0.168761), (0.024848, 0.157117, -0.168761), (0.397509, 0.157117, -0.168761), (0.397509, -0.18558, -0.168761), (0.024848, -0.18558, -0.168761), (0.024848, 0.091756, -0.168761), (0.024848, 0.086344, -0.168761), (0.397509, 0.086344, -0.168761), (0.397509, 0.091756, -0.168761), (0.024848, -0.204924, -0.144413), (0.397509, -0.204924, -0.144413), (0.397509, -0.20076, -0.168761), (0.024848, -0.20076, -0.168761)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-5.253075, -117.71076), (-3.54152, -117.71076), (-3.54152, -115.99921), (-5.253075, -115.99921)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer4C5_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C5_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C5_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C5_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C5_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C5_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

