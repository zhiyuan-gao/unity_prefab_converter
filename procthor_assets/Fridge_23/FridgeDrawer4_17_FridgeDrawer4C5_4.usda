#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer4C5"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer4C5" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(0.000189, -0.204924, -1.019143), (0.397509, 0.167817, -0.14313)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 52, 53, 70, 63, 58, 37, 41, 57, 63, 34, 35, 62, 62, 35, 36, 64, 57, 41, 40, 69, 71, 38, 39, 70, 69, 40, 38, 71, 64, 36, 37, 58, 70, 39, 34, 63, 28, 34, 39, 29, 58, 77, 76, 64, 71, 79, 78, 69, 71, 70, 53, 80, 79, 57, 69, 78, 81, 62, 64, 76, 82, 62, 82, 83, 52, 63, 77, 58, 57, 81, 53, 52, 83, 80, 85, 84, 28, 29, 95, 94, 93, 92, 35, 34, 28, 84, 88, 89, 36, 35, 88, 40, 41, 86, 90, 38, 91, 85, 29, 39, 91, 38, 40, 90, 37, 36, 89, 87, 41, 37, 92, 93, 37, 87, 95, 92, 87, 86, 94, 95, 86, 41, 93, 94, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 67, 68, 72, 73, 66, 67, 73, 74, 65, 66, 74, 75, 56, 65, 75, 59, 61, 72, 68, 60, 54, 55, 61, 60, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 76, 77, 59, 75, 74, 73, 72, 61, 78, 79, 54, 60, 79, 80, 54, 78, 60, 68, 67, 66, 65, 56, 81, 76, 61, 55, 82, 82, 55, 83, 56, 59, 77, 81, 80, 83, 55, 54, 85, 33, 30, 84, 87, 44, 43, 86, 88, 84, 30, 89, 88, 30, 31, 90, 86, 43, 47, 49, 51, 42, 32, 85, 91, 33, 90, 32, 33, 91, 89, 31, 45, 50, 48, 46, 44, 87, 20, 21, 23, 22, 24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer4C5_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.000002150191, -0.867196, 0.49796703), (-0.0000046063215, -0.8671961, 0.497967), (0, -0.9599011, 0.28033873), (0, -0.9599011, 0.28033873), (-0.03871657, -0.09306921, 0.99490666), (-0.0096971, -0.0323973, 0.999428), (0.009697093, -0.032397285, 0.999428), (0.038716454, -0.09306917, 0.99490666), (-9.148653e-7, 0, 1), (-7.566141e-7, 0, 1), (-8.703785e-7, 0, 1), (-8.5988995e-7, 0, 1), (-8.5988995e-7, 0, 1), (-8.703785e-7, 0, 1), (-0.08489744, 0.0026967144, 0.9963861), (-0.08486338, 0.002698924, 0.9963889), (0.038716454, -0.09306917, 0.99490666), (0.009697093, -0.032397285, 0.999428), (0.08489742, 0.0026967083, 0.9963861), (0.08486336, 0.002698815, 0.996389), (4.2994446e-7, 0, 1), (4.3518875e-7, 0, 1), (3.7830668e-7, 0, 1), (4.5743215e-7, 0, 1), (0.08486336, 0.002698815, 0.996389), (0.08489742, 0.0026967083, 0.9963861), (4.3518875e-7, 0, 1), (4.2994446e-7, 0, 1), (-0.08486338, 0.002698924, 0.9963889), (-0.08489744, 0.0026967144, 0.9963861), (-0.0096971, -0.0323973, 0.999428), (-0.03871657, -0.09306921, 0.99490666), (4.5743215e-7, 0, 1), (3.7830668e-7, 0, 1), (-7.566141e-7, 0, 1), (-9.148653e-7, 0, 1), (-1.0856583e-8, 0.91552013, -0.4022721), (0, 1, 0), (0, 1, 0), (0, 0.91552013, -0.4022721), (0.999708, -0.009800146, -0.022087615), (0.99971646, -0.010079561, -0.021573694), (0.99972636, -0.010101831, -0.021101024), (0.99971163, -0.0096159, -0.022002283), (-0.99599385, 0.060001314, -0.066303626), (-0.99741966, 0.06078481, -0.038198616), (-0.9997242, -0.010102943, -0.02120001), (-0.9997123, -0.009567503, -0.021996144), (-0.99599385, 0.060001314, -0.066303626), (-0.9954752, 0.064515576, -0.06976281), (-0.9954752, 0.064515576, -0.06976281), (-0.9965962, 0.066197194, -0.049133807), (-0.99741966, 0.06078481, -0.038198616), (-0.99970853, -0.009798171, -0.022067405), (-0.9997123, -0.009567503, -0.021996144), (-0.9997242, -0.010102943, -0.02120001), (-0.9997167, -0.010078493, -0.021562554), (0.9959938, 0.060003057, -0.06630264), (0.99971163, -0.0096159, -0.022002283), (0.99972636, -0.010101831, -0.021101024), (0.9974195, 0.0607878, -0.038199086), (0.9959938, 0.060003057, -0.06630264), (0.9974195, 0.0607878, -0.038199086), (0.9965981, 0.06620067, -0.049089443), (0.9954753, 0.06451515, -0.06976284), (0.9954753, 0.06451515, -0.06976284), (0, 0.98231477, 0.18723692), (0, 0.98231083, 0.1872576), (0, 0.98231083, 0.1872576), (0, 0.98231477, 0.18723693), (-0.0000046063215, -0.8671961, 0.497967), (0.000002150191, -0.867196, 0.49796703), (0, -0.8446046, 0.5353905), (0, -0.8446047, 0.5353905), (0, 0.8370188, -0.54717416), (0, 0.8370188, -0.54717416), (-1.0856583e-8, 0.91552013, -0.4022721), (0, 0.91552013, -0.4022721), (0, -0.9856892, -0.16857292), (0, -0.9856892, -0.16857292), (0, -0.9856892, -0.16857292), (0, -0.9856892, -0.16857292), (-1, -8.247681e-9, 0), (-1, -1.6495362e-8, 0), (-1, -1.6495362e-8, 0), (-1, -1.1287721e-8, 0), (-1, 2.502341e-9, 0), (-1, 4.470651e-9, 0), (-1, 0, 0), (-1, -8.247681e-9, 0), (-1, 2.502341e-9, 0), (1, 0, 0), (1, 0, 0), (1, -8.644227e-9, 0), (1, -7.0054753e-9, 0), (1, 6.598146e-8, 0), (1, 3.299073e-8, 0), (1, 9.030179e-8, 0), (1, 1.3196292e-7, 0), (1, 1.3196292e-7, 0), (1, 3.299073e-8, 0), (1, 6.598146e-8, 0), (1, 0, 0), (1, -7.0054753e-9, 0), (-1, 0, 0), (-1, 0, 0), (-1, 4.470651e-9, 0), (-1, -2.6597624e-9, 0), (0.009697093, -0.032397285, 0.999428), (-0.0096971, -0.0323973, 0.999428), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, -2.6597624e-9, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, -8.644227e-9, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-2.1667802e-7, 0.35219657, 0.935926), (4.7829235e-7, 0.013908081, 0.9999032), (0.00058672106, 0.013910316, 0.9999031), (0, 0.35219678, 0.93592596), (0, 0.7070476, 0.707166), (-2.1667802e-7, 0.35219657, 0.935926), (0, 0.35219678, 0.93592596), (0, 0.7070476, 0.707166), (0, 0.94161373, 0.33669502), (0, 0.7070476, 0.707166), (0, 0.7070476, 0.707166), (8.731149e-8, 0.9416137, 0.33669508), (6.664777e-9, 0.9826845, 0.18528643), (0, 0.94161373, 0.33669502), (8.731149e-8, 0.9416137, 0.33669508), (-5.4758857e-8, 0.98268455, 0.18528652), (0.0000015182886, 0.004771802, 0.9999886), (0.00058672106, 0.013910316, 0.9999031), (4.7829235e-7, 0.013908081, 0.9999032), (0, 0.0047721416, 0.9999887), (-0.0000022687018, -0.838937, 0.5442287), (0, -0.83893657, 0.5442292), (0.0000015182886, 0.004771802, 0.9999886), (0, 0.0047721416, 0.9999887), (1.9452093e-8, 0.8238962, -0.56674075), (0, 0.012238145, -0.9999251), (-0.000008944394, 0.012238145, -0.9999251), (0, 0.8238963, -0.56674075), (-0.000008944394, 0.012238145, -0.9999251), (0, 0.012238145, -0.9999251), (7.955793e-9, -0.0070058405, -0.9999755), (0, -0.0070058256, -0.9999755), (0, -0.98523086, -0.17123169), (-4.1359726e-7, -0.98523086, -0.17123169), (0, -0.9238781, -0.3826868), (0, -0.9238781, -0.3826868), (0, -0.9238781, -0.3826868), (0, -0.9238781, -0.3826868), (0, -0.70714074, -0.7070728), (0, -0.70714074, -0.7070728), (0, -0.70714074, -0.7070728), (0, -0.70714074, -0.7070728), (0, -0.38267928, -0.9238812), (0, -0.38267928, -0.9238812), (0, -0.38267928, -0.9238812), (0, -0.38267928, -0.9238812), (0, -0.0070058256, -0.9999755), (7.955793e-9, -0.0070058405, -0.9999755), (0.99972636, -0.010101831, -0.021101024), (0.99971646, -0.010079561, -0.021573694), (0.9997268, -0.010434976, -0.02091997), (0.9997268, -0.010434976, -0.02091997), (0.9997268, -0.010434976, -0.02091997), (0.9997268, -0.010434976, -0.02091997), (0.9997268, -0.010434976, -0.02091997), (0.99972844, -0.010304169, -0.020900378), (-0.9997242, -0.010102943, -0.02120001), (-0.99741966, 0.06078481, -0.038198616), (-0.9986368, 0.047002267, -0.022701288), (-0.9997285, -0.0103064235, -0.020900255), (-0.99741966, 0.06078481, -0.038198616), (-0.9965962, 0.066197194, -0.049133807), (-0.9986368, 0.047002267, -0.022701288), (-0.9997242, -0.010102943, -0.02120001), (-0.9997285, -0.0103064235, -0.020900255), (-0.99972665, -0.010435064, -0.02092036), (-0.99972665, -0.010435064, -0.02092036), (-0.99972665, -0.010435064, -0.02092036), (-0.99972665, -0.010435064, -0.02092036), (-0.99972665, -0.010435064, -0.02092036), (-0.9997167, -0.010078493, -0.021562554), (0.99972636, -0.010101831, -0.021101024), (0.99972844, -0.010304169, -0.020900378), (0.99863654, 0.047007218, -0.022701621), (0.9974195, 0.0607878, -0.038199086), (0.9974195, 0.0607878, -0.038199086), (0.99863654, 0.047007218, -0.022701621), (0.9965981, 0.06620067, -0.049089443), (6.664777e-9, 0.9826845, 0.18528643), (-5.4758857e-8, 0.98268455, 0.18528652), (0, 0.98231477, 0.18723692), (0, 0.98231477, 0.18723693), (0, -0.8446047, 0.5353905), (0, -0.8446046, 0.5353905), (0, -0.83893657, 0.5442292), (-0.0000022687018, -0.838937, 0.5442287), (0, 0.8370188, -0.54717416), (1.9452093e-8, 0.8238962, -0.56674075), (0, 0.8238963, -0.56674075), (0, 0.8370188, -0.54717416), (0, -0.9856903, -0.16856642), (-4.1359726e-7, -0.98523086, -0.17123169), (0, -0.98523086, -0.17123169), (0, -0.9856903, -0.16856642), (-1, 2.502341e-9, 0), (-1, -1.1287721e-8, 0), (-1, 2.0704364e-8, 0), (-1, 4.470651e-9, 0), (-1, 2.502341e-9, 0), (-1, 2.0704364e-8, 0), (-1, 5.6488654e-9, 0), (1, -7.0054753e-9, 0), (1, -8.644227e-9, 0), (0.99999994, -2.8021901e-8, 0), (0.99999994, -2.8021901e-8, 0), (0.99999994, -2.8021901e-8, 0), (0.99999994, -2.8021901e-8, 0), (0.99999994, -2.8021901e-8, 0), (1, -1.6637442e-8, 0), (1, 9.030179e-8, 0), (1, 3.299073e-8, 0), (1, 0, 0), (1, -7.0054753e-9, 0), (1, -1.6637442e-8, 0), (1, 0, 0), (1, 3.299073e-8, 0), (-1, 4.470651e-9, 0), (-1, 5.6488654e-9, 0), (-0.99999994, -8.6221235e-9, 0), (-0.99999994, -8.6221235e-9, 0), (-0.99999994, -8.6221235e-9, 0), (-0.99999994, -8.6221235e-9, 0), (-0.99999994, -8.6221235e-9, 0), (-1, -2.6597624e-9, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.000189, 0.040386, -1.019143), (0.000198, 0.040386, -1.019143), (0.000189, 0.040396, -1.019143), (0.000198, 0.040396, -1.019143), (0.024848, 0.167817, -0.152393), (0.397509, 0.167817, -0.152393), (0.024848, 0.091756, -0.268744), (0.024848, 0.086344, -0.271672), (0.397509, 0.086344, -0.271672), (0.397509, 0.091756, -0.268744), (0.024848, 0.167817, -0.144413), (0.024848, 0.091756, -0.144413), (0.024848, 0.086344, -0.144413), (0.024848, -0.189744, -0.144413), (0.397509, 0.091756, -0.144413), (0.397509, 0.167817, -0.144413), (0.397509, 0.086344, -0.144413), (0.397509, -0.189744, -0.144413), (0.397509, -0.149448, -0.271672), (0.397509, -0.171804, -0.249316), (0.024848, -0.171804, -0.249316), (0.024848, -0.149448, -0.271672), (0.024848, -0.170102, -0.257871), (0.397509, -0.170102, -0.257871), (0.024848, -0.165256, -0.265124), (0.397509, -0.165256, -0.265124), (0.024848, -0.158003, -0.269971), (0.397509, -0.158003, -0.269971), (0.028897, 0.15867, -0.149669), (0.39346, 0.15867, -0.149669), (0.391223, 0.086683, -0.26323), (0.031133, 0.086683, -0.26323), (0.393594, -0.162337, -0.247565), (0.391319, -0.182242, -0.14313), (0.031038, -0.182242, -0.14313), (0.028763, -0.162337, -0.247565), (0.391223, 0.084505, -0.264409), (0.031133, 0.084505, -0.264409), (0.033602, 0.091756, -0.144413), (0.031038, 0.160205, -0.144413), (0.033602, 0.086344, -0.144413), (0.393533, -0.161243, -0.254201), (0.393533, -0.158475, -0.258343), (0.393533, -0.154333, -0.26111), (0.393579, -0.148505, -0.2621), (0.388755, 0.086344, -0.144413), (0.391319, 0.160205, -0.144413), (0.388755, 0.091756, -0.144413), (0.028778, -0.148505, -0.2621), (0.028824, -0.154333, -0.26111), (0.028824, -0.158475, -0.258343), (0.028824, -0.161243, -0.254201), (0.033101, 0.085971, -0.168761), (0.030479, -0.177356, -0.168761), (0.389256, 0.085971, -0.168761), (0.389261, 0.090717, -0.168761), (0.393084, 0.146568, -0.168761), (0.391877, -0.177356, -0.168761), (0.033096, 0.090717, -0.168761), (0.029273, 0.146568, -0.168761), (0.024848, 0.157117, -0.168761), (0.397509, 0.157117, -0.168761), (0.397509, -0.18558, -0.168761), (0.024848, -0.18558, -0.168761), (0.024848, 0.091756, -0.168761), (0.024848, 0.086344, -0.168761), (0.397509, 0.086344, -0.168761), (0.397509, 0.091756, -0.168761), (0.024848, -0.204924, -0.144413), (0.397509, -0.204924, -0.144413), (0.397509, -0.20076, -0.168761), (0.024848, -0.20076, -0.168761)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-170.34332, -111.26219), (-170.34323, -111.26219), (-170.34323, -111.262115), (-170.34332, -111.262115), (-170.16176, 0.467681), (-170.16176, -0.569809), (-170.14682, -0.563717), (-170.14682, 0.461589), (-171.17993, -0.479156), (-171.19637, -0.499068), (-170.20732, -0.499068), (-170.22375, -0.479156), (-171.17993, 0.429719), (-171.19637, 0.44992), (-171.19637, 0.248051), (-171.17314, 0.248051), (-171.17314, 0.248051), (-171.19637, 0.248051), (-171.19637, 0.233686), (-171.17314, 0.233686), (-170.22375, -0.479156), (-170.20732, -0.499068), (-170.20732, 0.233686), (-170.23056, 0.233686), (-170.23056, 0.248051), (-170.20732, 0.248051), (-170.20732, 0.44992), (-170.22375, 0.429719), (-170.23056, 0.233686), (-170.20732, 0.233686), (-170.20732, 0.248051), (-170.23056, 0.248051), (-171.17314, 0.233686), (-171.19637, 0.233686), (-171.19637, -0.499068), (-171.17993, -0.479156), (-170.22375, 0.429719), (-170.20732, 0.44992), (-171.19637, 0.44992), (-171.17993, 0.429719), (-170.31119, 0.480109), (-170.33368, 0.480109), (-170.33368, -0.569669), (-170.31119, -0.569669), (-170.0562, 0.385702), (-170.12413, 0.372751), (-170.12413, -0.325348), (-170.05959, -0.326337), (-170.03864, 0.739396), (-170.1032, 0.73664), (-170.1032, 0.72406), (-170.03864, 0.725048), (-170.03864, 0.739396), (-170.03864, 0.920844), (-170.0526, 0.916775), (-170.1032, 0.884694), (-170.1032, 0.73664), (-170.03526, 0.01307), (-170.03864, 0.725048), (-170.1032, 0.72406), (-170.1032, 0.02602), (-170.05959, -0.340686), (-170.05959, -0.326337), (-170.12413, -0.325348), (-170.12413, -0.33793), (-170.05959, -0.340686), (-170.12413, -0.33793), (-170.12413, -0.485996), (-170.07353, -0.51808), (-170.05959, -0.522149), (-170.10196, 0.429463), (-170.17049, 0.427971), (-170.17049, -0.535011), (-170.10196, -0.536502), (-170.16176, -0.569809), (-170.16176, 0.467681), (-170.2161, 0.466612), (-170.2161, -0.568739), (-170.26506, -0.569669), (-170.26506, 0.480109), (-170.31119, 0.480109), (-170.31119, -0.569669), (-170.28763, 0.452542), (-170.28763, -0.542103), (-170.22266, -0.542103), (-170.22266, 0.452542), (-170.35556, 0.247571), (-170.35556, 0.449109), (-170.3767, 0.449109), (-170.42006, 0.420758), (-170.42006, 0.247571), (-170.42006, 0.233229), (-170.35556, 0.233229), (-170.35556, 0.247571), (-170.42006, 0.247571), (-170.31134, -0.322668), (-170.31134, 0.408889), (-170.37585, 0.397856), (-170.37585, -0.322668), (-170.31134, -0.33701), (-170.37585, -0.33701), (-170.37585, -0.510198), (-170.33249, -0.538549), (-170.31134, -0.538549), (-170.37585, -0.33701), (-170.31134, -0.33701), (-170.31134, -0.322668), (-170.37585, -0.322668), (-170.35556, -0.498323), (-170.35556, 0.233229), (-170.42006, 0.233229), (-170.42006, -0.48729), (-170.20732, -0.499068), (-171.19637, -0.499068), (-171.19637, -0.539357), (-170.20732, -0.539357), (-170.35556, -0.498323), (-170.42006, -0.48729), (-170.42006, -0.527512), (-170.35556, -0.538546), (-170.23816, 0.448744), (-170.23816, -0.538304), (-170.19792, -0.538304), (-170.19792, 0.448744), (-170.37585, 0.397856), (-170.31134, 0.408889), (-170.31134, 0.449112), (-170.37585, 0.438079), (-143.9566, -113.63171), (-139.32785, -113.63171), (-139.32785, -107.93224), (-143.9566, -107.93224), (-118.540054, -113.51364), (-115.37141, -113.51364), (-115.37141, -109.61047), (-118.540054, -109.61047), (-88.71556, -113.93459), (-86.12613, -113.93459), (-86.12613, -110.74826), (-88.71556, -110.74826), (-69.25111, -112.321434), (-69.2511, -112.321434), (-69.2511, -112.32143), (-69.25111, -112.32143), (-71.58162, -0.456021), (-71.565956, -0.456144), (-71.565956, 0.524268), (-71.58162, 0.524145), (-71.59275, -0.456021), (-71.58162, -0.456021), (-71.58162, 0.524145), (-71.59275, 0.524145), (-71.60019, -0.456021), (-71.59275, -0.456021), (-71.59275, 0.524145), (-71.60019, 0.524145), (-71.292404, -0.89327), (-71.27584, -0.893118), (-71.27584, 0.017181), (-71.292404, 0.017333), (-70.939735, 0.517938), (-71.565956, 0.524268), (-71.565956, -0.456144), (-70.939735, -0.449814), (-70.93388, -0.449814), (-70.93388, 0.517938), (-70.939735, 0.517938), (-70.939735, -0.449814), (-72.03978, -0.934683), (-72.02521, -0.934683), (-72.02521, 0.068791), (-72.03978, 0.068791), (-72.02521, 0.068791), (-72.02521, -0.934683), (-71.39028, -0.934683), (-71.39028, 0.068791), (-71.59069, -0.897414), (-71.59069, 0.031522), (-71.612015, 0.031522), (-71.612015, -0.897414), (-71.33467, -0.934683), (-71.33467, 0.068791), (-71.34772, 0.068791), (-71.34772, -0.934683), (-71.34772, -0.934683), (-71.34772, 0.068791), (-71.36725, 0.068791), (-71.36725, -0.934683), (-71.36725, -0.934683), (-71.36725, 0.068791), (-71.39028, 0.068791), (-71.39028, -0.934683), (-71.60948, -0.232976), (-71.60948, 0.418717), (-71.80451, 0.381547), (-71.82093, 0.378838), (-71.831184, 0.371989), (-71.83803, 0.361738), (-71.840485, 0.347315), (-71.84619, -0.229349), (-71.73833, 0.268749), (-71.73833, 0.280494), (-71.97212, 0.270512), (-71.97504, 0.265121), (-71.73833, 0.280494), (-71.73833, 0.418717), (-71.97212, 0.270512), (-71.73833, 0.268749), (-71.97504, 0.265121), (-71.96933, -0.311542), (-71.96688, -0.325966), (-71.96003, -0.336216), (-71.949776, -0.343065), (-71.93336, -0.345774), (-71.73833, -0.382944), (-71.60948, -0.232976), (-71.84619, -0.229349), (-71.84328, -0.234739), (-71.60948, -0.244721), (-71.60948, -0.244721), (-71.84328, -0.234739), (-71.60948, -0.382945), (-71.292404, -0.89327), (-71.292404, 0.017333), (-71.4891, 0.013049), (-71.4891, -0.888985), (-70.77294, -0.454814), (-70.77294, 0.522938), (-70.93388, 0.517938), (-70.93388, -0.449814), (-72.21578, -0.934683), (-72.03978, -0.934683), (-72.03978, 0.068791), (-72.21578, 0.068791), (-71.389885, 0.031522), (-71.59069, 0.031522), (-71.59069, -0.897414), (-71.389885, -0.897414), (-71.32885, 0.292166), (-71.32885, 0.453883), (-71.57623, 0.292166), (-71.32885, 0.278774), (-71.32885, 0.292166), (-71.57623, 0.292166), (-71.58348, 0.278774), (-71.46702, -0.218917), (-71.46702, 0.453882), (-71.66633, 0.419796), (-71.6875, 0.415586), (-71.705444, 0.403595), (-71.71743, 0.38565), (-71.72164, 0.364483), (-71.72164, -0.218917), (-71.46702, -0.394024), (-71.46702, -0.232308), (-71.7144, -0.232308), (-71.46702, -0.218917), (-71.72164, -0.218917), (-71.7144, -0.232308), (-71.46702, -0.232308), (-71.32885, 0.278774), (-71.58348, 0.278774), (-71.58348, -0.304626), (-71.57927, -0.325794), (-71.567276, -0.343739), (-71.54933, -0.355729), (-71.52816, -0.35994), (-71.32885, -0.394025), (5.646933, -121.22408), (7.358486, -121.22408), (7.358486, -119.51253), (5.646933, -119.51253), (-5.253075, -117.71076), (-3.54152, -117.71076), (-3.54152, -115.99921), (-5.253075, -115.99921)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer4C5_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
                rel material:binding = </root/_materials/M_FridgeDrawer4C5_0>
            }

            def GeomSubset "M_FridgeDrawer4C5_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer4C5_1>
            }

            def GeomSubset "M_FridgeDrawer4C5_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer4C5_2>
            }

            def GeomSubset "M_FridgeDrawer4C5_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33]
                rel material:binding = </root/_materials/M_FridgeDrawer4C5_3>
            }

            def GeomSubset "M_FridgeDrawer4C5_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]
                rel material:binding = </root/_materials/M_FridgeDrawer4C5_4>
            }

            def GeomSubset "M_FridgeDrawer4C5_5" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [63]
                rel material:binding = </root/_materials/M_FridgeDrawer4C5_5>
            }

            def GeomSubset "M_FridgeDrawer4C5_6" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [64]
                rel material:binding = </root/_materials/M_FridgeDrawer4C5_6>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer4C5_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C5_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.03676468, 0.03676468, 0.03676468)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C5_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge.tga@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C5_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer4C5_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C5_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C5_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C5_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C5_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C5_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C5_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C5_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C5_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C5_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C5_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C5_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C5_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C5_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C5_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C5_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer4C5_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C5_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_FridgeDrawer4C5_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C5_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C5_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C5_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C5_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C5_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C5_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C5_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C5_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C5_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C5_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C5_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

