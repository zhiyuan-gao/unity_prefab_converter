#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshWindowFixed_36X48_0_GeomSubset_1"
    {
        def Mesh "MeshWindowFixed_36X48_0_GeomSubset_1"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [32, 33, 35, 34, 34, 35, 37, 36, 36, 37, 39, 38, 38, 39, 33, 32, 33, 39, 37, 35, 38, 32, 34, 36]
            rel material:binding = </root/_materials/M_WindowFixed_36X48_1>
            normal3f[] normals = [(-0.0000012996483, -1, 0), (-0.0000012996483, -1, 0), (-0.0000012996483, -1, 0), (-0.0000012996483, -1, 0), (-6.9622397e-9, 0, -0.99999994), (-6.9622397e-9, 0, -0.99999994), (-6.9622397e-9, 0, -0.99999994), (-6.9622397e-9, 0, -0.99999994), (6.4982413e-7, 1, 4.743478e-7), (6.4982413e-7, 1, 4.743478e-7), (6.4982413e-7, 1, 4.743478e-7), (6.4982413e-7, 1, 4.743478e-7), (-1.4978772e-8, 0, 0.99999994), (-1.4978772e-8, 0, 0.99999994), (-1.4978772e-8, 0, 0.99999994), (-1.4978772e-8, 0, 0.99999994), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.4572, -0.040625, 0.608753), (0.4572, -0.040625, -0.610447), (-0.4572, -0.040624, -0.610447), (-0.409812, -0.040624, -0.553283), (0.409812, -0.040625, -0.553283), (0.409812, -0.040625, 0.55159), (0.409812, 0.040625, 0.55159), (0.409812, 0.040625, -0.553283), (-0.409812, 0.040626, -0.553283), (-0.4572, 0.040626, -0.610447), (0.4572, 0.040625, -0.610447), (0.4572, 0.040625, 0.608753), (-0.409812, 0.040626, 0.55159), (-0.409812, -0.040624, 0.55159), (-0.4572, 0.040626, 0.608753), (-0.4572, -0.040624, 0.608753), (-0.409812, 0.028626, 0.55159), (-0.409812, -0.028625, 0.55159), (0.409812, -0.028626, 0.55159), (0.409812, 0.028625, 0.55159), (0.409812, 0.028625, -0.553283), (0.409812, -0.028625, -0.553283), (-0.409812, -0.028625, -0.553283), (-0.409812, 0.028626, -0.553283), (-0.384812, 0.028626, 0.52659), (-0.384812, -0.028625, 0.52659), (0.384812, -0.028625, 0.52659), (0.384812, 0.028625, 0.52659), (0.384812, 0.028625, -0.528283), (0.384812, -0.028625, -0.528283), (-0.384812, -0.028625, -0.528283), (-0.384812, 0.028626, -0.528283), (-0.384812, 0.005013, -0.528283), (0.384812, 0.005012, -0.528283), (-0.384812, 0.005013, 0.52659), (0.384812, 0.005012, 0.52659), (-0.384812, -0.005012, 0.52659), (0.384812, -0.005013, 0.52659), (-0.384812, -0.005012, -0.528283), (0.384812, -0.005012, -0.528283)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-21.633123, 0.259635), (-21.031855, 0.259635), (-21.031855, 1.083754), (-21.633123, 1.083754), (-20.188147, 3.001793), (-20.188147, 2.400513), (-20.180315, 2.400513), (-20.180315, 3.001793), (-22.492048, 2.482029), (-21.89078, 2.482029), (-21.89078, 3.306149), (-22.492048, 3.306149), (-20.126806, 3.001746), (-20.126806, 2.40056), (-20.118975, 2.40056), (-20.118975, 3.001746), (-21.341324, 2.482008), (-21.333492, 2.482008), (-21.333492, 3.306169), (-21.341324, 3.306169), (-21.279985, 2.482012), (-21.272154, 2.482012), (-21.272154, 3.306165), (-21.279985, 3.306165)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_WindowFixed_36X48_1"
        {
            token outputs:surface.connect = </root/_materials/M_WindowFixed_36X48_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }
    }
}

