#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "Television_25"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "Television_25" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.537467, -0.023359, -0.366449), (0.537467, 0.023723, 0.364438)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 49, 24, 26, 48, 36, 37, 51, 52, 37, 36, 40, 41, 39, 38, 42, 43, 41, 40, 45, 46, 50, 29, 24, 49, 29, 33, 26, 24, 33, 47, 48, 26, 35, 31, 25, 27, 29, 50, 51, 37, 33, 29, 37, 41, 31, 35, 42, 38, 34, 30, 39, 43, 47, 33, 41, 46, 46, 45, 43, 42, 35, 47, 46, 42, 48, 47, 35, 27, 25, 49, 48, 27, 31, 50, 49, 25, 51, 50, 31, 38, 52, 51, 38, 39, 4, 5, 7, 6, 55, 22, 23, 54, 21, 20, 30, 34, 28, 23, 22, 32, 54, 23, 28, 53, 53, 28, 36, 52, 28, 32, 40, 36, 32, 44, 45, 40, 44, 34, 43, 45, 30, 53, 52, 39, 20, 54, 53, 30, 21, 55, 54, 20, 44, 32, 58, 57, 32, 22, 59, 58, 22, 55, 56, 59, 21, 34, 60, 61, 34, 44, 57, 60, 55, 21, 61, 56, 57, 58, 64, 63, 58, 59, 65, 64, 59, 56, 62, 65, 61, 60, 66, 67, 60, 57, 63, 66, 56, 61, 67, 62, 8, 9, 11, 10, 62, 63, 64, 65, 67, 66, 63, 62, 12, 13, 15, 14, 16, 17, 19, 18]
            rel material:binding = </root/_materials/M_Television_25_0>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.0000020720065, 0, -1), (0, 0, -1), (0, 0, -1), (-0.0000020716839, 0, -1), (-0.0000020720065, 0, -1), (-0.0000020720065, 0, -1), (-0.0000020716839, 0, -1), (-0.0000020716839, 0, -1), (0.0000020720065, 0, -1), (0.0000020720065, 0, -1), (0.0000020716839, 0, -1), (0.0000020716839, 0, -1), (-0.0000020720065, 0, 1), (-0.0000020720065, 0, 1), (-0.0000020716839, 0, 1), (-0.0000020716839, 0, 1), (0, 0, -1), (-0.0000020720065, 0, -1), (-0.0000020716839, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0.0000020720065, 0, -1), (0, 0, -1), (0, 0, -1), (0.0000020716839, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0.0000020720065, 0, -1), (0.0000020716839, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (-0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0.99999994, 0, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -1, 0), (0, 0, 1), (0.0000020720065, 0, 1), (0.0000020716839, 0, 1), (0, 0, 1), (0.0000020720065, 0, 1), (0.0000020720065, 0, 1), (0.0000020716839, 0, 1), (0.0000020716839, 0, 1), (0.0000020720065, 0, 1), (0, 0, 1), (0, 0, 1), (0.0000020716839, 0, 1), (0, 0, 1), (-0.0000020720065, 0, 1), (-0.0000020716839, 0, 1), (0, 0, 1), (-0.0000020720065, 0, 1), (0, 0, 1), (0, 0, 1), (-0.0000020716839, 0, 1), (0, -0.99999994, 0), (0, -1, 0), (0, -1, 0), (0, -0.99999994, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0.73424786, -0.6788815), (0, 0.73424786, -0.6788815), (0, 0.73424786, -0.6788815), (0, 0.73424786, -0.6788815), (-0.48464286, 0.87471217, 0), (-0.48464286, 0.87471217, 0), (-0.48464286, 0.87471217, 0), (-0.48464286, 0.87471217, 0), (0, 0.7342026, 0.6789305), (0, 0.7342025, 0.67893046), (0, 0.7342025, 0.67893046), (0, 0.7342026, 0.6789305), (0.48467433, 0.87469476, 0), (0.48467433, 0.87469476, 0), (0.48467433, 0.87469476, 0), (0.48467433, 0.87469476, 0), (0, 0.73424786, -0.6788815), (0, 0.73424786, -0.6788815), (0, 0.73424786, -0.6788815), (0, 0.73424786, -0.6788815), (0, 0.7342025, 0.67893046), (0, 0.7342026, 0.67893046), (0, 0.7342026, 0.67893046), (0, 0.7342025, 0.67893046), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.0008, 0.022124, -0.009258), (-0.0008, 0.022124, -0.009258), (0.0008, 0.023723, -0.009258), (-0.0008, 0.023723, -0.009258), (0.0008, 0.022124, -0.009258), (-0.0008, 0.022124, -0.009258), (0.0008, 0.023723, -0.009258), (-0.0008, 0.023723, -0.009258), (0.0008, 0.022124, -0.009258), (-0.0008, 0.022124, -0.009258), (0.0008, 0.023723, -0.009258), (-0.0008, 0.023723, -0.009258), (0.0008, 0.022124, -0.009258), (-0.0008, 0.022124, -0.009258), (0.0008, 0.023723, -0.009258), (-0.0008, 0.023723, -0.009258), (0.0008, 0.022124, -0.009258), (-0.0008, 0.022124, -0.009258), (0.0008, 0.023723, -0.009258), (-0.0008, 0.023723, -0.009258), (0.537467, 0.022923, 0.364438), (0.537467, -0.023359, 0.364438), (-0.537467, -0.023359, 0.364438), (-0.537467, 0.022923, 0.364438), (-0.537467, 0.022923, -0.366449), (0.537467, 0.022923, -0.366449), (-0.537467, -0.023359, -0.366449), (0.537467, -0.023359, -0.366449), (-0.537467, 0.022923, -0.290065), (-0.537467, 0.022923, -0.297815), (0.537467, 0.022923, -0.290065), (0.537467, 0.022923, -0.297815), (-0.537467, -0.023359, -0.290065), (-0.537467, -0.023359, -0.297815), (0.537467, -0.023359, -0.290065), (0.537467, -0.023359, -0.297815), (-0.531954, 0.017411, -0.290065), (-0.531954, 0.017411, -0.297815), (0.531954, 0.017411, -0.297815), (0.531954, 0.017411, -0.290065), (-0.531954, -0.017847, -0.290065), (-0.531954, -0.017847, -0.297815), (0.531954, -0.017847, -0.297815), (0.531954, -0.017847, -0.290065), (0, -0.023359, -0.290065), (0, -0.017847, -0.290065), (0, -0.017847, -0.297815), (0, -0.023359, -0.297815), (0, -0.023359, -0.366449), (0, 0.022923, -0.366449), (0, 0.022923, -0.297815), (0, 0.017411, -0.297815), (0, 0.017411, -0.290065), (0, 0.022923, -0.290065), (0, 0.022923, 0.364438), (0, -0.023359, 0.364438), (0, -0.023359, 0.351438), (0, -0.023359, -0.277065), (-0.524467, -0.023359, -0.277065), (-0.524467, -0.023359, 0.351438), (0.524467, -0.023359, -0.277065), (0.524467, -0.023359, 0.351438), (0, -0.016149, 0.343641), (0, -0.016149, -0.269267), (-0.511454, -0.016149, -0.269267), (-0.511454, -0.016149, 0.343641), (0.511455, -0.016149, -0.269267), (0.511455, -0.016149, 0.343641)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-44.195423, -18.17474), (-44.19394, -18.17474), (-44.19394, -18.173258), (-44.195423, -18.173258), (-44.323322, -0.047098), (-43.27356, -0.047094), (-43.27356, 0.043306), (-44.323322, 0.043303), (-43.279446, 0.225803), (-43.279446, 0.240942), (-44.318214, 0.240938), (-44.318214, 0.225803), (-43.807217, 0.352271), (-43.80722, 0.36742), (-43.876087, 0.367419), (-43.87608, 0.352271), (-43.87609, 0.381668), (-43.876095, 0.366526), (-43.807213, 0.36653), (-43.807213, 0.381667), (-43.279095, 0.211555), (-43.279102, 0.226694), (-44.318214, 0.22669), (-44.31822, 0.211553), (-44.323322, 0.110836), (-43.273556, 0.110835), (-43.273556, 0.244891), (-44.323326, 0.244887), (-43.92414, 0.310674), (-43.924137, 0.220283), (-43.79009, 0.220283), (-43.790092, 0.310675), (-43.273586, 0.125541), (-44.323326, 0.125539), (-44.32333, -0.008509), (-43.273582, -0.008512), (-43.924137, 0.360553), (-43.92414, 0.270159), (-43.79009, 0.270157), (-43.79009, 0.360553), (-43.273724, 0.162822), (-44.323322, 0.162818), (-44.323322, 0.152057), (-43.28449, 0.152057), (-43.273724, 0.072435), (-43.273724, 0.162822), (-43.28449, 0.152057), (-43.284485, 0.083197), (-45.372925, 0.162816), (-45.372925, 0.072431), (-45.36216, 0.083197), (-45.36216, 0.152057), (-43.891945, 0.340952), (-43.801567, 0.340952), (-43.812336, 0.35173), (-43.881184, 0.351725), (-44.323322, 0.072435), (-43.273724, 0.072435), (-43.284485, 0.083197), (-44.323322, 0.083197), (-44.31822, 0.211553), (-44.318214, 0.22669), (-45.357334, 0.22669), (-45.357338, 0.211559), (-45.372925, 0.072431), (-44.323322, 0.072435), (-44.323322, 0.083197), (-45.36216, 0.083197), (-44.32333, -0.008509), (-44.323326, 0.125539), (-45.373062, 0.125535), (-45.373066, -0.008508), (-45.373096, -0.047099), (-44.323322, -0.047098), (-44.323322, 0.043303), (-45.373096, 0.043302), (-45.37309, 0.110832), (-44.323322, 0.110836), (-44.323326, 0.244887), (-45.37309, 0.244887), (-44.323322, 0.152057), (-44.323322, 0.162818), (-45.372925, 0.162816), (-45.36216, 0.152057), (-44.318214, 0.225803), (-44.318214, 0.240938), (-45.356987, 0.240941), (-45.356987, 0.225806), (-30.558186, -18.175362), (-30.557165, -18.175362), (-30.557165, -18.174343), (-30.558186, -18.174343), (-31.583632, 0.34392), (-31.583632, -0.705797), (-31.493235, -0.705797), (-31.493235, 0.34392), (-30.571926, 0.849083), (-30.662323, 0.849083), (-30.662323, -0.429202), (-30.571926, -0.429202), (-30.535082, -0.429204), (-30.535082, 0.849084), (-30.625479, 0.849084), (-30.625479, -0.429204), (-31.94672, 0.34392), (-31.94672, -0.705825), (-30.668404, -0.705824), (-30.668404, 0.34392), (-31.122877, 0.34392), (-31.122877, -0.705858), (-31.112114, -0.695091), (-31.112114, 0.34392), (-31.122877, -0.705858), (-31.032478, -0.705859), (-31.043247, -0.695091), (-31.112114, -0.695091), (-31.032478, -0.705859), (-31.032478, 0.34392), (-31.043247, 0.34392), (-31.043247, -0.695091), (-31.032478, 0.34392), (-31.032478, 1.393697), (-31.043247, 1.382929), (-31.043247, 0.34392), (-31.122877, 1.393697), (-31.122877, 0.34392), (-31.112114, 0.34392), (-31.112114, 1.382929), (-31.94672, 1.393664), (-31.94672, 0.34392), (-30.668404, 0.34392), (-30.668404, 1.393664), (-31.583632, 1.393635), (-31.583632, 0.34392), (-31.493235, 0.34392), (-31.493235, 1.393635), (-31.519373, 0.34392), (-31.519373, -0.760359), (-31.492672, -0.73365), (-31.492672, 0.34392), (-31.519373, -0.760359), (-30.17464, -0.760359), (-30.201351, -0.73365), (-31.492672, -0.73365), (-30.17464, -0.760359), (-30.17464, 0.34392), (-30.201351, 0.34392), (-30.201351, -0.73365), (-30.17464, 1.448198), (-31.519373, 1.448198), (-31.492672, 1.421489), (-30.201351, 1.421489), (-31.519373, 1.448198), (-31.519373, 0.34392), (-31.492672, 0.34392), (-31.492672, 1.421489), (-30.17464, 0.34392), (-30.17464, 1.448198), (-30.201351, 1.421489), (-30.201351, 0.34392), (-31.492672, 0.34392), (-31.492672, -0.73365), (-31.476648, -0.706913), (-31.476648, 0.34392), (-31.492672, -0.73365), (-30.201351, -0.73365), (-30.21737, -0.706913), (-31.476648, -0.706913), (-30.201351, -0.73365), (-30.201351, 0.34392), (-30.21737, 0.34392), (-30.21737, -0.706913), (-30.201351, 1.421489), (-31.492672, 1.421489), (-31.476648, 1.394753), (-30.21737, 1.394753), (-31.492672, 1.421489), (-31.492672, 0.34392), (-31.476648, 0.34392), (-31.476648, 1.394753), (-30.201351, 0.34392), (-30.201351, 1.421489), (-30.21737, 1.394753), (-30.21737, 0.34392), (-18.56045, -17.567528), (-18.559553, -17.567528), (-18.559553, -17.566631), (-18.56045, -17.566631), (0.5, 0.688262), (0.5, 0.089081), (1, 0.089081), (1, 0.688262), (-0, 0.688262), (-0, 0.089081), (0.5, 0.089081), (0.5, 0.688262), (-7.159453, -17.567528), (-7.158556, -17.567528), (-7.158556, -17.566631), (-7.159453, -17.566631), (-7.166486, -17.567528), (-7.165588, -17.567528), (-7.165588, -17.566631), (-7.166486, -17.566631)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_Television_25_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]
                rel material:binding = </root/_materials/M_Television_25_0>
            }

            def GeomSubset "M_Television_25_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]
                rel material:binding = </root/_materials/M_Television_25_1>
            }

            def GeomSubset "M_Television_25_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [46, 47, 48]
                rel material:binding = </root/_materials/M_Television_25_2>
            }

            def GeomSubset "M_Television_25_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [49]
                rel material:binding = </root/_materials/M_Television_25_3>
            }

            def GeomSubset "M_Television_25_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [50]
                rel material:binding = </root/_materials/M_Television_25_4>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_Television_25_0"
        {
            token outputs:surface.connect = </root/_materials/M_Television_25_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.7977941, 0.8238844, 0.875)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_Television_25_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_Television_25_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_Television_25_1"
        {
            token outputs:surface.connect = </root/_materials/M_Television_25_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_Television_25_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_Television_25_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/MetalBumpy_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_Television_25_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/MetalBumpy_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_Television_25_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_Television_25_2"
        {
            token outputs:surface.connect = </root/_materials/M_Television_25_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0, 0, 0)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_Television_25_3"
        {
            token outputs:surface.connect = </root/_materials/M_Television_25_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.5661765, 0.5661765, 0.5661765)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_Television_25_4"
        {
            token outputs:surface.connect = </root/_materials/M_Television_25_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.8, 0.8, 0.8)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 1
                float inputs:specular = 0
                token outputs:surface
            }
        }
    }
}

