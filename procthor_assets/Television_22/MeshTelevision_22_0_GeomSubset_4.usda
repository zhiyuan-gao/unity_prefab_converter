#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshTelevision_22_0_GeomSubset_4"
    {
        def Mesh "MeshTelevision_22_0_GeomSubset_4"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [16, 17, 19, 18]
            rel material:binding = </root/_materials/M_Television_22_4>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.000842, 0.008313, 0.06547), (-0.000842, 0.008313, 0.06547), (0.000842, 0.009997, 0.06547), (-0.000842, 0.009997, 0.06547), (0.000842, 0.008313, 0.06547), (-0.000842, 0.008313, 0.06547), (0.000842, 0.009997, 0.06547), (-0.000842, 0.009997, 0.06547), (0.000842, 0.008313, 0.06547), (-0.000842, 0.008313, 0.06547), (0.000842, 0.009997, 0.06547), (-0.000842, 0.009997, 0.06547), (0.000842, 0.008313, 0.06547), (-0.000842, 0.008313, 0.06547), (0.000842, 0.009997, 0.06547), (-0.000842, 0.009997, 0.06547), (0.000842, 0.008313, 0.06547), (-0.000842, 0.008313, 0.06547), (0.000842, 0.009997, 0.06547), (-0.000842, 0.009997, 0.06547), (0.561275, -0.039604, 0.385362), (-0.561274, -0.039604, 0.385362), (-0.561274, 0.009155, -0.301392), (0.561275, 0.009155, -0.301392), (-0.561275, -0.039604, -0.301392), (0.561275, -0.039604, -0.301392), (-0.561275, -0.039604, -0.205895), (-0.561275, 0.009155, -0.205895), (-0.561275, 0.009155, 0.385362), (0.561275, 0.009155, 0.385362), (0.561275, 0.009155, -0.205895), (0.561275, -0.039604, -0.205895), (0.551448, -0.039604, 0.375502), (-0.551447, -0.039604, 0.375502), (0.551448, -0.039604, -0.209424), (-0.551448, -0.039604, -0.209424), (0.551448, -0.039604, -0.291533), (-0.551448, -0.039604, -0.291533), (0.551448, -0.067116, 0.375502), (-0.551447, -0.067116, 0.375502), (0.551448, -0.067116, -0.209424), (-0.551448, -0.067116, -0.209424), (0.551448, -0.047706, -0.291533), (-0.551448, -0.047706, -0.291533), (0.551448, -0.057179, -0.271005), (-0.551448, -0.057179, -0.271005), (-0.551448, -0.039604, -0.271005), (-0.561275, -0.039604, -0.277518), (-0.561274, 0.009155, -0.277518), (0.561275, 0.009155, -0.277518), (0.561275, -0.039604, -0.277518), (0.551448, -0.039604, -0.271005), (0.551448, -0.062744, -0.250479), (-0.551448, -0.062744, -0.250479), (-0.551448, -0.039604, -0.250479), (-0.561275, -0.039604, -0.253644), (-0.561275, 0.009155, -0.253644), (0.561275, 0.009155, -0.253644), (0.561275, -0.039604, -0.253644), (0.551448, -0.039604, -0.250479), (0.551448, -0.066019, -0.229951), (-0.551448, -0.066019, -0.229951), (-0.551448, -0.039604, -0.229951), (-0.561275, -0.039604, -0.229769), (-0.561275, 0.009155, -0.229769), (0.561275, 0.009155, -0.229769), (0.561275, -0.039604, -0.229769), (0.551448, -0.039604, -0.229951), (-0.568648, 0.009155, -0.308766), (0.568649, 0.009155, -0.308766), (-0.568649, -0.039604, -0.308766), (0.568649, -0.039604, -0.308766), (-0.568649, -0.039604, -0.205895), (-0.568648, -0.039604, 0.392736), (-0.568649, 0.009155, -0.205895), (-0.568649, 0.009155, 0.392736), (0.568649, -0.039604, 0.392736), (0.568649, 0.009155, 0.392736), (0.568649, 0.009155, -0.205895), (0.568649, -0.039604, -0.205895), (-0.568649, -0.039604, -0.229769), (-0.568649, 0.009155, -0.229769), (0.568649, 0.009155, -0.229769), (0.568649, -0.039604, -0.229769), (-0.568649, -0.039604, -0.277518), (-0.568648, 0.009155, -0.277518), (0.568649, 0.009155, -0.277518), (0.568649, -0.039604, -0.277518), (-0.568649, -0.039604, -0.253644), (-0.568649, 0.009155, -0.253644), (0.568649, 0.009155, -0.253644), (0.568649, -0.039604, -0.253644), (0.561275, -0.049172, -0.301392), (-0.561275, -0.049172, -0.301392), (0.568649, -0.049172, -0.308766), (-0.568649, -0.049172, -0.308766), (-0.561275, -0.049172, -0.205895), (-0.561274, -0.049172, 0.385362), (-0.568649, -0.049172, -0.205895), (-0.568648, -0.049172, 0.392736), (0.561275, -0.049172, -0.205895), (0.561275, -0.049172, 0.385362), (0.568649, -0.049172, 0.392736), (0.568649, -0.049172, -0.205895), (-0.561275, -0.049172, -0.229769), (-0.568649, -0.049172, -0.229769), (0.561275, -0.049172, -0.229769), (0.568649, -0.049172, -0.229769), (-0.561275, -0.049172, -0.277518), (-0.568649, -0.049172, -0.277518), (0.561275, -0.049172, -0.277518), (0.568649, -0.049172, -0.277518), (-0.561275, -0.049172, -0.253644), (-0.568649, -0.049172, -0.253644), (0.561275, -0.049172, -0.253644), (0.568649, -0.049172, -0.253644), (-0.373366, -0.062744, -0.250479), (-0.373366, -0.066019, -0.229951), (-0.373366, -0.067116, -0.209424), (-0.373366, -0.067116, 0.375502), (-0.373366, -0.039604, 0.375502), (-0.373366, -0.039604, 0.385362), (-0.373366, -0.049172, 0.385362), (-0.373366, -0.049172, 0.392736), (-0.373366, -0.039604, 0.392736), (-0.373366, 0.009155, 0.392736), (-0.373366, 0.009155, 0.385362), (-0.373366, 0.009155, -0.205895), (-0.373366, 0.009155, -0.229769), (-0.373366, 0.009155, -0.253644), (-0.373366, 0.009155, -0.277518), (-0.373366, 0.009155, -0.301392), (-0.373366, 0.009155, -0.323622), (-0.373366, -0.039604, -0.323622), (-0.373366, -0.049172, -0.323622), (-0.373366, -0.049172, -0.301392), (-0.373366, -0.039604, -0.301392), (-0.373366, -0.039604, -0.291533), (-0.373366, -0.047706, -0.291533), (-0.373366, -0.057179, -0.271005), (-0.186682, -0.062744, -0.250479), (-0.186682, -0.066019, -0.229951), (-0.186682, -0.067116, -0.209424), (-0.186682, -0.067116, 0.375502), (-0.186682, -0.039604, 0.375502), (-0.186682, -0.039604, 0.385362), (-0.186682, -0.049172, 0.385362), (-0.186683, -0.049172, 0.392736), (-0.186683, -0.039604, 0.392736), (-0.186683, 0.009155, 0.392736), (-0.186682, 0.009155, 0.385362), (-0.186682, 0.009155, -0.205895), (-0.186682, 0.009155, -0.229769), (-0.186682, 0.009155, -0.253644), (-0.186682, 0.009155, -0.277518), (-0.186682, 0.009155, -0.301392), (-0.186683, 0.009155, -0.331049), (-0.186683, -0.039604, -0.331049), (-0.186683, -0.049172, -0.331049), (-0.186682, -0.049172, -0.301392), (-0.186682, -0.039604, -0.301392), (-0.186682, -0.039604, -0.291533), (-0.186682, -0.047706, -0.291533), (-0.186682, -0.057179, -0.271005), (0, -0.062744, -0.250479), (0, -0.066019, -0.229951), (0, -0.067116, -0.209424), (0, -0.067116, 0.375502), (0, -0.039604, 0.375502), (0, -0.039604, 0.385362), (0, -0.049172, 0.385362), (0, -0.049172, 0.392736), (0, -0.039604, 0.392736), (0, 0.009155, 0.392736), (0, 0.009155, 0.385362), (0, 0.009155, -0.205895), (0, 0.009155, -0.229769), (0, 0.009155, -0.253644), (0, 0.009155, -0.277518), (0, 0.009155, -0.301392), (0, 0.009155, -0.334353), (0, -0.039604, -0.334353), (0, -0.049172, -0.334353), (0, -0.049172, -0.301392), (0, -0.039604, -0.301392), (0, -0.039604, -0.291533), (0, -0.047706, -0.291533), (0, -0.057179, -0.271005), (0.186683, -0.062744, -0.250479), (0.186683, -0.066019, -0.229951), (0.186683, -0.067116, -0.209424), (0.186683, -0.067116, 0.375502), (0.186683, -0.039604, 0.375502), (0.186683, -0.039604, 0.385362), (0.186683, -0.049172, 0.385362), (0.186683, -0.049172, 0.392736), (0.186683, -0.039604, 0.392736), (0.186683, 0.009155, 0.392736), (0.186683, 0.009155, 0.385362), (0.186683, 0.009155, -0.205895), (0.186683, 0.009155, -0.229769), (0.186683, 0.009155, -0.253644), (0.186683, 0.009155, -0.277518), (0.186683, 0.009155, -0.301392), (0.186683, 0.009155, -0.331049), (0.186683, -0.039604, -0.331049), (0.186683, -0.049172, -0.331049), (0.186683, -0.049172, -0.301392), (0.186683, -0.039604, -0.301392), (0.186683, -0.039604, -0.291533), (0.186683, -0.047706, -0.291533), (0.186683, -0.057179, -0.271005), (0.373366, -0.062744, -0.250479), (0.373366, -0.066019, -0.229951), (0.373366, -0.067116, -0.209424), (0.373366, -0.067116, 0.375502), (0.373366, -0.039604, 0.375502), (0.373366, -0.039604, 0.385362), (0.373366, -0.049172, 0.385362), (0.373366, -0.049172, 0.392736), (0.373366, -0.039604, 0.392736), (0.373366, 0.009155, 0.392736), (0.373366, 0.009155, 0.385362), (0.373366, 0.009155, -0.205895), (0.373366, 0.009155, -0.229769), (0.373366, 0.009155, -0.253644), (0.373366, 0.009155, -0.277518), (0.373366, 0.009155, -0.301392), (0.373366, 0.009155, -0.323622), (0.373366, -0.039604, -0.323622), (0.373366, -0.049172, -0.323622), (0.373366, -0.049172, -0.301392), (0.373366, -0.039604, -0.301392), (0.373366, -0.039604, -0.291533), (0.373366, -0.047706, -0.291533), (0.373366, -0.057179, -0.271005), (0.521951, -0.067116, 0.346006), (0.373366, -0.067116, 0.346006), (0.521951, -0.067116, -0.179928), (0.373366, -0.067116, -0.179928), (-0.373366, -0.067116, 0.346006), (-0.521951, -0.067116, 0.346006), (-0.373366, -0.067116, -0.179928), (-0.521951, -0.067116, -0.179928), (-0.186682, -0.067116, 0.346006), (-0.186682, -0.067116, -0.179928), (0, -0.067116, 0.346006), (0, -0.067116, -0.179928), (0.186683, -0.067116, 0.346006), (0.186683, -0.067116, -0.179928), (0.51247, -0.057636, 0.336524), (0.373366, -0.057636, 0.336524), (0.51247, -0.057636, -0.170447), (0.373366, -0.057636, -0.170447), (-0.373366, -0.057636, 0.336524), (-0.51247, -0.057636, 0.336524), (-0.373366, -0.057636, -0.170447), (-0.51247, -0.057636, -0.170447), (-0.186682, -0.057636, 0.336524), (-0.186682, -0.057636, -0.170447), (0, -0.057636, 0.336524), (0, -0.057636, -0.170447), (0.186683, -0.057636, 0.336524), (0.186683, -0.057636, -0.170447)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-7.876009, -17.671684), (-7.875269, -17.671684), (-7.875269, -17.670944), (-7.876009, -17.670944)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_Television_22_4"
        {
            token outputs:surface.connect = </root/_materials/M_Television_22_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.8, 0.8, 0.8)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 1
                float inputs:specular = 0
                token outputs:surface
            }
        }
    }
}

