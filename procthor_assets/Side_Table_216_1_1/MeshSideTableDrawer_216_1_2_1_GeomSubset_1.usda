#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshSideTableDrawer_216_1_2_1_GeomSubset_1"
    {
        def Mesh "MeshSideTableDrawer_216_1_2_1_GeomSubset_1"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [12, 14, 13, 12, 15, 14, 9, 12, 13, 9, 8, 12, 8, 15, 12, 8, 10, 15, 10, 14, 15, 10, 11, 14, 11, 13, 14, 11, 9, 13]
            rel material:binding = </root/_materials/M_SideTableDrawer_216_1_2_1>
            normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -0.99999994, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (0.99999994, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.027, -0.163701, 0.354349), (-0.8367, -0.163701, 0.354349), (-0.8367, -0.163701, 0.122849), (-0.027, -0.163701, 0.122849), (-0.049, -0.171701, 0.332349), (-0.8147, -0.171701, 0.332349), (-0.8147, -0.171701, 0.144849), (-0.049, -0.171701, 0.144849), (-0.479112, -0.171701, 0.251949), (-0.348288, -0.171701, 0.251949), (-0.479112, -0.171701, 0.225249), (-0.348288, -0.171701, 0.225249), (-0.479112, -0.194201, 0.251949), (-0.348288, -0.194201, 0.251949), (-0.348288, -0.194201, 0.225249), (-0.479112, -0.194201, 0.225249), (-0.027, 0.148659, 0.354349), (-0.8367, 0.148659, 0.354349), (-0.8367, 0.148659, 0.122849), (-0.027, 0.148659, 0.122849), (-0.8247, -0.151701, 0.354349), (-0.039, -0.151701, 0.354349), (-0.039, 0.136659, 0.354349), (-0.8247, 0.136659, 0.354349), (-0.8247, -0.151701, 0.132762), (-0.039, -0.151701, 0.132762), (-0.039, 0.136659, 0.132762), (-0.8247, 0.136659, 0.132762)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(1.484884, 0.436015), (1.564151, 0.399684), (1.564151, 0.436015), (1.484884, 0.436015), (1.484884, 0.399684), (1.564151, 0.399684), (1.476958, 0.784787), (1.397691, 0.748456), (1.476958, 0.748456), (1.476958, 0.784787), (1.397691, 0.784787), (1.397691, 0.748456), (-0.259306, 1.438734), (-0.222975, 1.402404), (-0.222975, 1.438734), (-0.259306, 1.438734), (-0.259306, 1.402404), (-0.222975, 1.402404), (1.564151, 0.392418), (1.484884, 0.356088), (1.564151, 0.356088), (1.564151, 0.392418), (1.484884, 0.392418), (1.484884, 0.356088), (-0.135782, 1.402404), (-0.172113, 1.438734), (-0.172113, 1.402404), (-0.135782, 1.402404), (-0.135782, 1.438734), (-0.172113, 1.438734)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_SideTableDrawer_216_1_2_1"
        {
            token outputs:surface.connect = </root/_materials/M_SideTableDrawer_216_1_2_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.75735295, 0.63906455, 0.14478807)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_SideTableDrawer_216_1_2_1/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Copper_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_SideTableDrawer_216_1_2_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

