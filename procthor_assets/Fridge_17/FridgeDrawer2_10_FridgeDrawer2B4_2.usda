#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer2B4"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer2B4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.005766, -0.23796, -0.95645), (0.37466, 0.233588, -0.652924)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8]
            int[] faceVertexIndices = [0, 1, 3, 2, 68, 61, 81, 78, 56, 37, 41, 55, 61, 34, 35, 60, 60, 35, 36, 62, 55, 41, 40, 67, 69, 38, 39, 68, 67, 40, 38, 69, 62, 36, 37, 56, 68, 39, 34, 61, 28, 34, 39, 29, 56, 75, 74, 62, 69, 77, 76, 67, 69, 68, 78, 77, 55, 67, 76, 79, 60, 62, 74, 80, 60, 80, 81, 61, 75, 56, 55, 79, 83, 82, 28, 29, 93, 92, 91, 90, 35, 34, 28, 82, 86, 87, 36, 35, 86, 40, 41, 84, 88, 38, 89, 83, 29, 39, 89, 38, 40, 88, 37, 36, 87, 85, 41, 37, 90, 91, 37, 85, 93, 90, 85, 84, 92, 93, 84, 41, 91, 92, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 20, 21, 23, 22, 24, 25, 27, 26, 65, 66, 70, 71, 64, 65, 71, 72, 63, 64, 72, 73, 54, 63, 73, 57, 59, 70, 66, 58, 52, 53, 59, 58, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 74, 75, 57, 73, 72, 71, 70, 59, 76, 77, 52, 58, 77, 78, 52, 76, 58, 66, 65, 64, 63, 54, 79, 74, 59, 53, 80, 80, 53, 81, 54, 57, 75, 79, 78, 81, 53, 52, 83, 33, 30, 82, 85, 44, 43, 84, 86, 82, 30, 87, 86, 30, 31, 88, 84, 43, 47, 49, 51, 42, 32, 83, 89, 33, 88, 32, 33, 89, 87, 31, 45, 50, 48, 46, 44, 85]
            rel material:binding = </root/_materials/M_FridgeDrawer2B4_0>
            normal3f[] normals = [(0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, -0.8603256, 0.50974506), (0, -0.8603256, 0.50974506), (-1.306762e-7, -0.83647543, 0.5480045), (-3.2759272e-7, -0.8364754, 0.54800445), (-0.0359, -0.065798506, 0.99718696), (-0.01440077, -0.02259693, 0.99964094), (0.014401141, -0.022596959, 0.99964094), (0.035900827, -0.065798536, 0.99718696), (-0.0000025946515, 0, 1), (-0.0000027458684, 0, 1), (-0.0000026115868, 0, 1), (-0.000002569475, 0, 1), (-0.000002569475, 0, 1), (-0.0000026115868, 0, 1), (-0.06040805, 0.0019007178, 0.998172), (-0.060481176, 0.0018975763, 0.9981675), (0.035900827, -0.065798536, 0.99718696), (0.014401141, -0.022596959, 0.99964094), (0.06040877, 0.0019007162, 0.998172), (0.06048187, 0.0018979653, 0.99816746), (0.0000022482927, 0, 1), (0.0000022851402, 0, 1), (0.0000024026356, 0, 1), (0.0000022703225, 0, 1), (0.06048187, 0.0018979653, 0.99816746), (0.06040877, 0.0019007162, 0.998172), (0.0000022851402, 0, 1), (0.0000022482927, 0, 1), (-0.060481176, 0.0018975763, 0.9981675), (-0.06040805, 0.0019007178, 0.998172), (-0.01440077, -0.02259693, 0.99964094), (-0.0359, -0.065798506, 0.99718696), (0.0000022703225, 0, 1), (0.0000024026356, 0, 1), (-0.0000027458684, 0, 1), (-0.0000025946515, 0, 1), (0.00008867649, 0.9068404, -0.42147416), (0, 1, 0), (0, 1, 0), (0, 0.9068404, -0.4214742), (0.9994801, -0.0095222695, -0.03080261), (0.99951816, -0.0098947855, -0.029418852), (0.99952364, -0.009694993, -0.029301314), (0.9994815, -0.009394076, -0.030798363), (-0.99453837, 0.063289605, -0.082993336), (-0.99590087, 0.0753074, -0.050103076), (-0.9995227, -0.009789061, -0.029301519), (-0.99948144, -0.009392215, -0.030798037), (-0.99453837, 0.063289605, -0.082993336), (-0.9938724, 0.06807498, -0.08708307), (-0.9949429, 0.07830075, -0.06291075), (-0.99590087, 0.0753074, -0.050103076), (-0.99948007, -0.009522269, -0.03080294), (-0.99948144, -0.009392215, -0.030798037), (-0.9995227, -0.009789061, -0.029301519), (-0.9995034, -0.0097331535, -0.029970951), (0.9945385, 0.063288145, -0.082992174), (0.9994815, -0.009394076, -0.030798363), (0.99952364, -0.009694993, -0.029301314), (0.995901, 0.07530601, -0.050102036), (0.9945385, 0.063288145, -0.082992174), (0.995901, 0.07530601, -0.050102036), (0.99494296, 0.07830067, -0.06291005), (0.9938724, 0.06807514, -0.08708249), (0, 0.9802739, 0.1976441), (0, 0.98027277, 0.19764915), (0, 0.98027277, 0.19764915), (0, 0.98027384, 0.1976441), (0, 0.8224717, -0.568806), (0, 0.8224717, -0.568806), (0.00008867649, 0.9068404, -0.42147416), (0, 0.9068404, -0.4214742), (0, -0.9840343, -0.17797858), (0, -0.9840343, -0.17797858), (0, -0.9840343, -0.17797858), (0, -0.9840343, -0.17797858), (-1, 8.725093e-9, 0), (-1, 1.7450185e-8, 0), (-1, 1.7450185e-8, 0), (-1, 1.2085802e-8, 0), (-1, -5.5208652e-8, 0), (-1, -5.95712e-8, 0), (-1, 0, 0), (-1, 8.725093e-9, 0), (-1, -5.5208652e-8, 0), (1, 0, 0), (1, 0, 0), (1, 4.5770903e-9, 0), (1, 3.727156e-9, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 3.727156e-9, 0), (-1, 0, 0), (-1, 0, 0), (-1, -5.95712e-8, 0), (-1, 0, 0), (0.014401141, -0.022596959, 0.99964094), (-0.01440077, -0.02259693, 0.99964094), (0, 0, 0.99999994), (0, 0, 0.99999994), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0.000066750894, -0.99999994), (0, 0.000066750894, -0.99999994), (0, 0.000066750894, -0.99999994), (0, 0.000066750894, -0.99999994), (1, 4.5770903e-9, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (-8.828647e-8, 0.33490762, 0.94225097), (-0.00000266172, 0.009317549, 0.9999566), (0.00076174625, 0.009321496, 0.99995625), (0, 0.3349077, 0.94225097), (1.8058978e-10, 0.68698597, 0.7266706), (-8.828647e-8, 0.33490762, 0.94225097), (0, 0.3349077, 0.94225097), (0, 0.68698597, 0.7266706), (0, 0.9353965, 0.35360044), (1.8058978e-10, 0.68698597, 0.7266706), (0, 0.68698597, 0.7266706), (1.4225952e-7, 0.93539655, 0.3536005), (3.932364e-7, 0.98068774, 0.19557992), (0, 0.9353965, 0.35360044), (1.4225952e-7, 0.93539655, 0.3536005), (-2.7471106e-7, 0.9806878, 0.19557996), (-6.9849193e-10, 0.0031606453, 0.999995), (0.00076174625, 0.009321496, 0.99995625), (-0.00000266172, 0.009317549, 0.9999566), (0, 0.0031606853, 0.999995), (-5.061738e-7, -0.82454026, 0.56580335), (0, -0.82454026, 0.5658033), (-6.9849193e-10, 0.0031606453, 0.999995), (0, 0.0031606853, 0.999995), (1.9292765e-8, 0.80858874, -0.58837426), (0, 0.008218408, -0.9999662), (0.00008668423, 0.0082184225, -0.9999662), (0, 0.80858874, -0.58837426), (0.00008668423, 0.0082184225, -0.9999662), (0, 0.008218408, -0.9999662), (-0.000030400888, -0.0047473013, -0.9999887), (0, -0.004747294, -0.9999887), (0, -0.9835339, -0.18072318), (-9.991866e-10, -0.9835339, -0.18072318), (0, -0.91595525, -0.40128055), (-5.989617e-7, -0.91595525, -0.40128055), (-5.989617e-7, -0.91595525, -0.40128055), (0, -0.91595525, -0.40128055), (0, -0.68690264, -0.72674936), (1.9066011e-10, -0.68690264, -0.72674936), (1.9066011e-10, -0.68690264, -0.72674936), (0, -0.68690264, -0.72674936), (0, -0.36463547, -0.9311504), (-5.358458e-7, -0.36463547, -0.9311504), (-5.358458e-7, -0.36463547, -0.9311504), (0, -0.36463547, -0.9311504), (0, -0.004747294, -0.9999887), (-0.000030400888, -0.0047473013, -0.9999887), (0.99952364, -0.009694993, -0.029301314), (0.99951816, -0.0098947855, -0.029418852), (0.9995323, -0.010005023, -0.028898124), (0.9995323, -0.010005023, -0.028898124), (0.9995323, -0.010005023, -0.028898124), (0.9995323, -0.010005023, -0.028898124), (0.9995323, -0.010005023, -0.028898124), (0.9995335, -0.009872603, -0.028901633), (-0.9995227, -0.009789061, -0.029301519), (-0.99590087, 0.0753074, -0.050103076), (-0.9974634, 0.06358269, -0.031998463), (-0.9995335, -0.009870915, -0.028902017), (-0.99590087, 0.0753074, -0.050103076), (-0.9949429, 0.07830075, -0.06291075), (-0.9974634, 0.06358269, -0.031998463), (-0.9995227, -0.009789061, -0.029301519), (-0.9995335, -0.009870915, -0.028902017), (-0.9995323, -0.010005054, -0.02889816), (-0.9995323, -0.010005054, -0.02889816), (-0.9995323, -0.010005054, -0.02889816), (-0.9995323, -0.010005054, -0.02889816), (-0.9995323, -0.010005054, -0.02889816), (-0.9995034, -0.0097331535, -0.029970951), (0.99952364, -0.009694993, -0.029301314), (0.9995335, -0.009872603, -0.028901633), (0.9974637, 0.06357973, -0.031998504), (0.995901, 0.07530601, -0.050102036), (0.995901, 0.07530601, -0.050102036), (0.9974637, 0.06357973, -0.031998504), (0.99494296, 0.07830067, -0.06291005), (3.932364e-7, 0.98068774, 0.19557992), (-2.7471106e-7, 0.9806878, 0.19557996), (0, 0.9802739, 0.1976441), (0, 0.98027384, 0.1976441), (-3.2759272e-7, -0.8364754, 0.54800445), (-1.306762e-7, -0.83647543, 0.5480045), (0, -0.82454026, 0.5658033), (-5.061738e-7, -0.82454026, 0.56580335), (0, 0.8224717, -0.568806), (1.9292765e-8, 0.80858874, -0.58837426), (0, 0.80858874, -0.58837426), (0, 0.8224717, -0.568806), (0, -0.9840244, -0.17803349), (-9.991866e-10, -0.9835339, -0.18072318), (0, -0.9835339, -0.18072318), (0, -0.9840244, -0.17803349), (-1, -5.5208652e-8, 0), (-1, 1.2085802e-8, 0), (-1, -1.8385013e-7, 0), (-1, -5.95712e-8, 0), (-1, -5.5208652e-8, 0), (-1, -1.8385013e-7, 0), (-1, -9.803876e-8, 0), (1, 3.727156e-9, 0), (1, 4.5770903e-9, 0), (1, 1.4908624e-8, 0), (1, 1.4908624e-8, 0), (1, 1.4908624e-8, 0), (1, 1.4908624e-8, 0), (1, 1.4908624e-8, 0), (1, 8.77469e-9, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 3.727156e-9, 0), (1, 8.77469e-9, 0), (1, 0, 0), (1, 0, 0), (-1, -5.95712e-8, 0), (-1, -9.803876e-8, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (0.029737, 0.233588, -0.661681), (0.37466, 0.233588, -0.661681), (0.029737, 0.157528, -0.771665), (0.029737, 0.152115, -0.774433), (0.37466, 0.152115, -0.774433), (0.37466, 0.157528, -0.771665), (0.029737, 0.233588, -0.654136), (0.029737, 0.157528, -0.654136), (0.029737, 0.152115, -0.654136), (0.029737, -0.22278, -0.654136), (0.37466, 0.157528, -0.654136), (0.37466, 0.233588, -0.654136), (0.37466, 0.152115, -0.654136), (0.37466, -0.22278, -0.654136), (0.37466, -0.182484, -0.774433), (0.37466, -0.20484, -0.7533), (0.029737, -0.20484, -0.7533), (0.029737, -0.182484, -0.774433), (0.029737, -0.203139, -0.761387), (0.37466, -0.203139, -0.761387), (0.029737, -0.198292, -0.768243), (0.37466, -0.198292, -0.768243), (0.029737, -0.19104, -0.772824), (0.37466, -0.19104, -0.772824), (0.366281, 0.152455, -0.766454), (0.038116, 0.152455, -0.766454), (0.369441, -0.195374, -0.751645), (0.366408, -0.215278, -0.652924), (0.037989, -0.215278, -0.652924), (0.034956, -0.195374, -0.751645), (0.366281, 0.150277, -0.767567), (0.038116, 0.150277, -0.767567), (0.041407, 0.157528, -0.654136), (0.037989, 0.225977, -0.654136), (0.041407, 0.152115, -0.654136), (0.36936, -0.194279, -0.757918), (0.36936, -0.191511, -0.761833), (0.36936, -0.18737, -0.764449), (0.369421, -0.181542, -0.765385), (0.36299, 0.152115, -0.654136), (0.366408, 0.225977, -0.654136), (0.36299, 0.157528, -0.654136), (0.034976, -0.181542, -0.765385), (0.035037, -0.18737, -0.764449), (0.035037, -0.191511, -0.761833), (0.035037, -0.194279, -0.757918), (0.040739, 0.151742, -0.677152), (0.037244, -0.210393, -0.677152), (0.363658, 0.151742, -0.677152), (0.363665, 0.156488, -0.677152), (0.368761, 0.21234, -0.677152), (0.367153, -0.210393, -0.677152), (0.040732, 0.156488, -0.677152), (0.035636, 0.21234, -0.677152), (0.029737, 0.222888, -0.677152), (0.37466, 0.222888, -0.677152), (0.37466, -0.218617, -0.677152), (0.029737, -0.218617, -0.677152), (0.029737, 0.157528, -0.677152), (0.029737, 0.152115, -0.677152), (0.37466, 0.152115, -0.677152), (0.37466, 0.157528, -0.677152), (0.029737, -0.23796, -0.654136), (0.37466, -0.23796, -0.654136), (0.37466, -0.233797, -0.677153), (0.029737, -0.233797, -0.677153)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-170.88591, -111.20602), (-170.88591, -111.2061), (-170.88583, -111.2061), (-170.88583, -111.20602), (-170.12288, -0.680835), (-170.12288, 0.537804), (-170.1735, 0.546534), (-170.1735, -0.689564), (-171.15503, -0.527725), (-171.17693, -0.547626), (-170.26198, -0.547626), (-170.28389, -0.527725), (-171.15503, 0.642752), (-171.17693, 0.662942), (-171.17693, 0.461184), (-171.14598, 0.461184), (-171.14598, 0.461184), (-171.17693, 0.461184), (-171.17693, 0.446827), (-171.14598, 0.446827), (-170.28389, -0.527725), (-170.26198, -0.547626), (-170.26198, 0.446827), (-170.29294, 0.446827), (-170.29294, 0.461184), (-170.26198, 0.461184), (-170.26198, 0.662942), (-170.28389, 0.642752), (-170.29294, 0.446827), (-170.26198, 0.446827), (-170.26198, 0.461184), (-170.29294, 0.461184), (-171.14598, 0.446827), (-171.17693, 0.446827), (-171.17693, -0.547626), (-171.15503, -0.527725), (-170.28389, 0.642752), (-170.26198, 0.662942), (-171.17693, 0.662942), (-171.15503, 0.642752), (-170.2641, 0.426743), (-170.2855, 0.426743), (-170.2855, -0.551186), (-170.2641, -0.551186), (-170.30667, 0.598549), (-170.37091, 0.585599), (-170.37091, -0.374429), (-170.30989, -0.375418), (-170.26645, 0.417096), (-170.32748, 0.41434), (-170.32748, 0.401758), (-170.26645, 0.402747), (-170.26645, 0.417096), (-170.26645, 0.598558), (-170.32748, 0.562405), (-170.32748, 0.41434), (-170.26323, -0.571235), (-170.26645, 0.402747), (-170.32748, 0.401758), (-170.32748, -0.558284), (-170.30989, -0.389767), (-170.30989, -0.375418), (-170.37091, -0.374429), (-170.37091, -0.387011), (-170.30989, -0.389767), (-170.37091, -0.387011), (-170.37091, -0.535074), (-170.30989, -0.571226), (-170.15085, 0.914103), (-170.2157, 0.912112), (-170.2157, 0.033454), (-170.15085, 0.031462), (-170.22025, -0.551186), (-170.22025, 0.426743), (-170.2641, 0.426743), (-170.2641, -0.551186), (-170.24187, 0.398416), (-170.24187, -0.522859), (-170.18039, -0.522859), (-170.18039, 0.398416), (-170.39276, 0.460529), (-170.39276, 0.661976), (-170.41278, 0.661976), (-170.45378, 0.633638), (-170.45378, 0.460529), (-170.45378, 0.446194), (-170.39276, 0.446194), (-170.39276, 0.460529), (-170.45378, 0.460529), (-170.35103, -0.371314), (-170.35103, 0.622014), (-170.412, 0.610981), (-170.412, -0.371314), (-170.35103, -0.385656), (-170.412, -0.385656), (-170.412, -0.558835), (-170.37102, -0.587185), (-170.35103, -0.587185), (-170.412, -0.385656), (-170.35103, -0.385656), (-170.35103, -0.371314), (-170.412, -0.371314), (-170.39276, -0.546722), (-170.39276, 0.446194), (-170.45378, 0.446194), (-170.45378, -0.535694), (-170.26198, -0.547626), (-171.17693, -0.547626), (-171.17693, -0.587893), (-170.26198, -0.587893), (-170.39276, -0.546722), (-170.45378, -0.535694), (-170.45378, -0.575898), (-170.39276, -0.586926), (-170.19563, 0.394708), (-170.19563, -0.519151), (-170.15541, -0.519151), (-170.15541, 0.394708), (-170.412, 0.610981), (-170.35103, 0.622014), (-170.35103, 0.662235), (-170.412, 0.651202), (-141.89804, -110.22088), (-141.89804, -111.91363), (-140.37753, -111.91363), (-140.37753, -110.22088), (-116.78542, -111.56199), (-116.78542, -111.562126), (-116.78532, -111.562126), (-116.78532, -111.56199), (-88.71505, -110.74826), (-88.71505, -113.93459), (-85.85996, -113.93459), (-85.85996, -110.74826), (-69.00104, -112.291985), (-69.00104, -112.292), (-69.00102, -112.292), (-69.00102, -112.291985), (-69.00674, -112.291985), (-69.00674, -112.292), (-69.00672, -112.292), (-69.00672, -112.291985), (-69.012436, -112.291985), (-69.012436, -112.292), (-69.01242, -112.292), (-69.01242, -112.291985), (-70.82248, -0.43351), (-70.82232, -0.418217), (-71.69988, -0.418217), (-71.69972, -0.43351), (-70.82248, -0.444377), (-70.82248, -0.43351), (-71.69972, -0.43351), (-71.69972, -0.444377), (-70.82248, -0.451639), (-70.82248, -0.444377), (-71.69972, -0.444377), (-71.69972, -0.451639), (-71.53506, -0.379006), (-71.51939, -0.378803), (-71.51939, 0.456504), (-71.53506, 0.456707), (-71.69164, 0.452456), (-71.69988, -0.418217), (-70.82232, -0.418217), (-70.83056, 0.452456), (-70.83056, 0.458171), (-71.69164, 0.458171), (-71.69164, 0.452456), (-70.83056, 0.452456), (-71.08028, -0.806315), (-71.08028, -0.792081), (-71.98734, -0.792081), (-71.98734, -0.806315), (-71.98734, -0.792081), (-71.08028, -0.792081), (-71.08028, 0.087831), (-71.98734, 0.087831), (-71.60117, -0.385202), (-71.60117, 0.475343), (-71.62135, 0.475343), (-71.62135, -0.385202), (-71.08028, 0.142147), (-71.98734, 0.142147), (-71.98734, 0.129402), (-71.08028, 0.129402), (-71.08028, 0.129402), (-71.98734, 0.129402), (-71.98734, 0.110329), (-71.08028, 0.110329), (-71.08028, 0.110329), (-71.98734, 0.110329), (-71.98734, 0.087831), (-71.08028, 0.087831), (-71.15616, -0.793168), (-71.15616, 0.103181), (-71.34054, 0.066006), (-71.356064, 0.063296), (-71.36576, 0.056446), (-71.37223, 0.046195), (-71.37455, 0.031769), (-71.37995, -0.78954), (-71.04232, -0.046807), (-71.04232, -0.03506), (-71.26335, -0.045044), (-71.26611, -0.050435), (-71.04232, -0.03506), (-71.04232, 0.103182), (-71.26335, -0.045044), (-71.04232, -0.046807), (-71.26611, -0.050435), (-71.26071, -0.871746), (-71.25839, -0.886172), (-71.251915, -0.896423), (-71.242226, -0.903273), (-71.2267, -0.905982), (-71.04232, -0.943158), (-71.15616, -0.793168), (-71.37995, -0.78954), (-71.3772, -0.794931), (-71.15616, -0.804915), (-71.15616, -0.804915), (-71.3772, -0.794931), (-71.15616, -0.943157), (-71.53506, -0.379006), (-71.53506, 0.456707), (-71.721176, 0.45099), (-71.721176, -0.373289), (-70.82405, 0.615306), (-71.69815, 0.615306), (-71.69164, 0.458171), (-70.83056, 0.458171), (-71.08028, -0.978196), (-71.08028, -0.806315), (-71.98734, -0.806315), (-71.98734, -0.978196), (-71.411194, 0.475343), (-71.60117, 0.475343), (-71.60117, -0.385202), (-71.411194, -0.385202), (-71.80696, -0.024328), (-71.80696, 0.137389), (-72.0408, -0.024328), (-71.80696, -0.03772), (-71.80696, -0.024328), (-72.0408, -0.024328), (-72.04765, -0.03772), (-71.6839, -0.779883), (-71.6839, 0.137386), (-71.87231, 0.103301), (-71.89232, 0.099091), (-71.90928, 0.0871), (-71.920616, 0.069155), (-71.9246, 0.047988), (-71.9246, -0.779883), (-71.6839, -0.95499), (-71.6839, -0.793274), (-71.91775, -0.793274), (-71.6839, -0.779883), (-71.9246, -0.779883), (-71.91775, -0.793274), (-71.6839, -0.793274), (-71.80696, -0.03772), (-72.04765, -0.03772), (-72.04765, -0.865593), (-72.04367, -0.886761), (-72.03233, -0.904706), (-72.01537, -0.916696), (-71.99536, -0.920907), (-71.80696, -0.954992)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer2B4_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
                rel material:binding = </root/_materials/M_FridgeDrawer2B4_0>
            }

            def GeomSubset "M_FridgeDrawer2B4_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [30]
                rel material:binding = </root/_materials/M_FridgeDrawer2B4_1>
            }

            def GeomSubset "M_FridgeDrawer2B4_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer2B4_2>
            }

            def GeomSubset "M_FridgeDrawer2B4_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer2B4_3>
            }

            def GeomSubset "M_FridgeDrawer2B4_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63]
                rel material:binding = </root/_materials/M_FridgeDrawer2B4_4>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer2B4_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2B4_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2B4_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2B4_0/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B4_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Copper_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B4_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer2B4_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2B4_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2B4_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2B4_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B4_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B4_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer2B4_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2B4_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2B4_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2B4_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B4_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B4_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer2B4_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2B4_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2B4_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2B4_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer2B4_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2B4_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }
    }
}

