#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer1_10_FridgeDrawer1B4_1_GeomSubset_2"
    {
        def Mesh "FridgeDrawer1_10_FridgeDrawer1B4_1_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer1B4_2>
            normal3f[] normals = [(0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (-0.005766, 0.047896, -0.95645), (-0.005755, 0.047896, -0.95645), (-0.005766, 0.047906, -0.95645), (-0.005755, 0.047906, -0.95645), (-0.393662, 0.230623, -0.661681), (-0.04874, 0.230623, -0.661681), (-0.393662, 0.154563, -0.771665), (-0.393662, 0.14915, -0.774433), (-0.04874, 0.14915, -0.774433), (-0.04874, 0.154563, -0.771665), (-0.393662, 0.230623, -0.654136), (-0.393662, 0.154563, -0.654136), (-0.393662, 0.14915, -0.654136), (-0.393662, -0.225745, -0.654136), (-0.04874, 0.154563, -0.654136), (-0.04874, 0.230623, -0.654136), (-0.04874, 0.14915, -0.654136), (-0.04874, -0.225745, -0.654136), (-0.04874, -0.185449, -0.774433), (-0.04874, -0.207806, -0.7533), (-0.393662, -0.207806, -0.7533), (-0.393662, -0.185449, -0.774433), (-0.393662, -0.206104, -0.761387), (-0.04874, -0.206104, -0.761387), (-0.393662, -0.201258, -0.768243), (-0.04874, -0.201258, -0.768243), (-0.393662, -0.194005, -0.772824), (-0.04874, -0.194005, -0.772824), (-0.057118, 0.149489, -0.766454), (-0.385284, 0.149489, -0.766454), (-0.053959, -0.198339, -0.751645), (-0.056991, -0.218243, -0.652924), (-0.385411, -0.218243, -0.652924), (-0.388443, -0.198339, -0.751645), (-0.057118, 0.147311, -0.767567), (-0.385284, 0.147311, -0.767567), (-0.381993, 0.154563, -0.654136), (-0.385411, 0.223012, -0.654136), (-0.381993, 0.14915, -0.654136), (-0.05404, -0.197244, -0.757918), (-0.05404, -0.194477, -0.761833), (-0.05404, -0.190335, -0.764449), (-0.053978, -0.184507, -0.765385), (-0.060409, 0.14915, -0.654136), (-0.056991, 0.223012, -0.654136), (-0.060409, 0.154563, -0.654136), (-0.388424, -0.184507, -0.765385), (-0.388362, -0.190335, -0.764449), (-0.388362, -0.194477, -0.761833), (-0.388362, -0.197244, -0.757918), (-0.382661, 0.148777, -0.677152), (-0.386155, -0.213358, -0.677152), (-0.059741, 0.148777, -0.677152), (-0.059735, 0.153523, -0.677152), (-0.054638, 0.209374, -0.677152), (-0.056247, -0.213358, -0.677152), (-0.382667, 0.153523, -0.677152), (-0.387763, 0.209374, -0.677152), (-0.393662, 0.219923, -0.677152), (-0.04874, 0.219923, -0.677152), (-0.04874, -0.221582, -0.677152), (-0.393662, -0.221582, -0.677152), (-0.393662, 0.154563, -0.677152), (-0.393662, 0.14915, -0.677152), (-0.04874, 0.14915, -0.677152), (-0.04874, 0.154563, -0.677152), (-0.393662, -0.240925, -0.654136), (-0.04874, -0.240925, -0.654136), (-0.04874, -0.236761, -0.677153), (-0.393662, -0.236761, -0.677153)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-116.78542, -111.56199), (-116.78542, -111.562126), (-116.78532, -111.562126), (-116.78532, -111.56199)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer1B4_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1B4_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1B4_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1B4_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1B4_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1B4_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

