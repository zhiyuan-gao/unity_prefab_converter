#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshWindowFixed_60X48_0_GeomSubset_0"
    {
        def Mesh "MeshWindowFixed_60X48_0_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 4, 5, 6, 7, 10, 11, 24, 25, 26, 27, 14, 11, 0, 15, 28, 27, 26, 29, 10, 1, 0, 11, 14, 12, 6, 11, 15, 13, 3, 2, 30, 31, 28, 29, 2, 1, 10, 9, 30, 25, 24, 31, 2, 9, 14, 15, 9, 8, 12, 14, 15, 0, 5, 13, 10, 7, 8, 9, 4, 1, 2, 3, 13, 5, 18, 17, 6, 12, 16, 19, 7, 6, 19, 20, 5, 4, 21, 18, 8, 7, 20, 23, 4, 3, 22, 21, 3, 13, 17, 22, 12, 8, 23, 16, 17, 18, 26, 25, 19, 16, 24, 27, 20, 19, 27, 28, 18, 21, 29, 26, 23, 20, 28, 31, 21, 22, 30, 29, 22, 17, 25, 30, 16, 23, 31, 24]
            rel material:binding = </root/_materials/M_WindowFixed_60X48_0>
            normal3f[] normals = [(7.577854e-7, 1, 0), (7.5778513e-7, 1, -9.257387e-9), (6.5058856e-7, 1, -7.947834e-9), (6.5058833e-7, 1, 0), (-6.5058833e-7, -1, 7.947823e-9), (-6.5058856e-7, -1, 1.9869586e-9), (-7.5778513e-7, -1, 2.3143467e-9), (-7.577854e-7, -1, 9.2573815e-9), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1.26728805e-8, 0, -0.99999994), (-1.26728805e-8, 0, -0.99999994), (-1.26728805e-8, 0, -0.99999994), (-1.26728805e-8, 0, -0.99999994), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-7.577854e-7, -1, 9.2573815e-9), (-6.5058833e-7, -1, 7.947823e-9), (-6.5058833e-7, -1, 7.947823e-9), (-7.577854e-7, -1, 9.2573815e-9), (7.577855e-7, 1, 0), (6.505884e-7, 1, 0), (6.5058856e-7, 1, -7.947834e-9), (7.5778513e-7, 1, -9.257387e-9), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (8.682709e-9, 0, 0.99999994), (8.682709e-9, 0, 0.99999994), (8.682709e-9, 0, 0.99999994), (8.682709e-9, 0, 0.99999994), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-7.5778513e-7, -1, 2.3143467e-9), (-6.5058856e-7, -1, 1.9869586e-9), (-6.5058833e-7, -1, 7.947823e-9), (-7.577854e-7, -1, 9.2573815e-9), (7.577855e-7, 1, 0), (7.577854e-7, 1, 0), (6.5058833e-7, 1, 0), (6.505884e-7, 1, 0), (-7.5778513e-7, -1, 2.3143467e-9), (-6.5058856e-7, -1, 1.9869586e-9), (-6.5058856e-7, -1, 1.9869586e-9), (-7.5778513e-7, -1, 2.3143467e-9), (6.5058856e-7, 1, -7.947834e-9), (7.5778513e-7, 1, -9.257387e-9), (7.5778513e-7, 1, -9.257387e-9), (6.5058856e-7, 1, -7.947834e-9), (5.4951967e-9, 0, 1), (5.4951967e-9, 0, 1), (5.4951967e-9, 0, 1), (5.4951967e-9, 0, 1), (-5.4951967e-9, 0, 1), (-5.4951967e-9, 0, 1), (-5.4951967e-9, 0, 1), (-5.4951967e-9, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-7.1457444e-9, 0, -1), (-7.1457444e-9, 0, -1), (-7.1457444e-9, 0, -1), (-7.1457444e-9, 0, -1), (7.1457444e-9, 0, -1), (7.1457444e-9, 0, -1), (7.1457444e-9, 0, -1), (7.1457444e-9, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (7.123073e-7, 1, -5.3058322e-8), (7.123073e-7, 1, -5.3058322e-8), (7.123088e-7, 1, -5.305843e-8), (7.123088e-7, 1, -5.305843e-8), (-7.123073e-7, -1, -5.3058322e-8), (-7.123073e-7, -1, -5.3058322e-8), (-7.123088e-7, -1, -5.305843e-8), (-7.123088e-7, -1, -5.305843e-8), (-7.123083e-7, -1, 5.3058272e-8), (-7.123073e-7, -1, -5.3058322e-8), (-7.123088e-7, -1, -5.305843e-8), (-7.123083e-7, -1, 5.3058272e-8), (7.123073e-7, 1, -5.3058322e-8), (7.123083e-7, 1, 5.3058272e-8), (7.123083e-7, 1, 5.3058272e-8), (7.123088e-7, 1, -5.305843e-8), (-7.123083e-7, -1, 5.3058272e-8), (-7.123083e-7, -1, 5.3058272e-8), (-7.123083e-7, -1, 5.3058272e-8), (-7.123083e-7, -1, 5.3058272e-8), (7.123083e-7, 1, 5.3058272e-8), (7.123083e-7, 1, 5.3058272e-8), (7.123083e-7, 1, 5.3058272e-8), (7.123083e-7, 1, 5.3058272e-8), (7.123083e-7, 1, 5.3058272e-8), (7.123073e-7, 1, -5.3058322e-8), (7.123088e-7, 1, -5.305843e-8), (7.123083e-7, 1, 5.3058272e-8), (-7.123073e-7, -1, -5.3058322e-8), (-7.123083e-7, -1, 5.3058272e-8), (-7.123083e-7, -1, 5.3058272e-8), (-7.123088e-7, -1, -5.305843e-8)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.762, -0.040626, 0.609723), (0.762, -0.040626, -0.609476), (-0.762, -0.040624, -0.609476), (-0.714612, -0.040624, -0.552313), (0.714612, -0.040626, -0.552313), (0.714612, -0.040626, 0.55256), (0.714612, 0.040624, 0.55256), (0.714612, 0.040624, -0.552313), (-0.714612, 0.040626, -0.552313), (-0.762, 0.040626, -0.609476), (0.762, 0.040624, -0.609476), (0.762, 0.040624, 0.609723), (-0.714612, 0.040626, 0.55256), (-0.714612, -0.040624, 0.55256), (-0.762, 0.040626, 0.609723), (-0.762, -0.040624, 0.609723), (-0.714612, 0.028626, 0.55256), (-0.714612, -0.028624, 0.55256), (0.714612, -0.028626, 0.55256), (0.714612, 0.028624, 0.55256), (0.714612, 0.028624, -0.552313), (0.714612, -0.028626, -0.552313), (-0.714612, -0.028624, -0.552313), (-0.714612, 0.028626, -0.552313), (-0.689612, 0.028626, 0.52756), (-0.689612, -0.028624, 0.52756), (0.689612, -0.028626, 0.52756), (0.689612, 0.028624, 0.52756), (0.689612, 0.028624, -0.527313), (0.689612, -0.028626, -0.527313), (-0.689612, -0.028624, -0.527313), (-0.689612, 0.028626, -0.527313), (-0.689611, 0.005013, -0.527313), (0.689612, 0.005011, -0.527313), (-0.689611, 0.005013, 0.52756), (0.689612, 0.005011, 0.52756), (-0.689611, -0.005011, 0.52756), (0.689612, -0.005013, 0.52756), (-0.689611, -0.005011, -0.527313), (0.689612, -0.005013, -0.527313)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-6.007292, -2.991521), (-6.007292, -0.882197), (-6.089278, -0.981096), (-6.089277, -2.892624), (-6.089278, 1.179595), (-6.089278, -0.731934), (-6.007292, -0.830832), (-6.007292, 1.278494), (-10.894144, 2.038272), (-10.894144, 1.939225), (-8.507965, 1.939225), (-8.507965, 2.038272), (-8.643948, 1.328493), (-6.007292, 1.328493), (-6.007292, 1.469064), (-8.643948, 1.469063), (-8.671937, -2.725011), (-10.496961, -2.725011), (-10.496961, -2.824058), (-8.671937, -2.824058), (-8.671937, -2.243261), (-8.671937, -2.102691), (-10.781261, -2.102691), (-10.781261, -2.243261), (-8.643948, 1.278493), (-8.561961, 1.179595), (-6.089278, 1.179595), (-6.007292, 1.278494), (-8.643948, -2.991521), (-8.561961, -2.892624), (-8.561961, -0.981096), (-8.643948, -0.882197), (-10.894145, 1.896202), (-10.894145, 1.797155), (-8.507965, 1.797155), (-8.507965, 1.896203), (-8.643948, 1.519824), (-6.007292, 1.519824), (-6.007292, 1.660394), (-8.643948, 1.660394), (-8.671937, -2.867081), (-10.496961, -2.867081), (-10.496961, -2.966128), (-8.671937, -2.966128), (-8.671937, -2.426854), (-8.671937, -2.286283), (-10.781261, -2.286283), (-10.781261, -2.426854), (-8.643948, -0.830832), (-8.561961, -0.731934), (-8.561961, 1.179595), (-8.643948, 1.278493), (-8.643948, -2.991521), (-6.007292, -2.991521), (-6.089277, -2.892624), (-8.561961, -2.892624), (-6.007292, -0.830832), (-6.089278, -0.731934), (-8.561961, -0.731934), (-8.643948, -0.830832), (-6.089278, -0.981096), (-6.007292, -0.882197), (-8.643948, -0.882197), (-8.561961, -0.981096), (-8.479976, 1.711157), (-6.007292, 1.711157), (-6.007292, 1.731919), (-8.479976, 1.731919), (-6.007292, 1.800253), (-8.479976, 1.800252), (-8.479976, 1.77949), (-6.007292, 1.77949), (-8.671937, -2.469875), (-10.583467, -2.469875), (-10.583467, -2.490636), (-8.671937, -2.490636), (-10.583467, -2.55442), (-8.671937, -2.55442), (-8.671937, -2.533659), (-10.583467, -2.533659), (-8.479976, 1.847823), (-6.007292, 1.847823), (-6.007292, 1.868584), (-8.479976, 1.868584), (-6.007292, 1.936918), (-8.479976, 1.936918), (-8.479976, 1.916156), (-6.007292, 1.916156), (-8.671937, -2.597443), (-10.583467, -2.597443), (-10.583467, -2.618203), (-8.671937, -2.618203), (-10.583467, -2.681987), (-8.671937, -2.681987), (-8.671937, -2.661227), (-10.583467, -2.661227), (-8.479976, 1.98449), (-6.007292, 1.98449), (-6.050544, 2.027742), (-8.436723, 2.027742), (-8.507965, 3.992825), (-10.980649, 3.992825), (-10.937397, 3.949571), (-8.551217, 3.949571), (-8.507965, 2.081294), (-8.507965, 3.992825), (-8.551217, 3.949571), (-8.551217, 2.124547), (-6.007292, 1.98449), (-6.007292, 3.896019), (-6.050545, 3.852767), (-6.050544, 2.027742), (-10.980649, 2.081294), (-8.507965, 2.081294), (-8.551217, 2.124547), (-10.937397, 2.124547), (-6.007292, 3.896019), (-8.479976, 3.896019), (-8.436723, 3.852767), (-6.050545, 3.852767), (-8.479976, 3.896019), (-8.479976, 1.98449), (-8.436723, 2.027742), (-8.436723, 3.852767), (-10.980649, 3.992825), (-10.980649, 2.081294), (-10.937397, 2.124547), (-10.937397, 3.949571)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_WindowFixed_60X48_0"
        {
            token outputs:surface.connect = </root/_materials/M_WindowFixed_60X48_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_WindowFixed_60X48_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_WindowFixed_60X48_0/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/LightWoodCounters.jpg@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_WindowFixed_60X48_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_WindowFixed_60X48_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

