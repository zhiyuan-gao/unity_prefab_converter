#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "RobothorWallDecorPoster"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "RobothorWallDecorPoster" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.429116, 0.014023, -0.566257), (0.425224, 0.015071, 0.285834)]
            int[] faceVertexCounts = [4, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 16, 19, 18, 16, 17, 19, 4, 5, 7, 6, 12, 14, 13, 12, 15, 14, 13, 17, 16, 13, 14, 17, 18, 15, 12, 18, 19, 15, 13, 18, 12, 13, 16, 18, 17, 15, 19, 17, 14, 15, 8, 9, 11, 10]
            rel material:binding = </root/_materials/M_RobothorWallDecorPoster_0>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 2.0397664e-9), (0, 1, 8.2184193e-10), (0, 1, -9.776141e-10), (0, 1, 2.0397664e-9), (0, 1, 3.8392245e-9), (0, 1, 8.2184193e-10), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, -2.818862e-9), (0, -1, -2.1282616e-9), (0, -1, -1.1078999e-9), (0, -1, -2.818862e-9), (0, -1, -3.8392254e-9), (0, -1, -2.1282616e-9), (0.99999994, 0, -0.00026765282), (0.99999994, 0, -0.00026765282), (0.99999994, 0, -0.00026765282), (0.99999994, 0, -0.00026765282), (0.99999994, 0, -0.00026765282), (0.99999994, 0, -0.00026765282), (-1, 0, 0.00026586922), (-0.99999994, 0, 0.0002658692), (-1, 0, 0.00026586922), (-1, 0, 0.00026586922), (-0.99999994, 0, 0.0002658692), (-0.99999994, 0, 0.0002658692), (0.00028327844, 0, 0.99999994), (0.000283323, 0, 0.99999994), (0.00028332302, 0, 1), (0.00028327844, 0, 0.99999994), (0.00028327844, 0, 1), (0.000283323, 0, 0.99999994), (-0.00028327928, 0, -0.99999994), (-0.00028336755, 0, -0.99999994), (-0.00028336764, 0, -1), (-0.00028327928, 0, -0.99999994), (-0.00028327925, 0, -1), (-0.00028336755, 0, -0.99999994), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.001519, 0.014503, -0.566257), (-0.002373, 0.014503, -0.566257), (-0.001519, 0.015071, -0.566257), (-0.002373, 0.015071, -0.566257), (-0.001519, 0.014503, -0.566257), (-0.002373, 0.014503, -0.566257), (-0.001519, 0.015071, -0.566257), (-0.002373, 0.015071, -0.566257), (-0.001519, 0.014503, -0.566257), (-0.002373, 0.014503, -0.566257), (-0.001519, 0.015071, -0.566257), (-0.002373, 0.015071, -0.566257), (0.425073, 0.014787, -0.282388), (-0.429116, 0.014787, -0.282146), (-0.428964, 0.014787, 0.285834), (0.425224, 0.014787, 0.285592), (-0.429116, 0.014023, -0.282146), (-0.428964, 0.014023, 0.285834), (0.425073, 0.014023, -0.282388), (0.425224, 0.014023, 0.285592)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-9.760037, -9.244569), (-9.759528, -9.244569), (-9.759528, -9.24406), (-9.760037, -9.24406), (-9, 0), (-10, 1), (-10, 0), (-9, 0), (-9, 1), (-10, 1), (-19.197617, -9.810215), (-19.197224, -9.810215), (-19.197224, -9.809822), (-19.197617, -9.809822), (-18.547628, -0.856871), (-20.500406, 1.097085), (-20.500753, -0.85604), (-18.547628, -0.856871), (-18.547281, 1.096252), (-20.500406, 1.097085), (-19.033678, -0.497083), (-19.036303, 1.455222), (-19.036303, -0.497083), (-19.033678, -0.497083), (-19.033678, 1.455222), (-19.036303, 1.455222), (-19.025505, -0.497843), (-19.028133, 1.455982), (-19.028133, -0.497843), (-19.025505, -0.497843), (-19.025505, 1.455982), (-19.028133, 1.455982), (-19.01996, -0.496975), (-19.017336, 1.455114), (-19.01996, 1.455113), (-19.01996, -0.496975), (-19.017336, -0.496975), (-19.017336, 1.455114), (-19.011791, -0.498115), (-19.009163, 1.456254), (-19.011791, 1.456254), (-19.011791, -0.498115), (-19.009163, -0.498115), (-19.009163, 1.456254), (-29.683226, -9.683225), (-29.316818, -9.683225), (-29.316818, -9.316775), (-29.683226, -9.316775)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_RobothorWallDecorPoster_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2]
                rel material:binding = </root/_materials/M_RobothorWallDecorPoster_0>
            }

            def GeomSubset "M_RobothorWallDecorPoster_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
                rel material:binding = </root/_materials/M_RobothorWallDecorPoster_1>
            }

            def GeomSubset "M_RobothorWallDecorPoster_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [14]
                rel material:binding = </root/_materials/M_RobothorWallDecorPoster_2>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorWallDecorPoster_0"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecorPoster_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorWallDecorPoster_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Wall_Decor_Photo_3V_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecorPoster_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_RobothorWallDecorPoster_1"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecorPoster_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorWallDecorPoster_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/TexturesCom_WoodWhite.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecorPoster_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_RobothorWallDecorPoster_2"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecorPoster_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (1, 0.97794116, 0.97794116)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorWallDecorPoster_2/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecorPoster_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

