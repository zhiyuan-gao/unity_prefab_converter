#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer2C2"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer2C2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.000957, -0.194316, -1.040654), (0.458975, 0.14668, 0.292855)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 52, 53, 70, 63, 58, 37, 41, 57, 63, 34, 35, 62, 62, 35, 36, 64, 57, 41, 40, 69, 71, 38, 39, 70, 69, 40, 38, 71, 64, 36, 37, 58, 70, 39, 34, 63, 28, 34, 39, 29, 58, 77, 76, 64, 71, 79, 78, 69, 71, 70, 53, 80, 79, 57, 69, 78, 81, 62, 64, 76, 82, 62, 82, 83, 52, 63, 77, 58, 57, 81, 53, 52, 83, 80, 85, 84, 28, 29, 95, 94, 93, 92, 35, 34, 28, 84, 88, 89, 36, 35, 88, 40, 41, 86, 90, 38, 91, 85, 29, 39, 91, 38, 40, 90, 37, 36, 89, 87, 41, 37, 92, 93, 37, 87, 95, 92, 87, 86, 94, 95, 86, 41, 93, 94, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 67, 68, 72, 73, 66, 67, 73, 74, 65, 66, 74, 75, 56, 65, 75, 59, 61, 72, 68, 60, 54, 55, 61, 60, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 76, 77, 59, 75, 74, 73, 72, 61, 78, 79, 54, 60, 79, 80, 54, 78, 60, 68, 67, 66, 65, 56, 81, 76, 61, 55, 82, 82, 55, 83, 56, 59, 77, 81, 80, 83, 55, 54, 85, 33, 30, 84, 87, 44, 43, 86, 88, 84, 30, 89, 88, 30, 31, 90, 86, 43, 47, 49, 51, 42, 32, 85, 91, 33, 90, 32, 33, 91, 89, 31, 45, 50, 48, 46, 44, 87, 20, 21, 23, 22, 24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer2C2_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.0000026284251, -0.88696116, 0.4618442), (-0.0000013466924, -0.88696223, 0.46184215), (-0.0000023006332, -0.96691865, 0.2550849), (-0.0000023006332, -0.96691865, 0.2550849), (-0.032008123, -0.10748045, 0.99369174), (-0.0100027025, -0.03130369, 0.9994598), (0.010004824, -0.03130563, 0.9994598), (0.0320085, -0.10747721, 0.9936921), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.07436727, 0.0029964882, 0.99722636), (-0.0744018, 0.0029996112, 0.99722385), (0.0320085, -0.10747721, 0.9936921), (0.010004824, -0.03130563, 0.9994598), (0.07436943, 0.0029961173, 0.99722624), (0.07440403, 0.0029995681, 0.99722356), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.07440403, 0.0029995681, 0.99722356), (0.07436943, 0.0029961173, 0.99722624), (0, 0, 1), (0, 0, 1), (-0.0744018, 0.0029996112, 0.99722385), (-0.07436727, 0.0029964882, 0.99722636), (-0.0100027025, -0.03130369, 0.9994598), (-0.032008123, -0.10748045, 0.99369174), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.0000021482133, 0.9294264, -0.3690075), (0.0000023143407, 1, 0), (0.0000023143407, 1, 0), (0.0000022937118, 0.9294264, -0.36900774), (0.99960476, -0.012400883, -0.025231602), (0.9996214, -0.013107955, -0.024190407), (0.9996276, -0.012798579, -0.024100712), (0.99960953, -0.012079131, -0.025197797), (-0.9942651, 0.07566568, -0.07557561), (-0.99608135, 0.07689185, -0.043697733), (-0.99962527, -0.012793152, -0.024201008), (-0.99960953, -0.012079262, -0.025197716), (-0.9942651, 0.07566568, -0.07557561), (-0.9934923, 0.08147409, -0.079592146), (-0.9934923, 0.08147409, -0.079592146), (-0.9949613, 0.08369705, -0.055198498), (-0.99608135, 0.07689185, -0.043697733), (-0.99960476, -0.012396627, -0.025231663), (-0.99960953, -0.012079262, -0.025197716), (-0.99962527, -0.012793152, -0.024201008), (-0.999624, -0.013113267, -0.024080098), (0.9942651, 0.07566729, -0.0755755), (0.99960953, -0.012079131, -0.025197797), (0.9996276, -0.012798579, -0.024100712), (0.99608165, 0.076886535, -0.04369913), (0.9942651, 0.07566729, -0.0755755), (0.99608165, 0.076886535, -0.04369913), (0.9949608, 0.08369611, -0.055208877), (0.993492, 0.081463195, -0.07960694), (0.993492, 0.081463195, -0.07960694), (0.0000029527996, 0.9854916, 0.16972405), (0.0000023603682, 0.9854917, 0.16972345), (0.0000023603682, 0.9854917, 0.16972345), (0.0000029527996, 0.98549163, 0.16972405), (-0.0000013466924, -0.88696223, 0.46184215), (0.0000026284251, -0.88696116, 0.4618442), (-0.0000030841466, -0.86772555, 0.49704358), (-0.0000030841466, -0.86772555, 0.49704355), (0.0000019948532, 0.8610037, -0.5085986), (0.0000019948534, 0.8610037, -0.5085986), (0.0000021482133, 0.9294264, -0.3690075), (0.0000022937118, 0.9294264, -0.36900774), (-0.0000034380378, -0.98826796, -0.15272994), (-0.0000034380378, -0.98826796, -0.15272994), (-0.0000034380378, -0.98826796, -0.15272994), (-0.0000034380378, -0.98826796, -0.15272994), (-1, -8.905144e-9, 0), (-1, -1.7810287e-8, 0), (-1, -1.7810287e-8, 0), (-1, -1.193006e-8, 0), (-1, 9.92848e-8, 0), (-1, 0.0000021006942, -9.4744973e-7), (-1, 0.0000019970896, 1.5414794e-7), (-1, -8.905144e-9, 0), (-1, 9.92848e-8, 0), (1, -0.0000019594154, -1.5156486e-7), (1, -0.000001768207, -1.3677449e-7), (1, -0.0000027533251, -3.1669725e-7), (1, -0.000002001978, -2.3825685e-7), (1, -1.4248228e-7, 0), (1, -7.124114e-8, 0), (1, -1.9088093e-7, 0), (1, -2.8496456e-7, 0), (1, -2.8496456e-7, 0), (1, -7.124114e-8, 0), (1, -1.4248228e-7, 0), (1, -0.0000019594154, -1.5156486e-7), (1, -0.000002001978, -2.3825685e-7), (-1, 0.0000018022046, 1.391055e-7), (-1, 0.0000019970896, 1.5414794e-7), (-1, 0.0000021006942, -9.4744973e-7), (-1, 0.0000027521464, -0.0000011575836), (0.010004824, -0.03130563, 0.9994598), (-0.0100027025, -0.03130369, 0.9994598), (1.4934574e-8, 0, 1), (1.4934574e-8, 0, 1), (-1, 0.0000018022046, 1.391055e-7), (-1, 0.0000027521464, -0.0000011575836), (-1, 0, 0), (-1, 0, 0), (-1.9157532e-8, 0, -1), (-1.9157532e-8, 0, -1), (-1.9157532e-8, 0, -1), (-1.9157532e-8, 0, -1), (1, -0.0000027533251, -3.1669725e-7), (1, -0.000001768207, -1.3677449e-7), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1.4003308e-7, 0.38422596, 0.92323905), (-0.0000030607916, 0.015402853, 0.9998814), (0.0008138517, 0.015412457, 0.9998809), (0.000001769481, 0.38423687, 0.9232345), (0.000002986113, 0.7418897, 0.67052203), (1.4003308e-7, 0.38422596, 0.92323905), (0.000001769481, 0.38423687, 0.9232345), (-1.576509e-7, 0.7418598, 0.6705551), (0.000003340176, 0.9515841, 0.3073883), (0.000002986113, 0.7418897, 0.67052203), (-1.576509e-7, 0.7418598, 0.6705551), (4.1146995e-7, 0.9515805, 0.30739954), (-2.169545e-7, 0.9857881, 0.16799332), (0.000003340176, 0.9515841, 0.3073883), (4.1146995e-7, 0.9515805, 0.30739954), (-4.2666215e-8, 0.9857881, 0.1679931), (-9.820797e-7, 0.005366479, 0.9999856), (0.0008138517, 0.015412457, 0.9998809), (-0.0000030607916, 0.015402853, 0.9998814), (-5.657837e-7, 0.0053669214, 0.9999856), (-0.000003232155, -0.8626862, 0.5057394), (-0.0000020316788, -0.8626868, 0.50573856), (-9.820797e-7, 0.005366479, 0.9999856), (-5.657837e-7, 0.0053669214, 0.9999856), (-0.000084229854, 0.8492922, -0.527923), (-2.5536815e-7, 0.013520986, -0.99990857), (7.937046e-7, 0.013571173, -0.9999079), (0.0000020010848, 0.84929043, -0.5279259), (7.937046e-7, 0.013571173, -0.9999079), (-2.5536815e-7, 0.013520986, -0.99990857), (-2.4559046e-7, -0.007846989, -0.99996924), (-2.5998958e-7, -0.007846825, -0.99996924), (-0.0000030383849, -0.98789674, -0.15511262), (-0.000003038509, -0.9878968, -0.1551124), (-7.5923936e-8, -0.9365172, -0.3506219), (-0.0000033470676, -0.93649924, -0.35066986), (-0.0000033470676, -0.93649924, -0.35066986), (-7.5923936e-8, -0.9365172, -0.3506219), (-1.0163876e-7, -0.74199873, -0.6704012), (-0.0000022082859, -0.7419939, -0.67040664), (-0.0000022082859, -0.7419939, -0.67040664), (-1.0163876e-7, -0.74199873, -0.6704012), (-9.4829386e-7, -0.41665432, -0.909065), (-9.49255e-7, -0.41664737, -0.90906817), (-9.49255e-7, -0.41664737, -0.90906817), (-9.4829386e-7, -0.41665432, -0.909065), (-2.5998958e-7, -0.007846825, -0.99996924), (-2.4559046e-7, -0.007846989, -0.99996924), (0.9996276, -0.012798579, -0.024100712), (0.9996214, -0.013107955, -0.024190407), (0.99962664, -0.013203856, -0.02392176), (0.99962664, -0.013203856, -0.02392176), (0.99962664, -0.013203856, -0.02392176), (0.99962664, -0.013203856, -0.02392176), (0.99962664, -0.013203856, -0.02392176), (0.9996301, -0.012973067, -0.023900803), (-0.99962527, -0.012793152, -0.024201008), (-0.99608135, 0.07689185, -0.043697733), (-0.9980028, 0.057613365, -0.025902996), (-0.9996303, -0.0129638035, -0.023900218), (-0.99608135, 0.07689185, -0.043697733), (-0.9949613, 0.08369705, -0.055198498), (-0.9980028, 0.057613365, -0.025902996), (-0.99962527, -0.012793152, -0.024201008), (-0.9996303, -0.0129638035, -0.023900218), (-0.99962676, -0.013199155, -0.02392073), (-0.99962676, -0.013199155, -0.02392073), (-0.99962676, -0.013199155, -0.02392073), (-0.99962676, -0.013199155, -0.02392073), (-0.99962676, -0.013199155, -0.02392073), (-0.999624, -0.013113267, -0.024080098), (0.9996276, -0.012798579, -0.024100712), (0.9996301, -0.012973067, -0.023900803), (0.9980038, 0.057600282, -0.02589903), (0.99608165, 0.076886535, -0.04369913), (0.99608165, 0.076886535, -0.04369913), (0.9980038, 0.057600282, -0.02589903), (0.9949608, 0.08369611, -0.055208877), (-2.169545e-7, 0.9857881, 0.16799332), (-4.2666215e-8, 0.9857881, 0.1679931), (0.0000029527996, 0.9854916, 0.16972405), (0.0000029527996, 0.98549163, 0.16972405), (-0.0000030841466, -0.86772555, 0.49704355), (-0.0000030841466, -0.86772555, 0.49704358), (-0.0000020316788, -0.8626868, 0.50573856), (-0.000003232155, -0.8626862, 0.5057394), (0.0000019948532, 0.8610037, -0.5085986), (-0.000084229854, 0.8492922, -0.527923), (0.0000020010848, 0.84929043, -0.5279259), (0.0000019948534, 0.8610037, -0.5085986), (-0.0000024591038, -0.98826975, -0.1527181), (-0.000003038509, -0.9878968, -0.1551124), (-0.0000030383849, -0.98789674, -0.15511262), (-0.0000024591038, -0.98826975, -0.1527181), (-1, 9.92848e-8, 0), (-1, -1.193006e-8, 0), (-1, 3.3120645e-7, 0), (-1, 0.0000021006942, -9.4744973e-7), (-1, 9.92848e-8, 0), (-1, 3.3120645e-7, 0), (-1, 0.0000025752504, -0.0000024738374), (1, -0.000002001978, -2.3825685e-7), (1, -0.0000027533251, -3.1669725e-7), (1, -0.0000040890814, -6.498977e-7), (1, -0.0000040890814, -6.498977e-7), (1, -0.0000040890814, -6.498977e-7), (1, -0.0000040890814, -6.498977e-7), (1, -0.0000040890814, -6.498977e-7), (1, -0.0000024683118, -3.9230085e-7), (1, -1.9088093e-7, 0), (1, -7.124114e-8, 0), (1, 0, 0), (1, -0.000002001978, -2.3825685e-7), (1, -0.0000024683118, -3.9230085e-7), (1, 0, 0), (1, -7.124114e-8, 0), (-1, 0.0000021006942, -9.4744973e-7), (-1, 0.0000025752504, -0.0000024738374), (-1, 0.000003993648, -0.000004098095), (-1, 0.000003993648, -0.000004098095), (-1, 0.000003993648, -0.000004098095), (-1, 0.000003993648, -0.000004098095), (-1, 0.000003993648, -0.000004098095), (-1, 0.0000027521464, -0.0000011575836), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (0.027587, 0.14668, 0.283476), (0.458975, 0.146679, 0.283476), (0.027587, 0.077098, 0.165681), (0.027587, 0.072147, 0.162717), (0.458975, 0.072145, 0.162717), (0.458975, 0.077097, 0.165681), (0.027587, 0.14668, 0.291556), (0.027587, 0.077098, 0.291556), (0.027587, 0.072147, 0.291556), (0.027586, -0.180427, 0.291556), (0.458975, 0.077097, 0.291556), (0.458975, 0.146679, 0.291556), (0.458975, 0.072145, 0.291556), (0.458974, -0.180428, 0.291556), (0.458974, -0.143564, 0.162717), (0.458974, -0.164016, 0.185349), (0.027586, -0.164015, 0.18535), (0.027587, -0.143563, 0.162717), (0.027586, -0.162458, 0.176689), (0.458974, -0.16246, 0.176689), (0.027586, -0.158025, 0.169346), (0.458974, -0.158026, 0.169346), (0.027587, -0.15139, 0.164439), (0.458974, -0.151391, 0.164439), (0.032275, 0.138313, 0.286234), (0.454288, 0.138312, 0.286234), (0.451699, 0.072456, 0.171263), (0.034863, 0.072457, 0.171263), (0.454442, -0.155356, 0.187123), (0.451809, -0.173565, 0.292855), (0.034752, -0.173564, 0.292855), (0.032119, -0.155354, 0.187123), (0.451699, 0.070463, 0.17007), (0.034863, 0.070464, 0.17007), (0.037721, 0.077098, 0.291556), (0.034753, 0.139717, 0.291556), (0.037721, 0.072147, 0.291556), (0.454371, -0.154354, 0.180404), (0.454371, -0.151823, 0.176211), (0.454371, -0.148034, 0.173409), (0.454425, -0.142702, 0.172407), (0.448841, 0.072145, 0.291556), (0.45181, 0.139716, 0.291556), (0.448841, 0.077097, 0.291556), (0.032136, -0.142701, 0.172407), (0.032189, -0.148032, 0.173409), (0.032189, -0.151821, 0.176211), (0.032189, -0.154353, 0.180404), (0.037141, 0.071805, 0.266906), (0.034106, -0.169095, 0.266906), (0.449421, 0.071804, 0.266906), (0.449427, 0.076146, 0.266906), (0.453852, 0.12724, 0.266906), (0.452455, -0.169096, 0.266906), (0.037135, 0.076147, 0.266906), (0.03271, 0.127242, 0.266906), (0.027587, 0.136892, 0.266906), (0.458975, 0.136891, 0.266906), (0.458974, -0.176619, 0.266906), (0.027586, -0.176618, 0.266906), (0.027587, 0.077098, 0.266906), (0.027587, 0.072147, 0.266906), (0.458975, 0.072145, 0.266906), (0.458975, 0.077097, 0.266906), (0.027586, -0.194314, 0.291556), (0.458974, -0.194316, 0.291556), (0.458974, -0.190506, 0.266906), (0.027586, -0.190505, 0.266906)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-169.52118, -113.841446), (-169.52118, -113.84153), (-169.5211, -113.84153), (-169.5211, -113.841446), (-170.1911, 0.694077), (-170.1911, -0.603539), (-170.17474, -0.595919), (-170.17474, 0.686457), (-171.11841, 0.65881), (-171.13832, 0.679603), (-171.13832, -0.572192), (-171.11841, -0.5514), (-170.20932, 0.65881), (-170.18913, 0.679603), (-170.39102, 0.679603), (-170.39102, 0.650198), (-170.39102, 0.650198), (-170.39102, 0.679603), (-170.4054, 0.679603), (-170.4054, 0.650198), (-171.11841, -0.5514), (-171.13832, -0.572192), (-170.4054, -0.572192), (-170.4054, -0.542786), (-170.39102, -0.542786), (-170.39102, -0.572192), (-170.18913, -0.572192), (-170.20932, -0.5514), (-170.4054, -0.542786), (-170.4054, -0.572192), (-170.39102, -0.572192), (-170.39102, -0.542786), (-170.4054, 0.650198), (-170.4054, 0.679603), (-171.13832, 0.679603), (-171.11841, 0.65881), (-170.20932, -0.5514), (-170.18913, -0.572192), (-170.18913, 0.679603), (-170.20932, 0.65881), (-170.3597, 0.711423), (-170.38432, 0.711423), (-170.38432, -0.604011), (-170.3597, -0.604011), (-169.96524, 0.401357), (-170.04045, 0.388406), (-170.04045, -0.309712), (-169.969, -0.310701), (-169.91367, 0.219933), (-169.9851, 0.217176), (-169.9851, 0.204592), (-169.91367, 0.205581), (-169.91367, 0.219933), (-169.91367, 0.40143), (-169.92908, 0.39736), (-169.9851, 0.36527), (-169.9851, 0.217176), (-169.90988, -0.50659), (-169.91367, 0.205581), (-169.9851, 0.204592), (-169.9851, -0.493637), (-169.969, -0.32505), (-169.969, -0.310701), (-170.04045, -0.309712), (-170.04045, -0.322294), (-169.969, -0.32505), (-170.04045, -0.322294), (-170.04045, -0.470364), (-169.98442, -0.502449), (-169.969, -0.506518), (-170.12253, 0.652286), (-170.19821, 0.650401), (-170.19821, -0.566457), (-170.12253, -0.568342), (-170.1911, -0.603539), (-170.1911, 0.694077), (-170.25052, 0.692739), (-170.25052, -0.602201), (-170.30917, -0.604011), (-170.30917, 0.711423), (-170.3597, 0.711423), (-170.3597, -0.604011), (-170.33157, 0.682141), (-170.33157, -0.57473), (-170.25977, -0.57473), (-170.25977, 0.682141), (-170.07051, 0.264642), (-170.07051, 0.466176), (-170.0939, 0.466176), (-170.14189, 0.437825), (-170.14189, 0.264642), (-170.14189, 0.250301), (-170.07051, 0.250301), (-170.07051, 0.264642), (-170.14189, 0.264642), (-170.01941, -0.305579), (-170.01941, 0.425949), (-170.0908, 0.414917), (-170.0908, -0.305579), (-170.01941, -0.31992), (-170.0908, -0.31992), (-170.0908, -0.493101), (-170.04283, -0.521451), (-170.01941, -0.521451), (-170.0908, -0.31992), (-170.01941, -0.31992), (-170.01941, -0.305579), (-170.0908, -0.305579), (-170.07051, -0.481234), (-170.07051, 0.250301), (-170.14189, 0.250301), (-170.14189, -0.470202), (-171.13832, -0.572192), (-171.13832, 0.679603), (-171.17862, 0.679603), (-171.17862, -0.572192), (-170.07051, -0.481234), (-170.14189, -0.470202), (-170.14189, -0.510423), (-170.07051, -0.521456), (-170.27437, 0.678265), (-170.27437, -0.570853), (-170.23413, -0.570853), (-170.23413, 0.678265), (-170.0908, 0.414917), (-170.01941, 0.425949), (-170.01941, 0.466171), (-170.0908, 0.455137), (-143.95483, -107.93224), (-143.95483, -113.63171), (-138.40872, -113.63171), (-138.40872, -107.93224), (-118.538795, -109.61047), (-118.538795, -113.51364), (-114.740005, -113.51364), (-114.740005, -109.61047), (-88.714554, -110.74826), (-88.714554, -113.93459), (-85.61387, -113.93459), (-85.61387, -110.74826), (-68.99982, -112.29217), (-68.99982, -112.292175), (-68.99981, -112.292175), (-68.99981, -112.29217), (-71.56355, -0.999075), (-71.54901, -0.99922), (-71.54901, 0.152274), (-71.56355, 0.152129), (-71.57388, -0.999075), (-71.56355, -0.999075), (-71.56355, 0.152129), (-71.57388, 0.152129), (-71.58079, -0.999075), (-71.57388, -0.999075), (-71.57388, 0.152129), (-71.58079, 0.152129), (-71.36335, -0.998659), (-71.34505, -0.998466), (-71.34505, 0.151562), (-71.36335, 0.151753), (-70.96776, 0.144839), (-71.54901, 0.152274), (-71.54901, -0.99922), (-70.96776, -0.991786), (-70.962326, -0.991786), (-70.962326, 0.144839), (-70.96776, 0.144839), (-70.96776, -0.991786), (-72.07719, -1.061297), (-72.06242, -1.061297), (-72.06242, 0.225055), (-72.07719, 0.225055), (-72.06242, 0.225055), (-72.06242, -1.061297), (-71.4192, -1.061297), (-71.4192, 0.225055), (-71.67225, -1.005045), (-71.67226, 0.168804), (-71.695816, 0.168804), (-71.695816, -1.005045), (-71.362854, -1.061297), (-71.362854, 0.225055), (-71.376076, 0.225055), (-71.376076, -1.061297), (-71.376076, -1.061297), (-71.376076, 0.225055), (-71.39586, 0.225055), (-71.39586, -1.061297), (-71.39586, -1.061297), (-71.39586, 0.225055), (-71.4192, 0.225055), (-71.4192, -1.061297), (-71.35958, -0.237214), (-71.35958, 0.414557), (-71.57544, 0.377382), (-71.59361, 0.374673), (-71.60496, 0.367823), (-71.61254, 0.357571), (-71.61525, 0.343145), (-71.621574, -0.233586), (-71.47922, 0.26457), (-71.47922, 0.276317), (-71.73798, 0.266333), (-71.74121, 0.260942), (-71.47922, 0.276317), (-71.47922, 0.414556), (-71.73798, 0.266333), (-71.47922, 0.26457), (-71.74121, 0.260942), (-71.734886, -0.315789), (-71.73218, -0.330214), (-71.724594, -0.340466), (-71.71325, -0.347316), (-71.695076, -0.350025), (-71.47922, -0.3872), (-71.35958, -0.237214), (-71.621574, -0.233586), (-71.61835, -0.238977), (-71.35958, -0.248961), (-71.35958, -0.248961), (-71.61835, -0.238977), (-71.35958, -0.3872), (-71.36335, -0.998659), (-71.36335, 0.151753), (-71.58068, 0.146341), (-71.58068, -0.993246), (-70.97623, -0.53498), (-70.97623, 0.687762), (-71.25392, 0.68151), (-71.25392, -0.528728), (-72.255486, -1.061297), (-72.07719, -1.061297), (-72.07719, 0.225055), (-72.255486, 0.225055), (-71.450325, 0.168804), (-71.67226, 0.168804), (-71.67225, -1.005045), (-71.450325, -1.005045), (-71.09744, 0.275313), (-71.09744, 0.437029), (-71.37121, 0.275313), (-71.09744, 0.261921), (-71.09744, 0.275313), (-71.37121, 0.275313), (-71.37923, 0.261921), (-71.22572, -0.235729), (-71.22572, 0.43707), (-71.4463, 0.402985), (-71.46973, 0.398774), (-71.489586, 0.386784), (-71.50285, 0.368839), (-71.507515, 0.347671), (-71.507515, -0.235729), (-71.22572, -0.410837), (-71.22572, -0.249121), (-71.4995, -0.249121), (-71.22572, -0.235729), (-71.507515, -0.235729), (-71.4995, -0.249121), (-71.22572, -0.249121), (-71.09744, 0.261921), (-71.37923, 0.261921), (-71.37923, -0.321479), (-71.374565, -0.342646), (-71.3613, -0.360591), (-71.34144, -0.372582), (-71.31801, -0.376792), (-71.09744, -0.410878), (5.646933, -121.22408), (7.358486, -121.22408), (7.358486, -119.51253), (5.646933, -119.51253), (-5.253075, -117.71076), (-3.54152, -117.71076), (-3.54152, -115.99921), (-5.253075, -115.99921)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer2C2_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
                rel material:binding = </root/_materials/M_FridgeDrawer2C2_0>
            }

            def GeomSubset "M_FridgeDrawer2C2_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer2C2_1>
            }

            def GeomSubset "M_FridgeDrawer2C2_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer2C2_2>
            }

            def GeomSubset "M_FridgeDrawer2C2_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33]
                rel material:binding = </root/_materials/M_FridgeDrawer2C2_3>
            }

            def GeomSubset "M_FridgeDrawer2C2_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]
                rel material:binding = </root/_materials/M_FridgeDrawer2C2_4>
            }

            def GeomSubset "M_FridgeDrawer2C2_5" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [63]
                rel material:binding = </root/_materials/M_FridgeDrawer2C2_5>
            }

            def GeomSubset "M_FridgeDrawer2C2_6" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [64]
                rel material:binding = </root/_materials/M_FridgeDrawer2C2_6>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer2C2_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C2_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.36764705, 0.36764705, 0.36764705)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C2_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Copper_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C2_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer2C2_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C2_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C2_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C2_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C2_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C2_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer2C2_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C2_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C2_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C2_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C2_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C2_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer2C2_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C2_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C2_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C2_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer2C2_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C2_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_FridgeDrawer2C2_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C2_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C2_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C2_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C2_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C2_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer2C2_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2C2_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2C2_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2C2_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C2_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2C2_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

