#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer4C2"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer4C2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.000957, -0.194316, -1.040654), (0.458975, 0.14668, 0.11961)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 52, 53, 70, 63, 58, 37, 41, 57, 63, 34, 35, 62, 62, 35, 36, 64, 57, 41, 40, 69, 71, 38, 39, 70, 69, 40, 38, 71, 64, 36, 37, 58, 70, 39, 34, 63, 28, 34, 39, 29, 58, 77, 76, 64, 71, 79, 78, 69, 71, 70, 53, 80, 79, 57, 69, 78, 81, 62, 64, 76, 82, 62, 82, 83, 52, 63, 77, 58, 57, 81, 53, 52, 83, 80, 85, 84, 28, 29, 95, 94, 93, 92, 35, 34, 28, 84, 88, 89, 36, 35, 88, 40, 41, 86, 90, 38, 91, 85, 29, 39, 91, 38, 40, 90, 37, 36, 89, 87, 41, 37, 92, 93, 37, 87, 95, 92, 87, 86, 94, 95, 86, 41, 93, 94, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 67, 68, 72, 73, 66, 67, 73, 74, 65, 66, 74, 75, 56, 65, 75, 59, 61, 72, 68, 60, 54, 55, 61, 60, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 76, 77, 59, 75, 74, 73, 72, 61, 78, 79, 54, 60, 79, 80, 54, 78, 60, 68, 67, 66, 65, 56, 81, 76, 61, 55, 82, 82, 55, 83, 56, 59, 77, 81, 80, 83, 55, 54, 85, 33, 30, 84, 87, 44, 43, 86, 88, 84, 30, 89, 88, 30, 31, 90, 86, 43, 47, 49, 51, 42, 32, 85, 91, 33, 90, 32, 33, 91, 89, 31, 45, 50, 48, 46, 44, 87, 20, 21, 23, 22, 24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer4C2_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.0000011199154, -0.8869556, 0.46185464), (-0.000005412847, -0.8869567, 0.46185258), (-0.000002301083, -0.9669068, 0.25513), (-0.000002301083, -0.9669068, 0.25513), (-0.032008138, -0.10748045, 0.99369174), (-0.010002727, -0.03130369, 0.9994598), (0.01000437, -0.031305637, 0.99945986), (0.032007653, -0.10747721, 0.9936922), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.0743673, 0.0029964882, 0.99722636), (-0.074401826, 0.0029996112, 0.99722385), (0.032007653, -0.10747721, 0.9936922), (0.01000437, -0.031305637, 0.99945986), (0.07436855, 0.0029961173, 0.9972263), (0.07440318, 0.0029995688, 0.99722373), (3.540799e-7, 0, 1), (3.595812e-7, 0, 1), (3.6612514e-7, 0, 1), (3.6100064e-7, 0, 1), (0.07440318, 0.0029995688, 0.99722373), (0.07436855, 0.0029961173, 0.9972263), (3.595812e-7, 0, 1), (3.540799e-7, 0, 1), (-0.074401826, 0.0029996112, 0.99722385), (-0.0743673, 0.0029964882, 0.99722636), (-0.010002727, -0.03130369, 0.9994598), (-0.032008138, -0.10748045, 0.99369174), (3.6100064e-7, 0, 1), (3.6612514e-7, 0, 1), (0, 0, 1), (0, 0, 1), (-0.0000020958796, 0.9294264, -0.36900762), (0.0000023143386, 1, 0), (0.0000023143386, 1, 0), (0.000002288135, 0.92942625, -0.36900783), (0.9996047, -0.01240088, -0.025231615), (0.9996214, -0.01310796, -0.02419042), (0.9996276, -0.012798583, -0.024100719), (0.99960953, -0.012079201, -0.025197208), (-0.9942599, 0.07570591, -0.07560297), (-0.99608123, 0.076894015, -0.043697797), (-0.9996252, -0.012791354, -0.024201008), (-0.99960953, -0.012079341, -0.02519772), (-0.9942599, 0.07570591, -0.07560297), (-0.9934922, 0.081475705, -0.07959245), (-0.9934922, 0.081475705, -0.07959245), (-0.9949613, 0.08369683, -0.055198465), (-0.99608123, 0.076894015, -0.043697797), (-0.9996048, -0.012396786, -0.02523168), (-0.99960953, -0.012079341, -0.02519772), (-0.9996252, -0.012791354, -0.024201008), (-0.9996224, -0.013165284, -0.024116486), (0.994265, 0.075667344, -0.07557631), (0.99960953, -0.012079201, -0.025197208), (0.9996276, -0.012798583, -0.024100719), (0.99608165, 0.07688677, -0.0436992), (0.994265, 0.075667344, -0.07557631), (0.99608165, 0.07688677, -0.0436992), (0.99496084, 0.08369568, -0.055208858), (0.9934919, 0.081464194, -0.07960724), (0.9934919, 0.081464194, -0.07960724), (0.0000029506307, 0.9854916, 0.16972406), (0.0000023550765, 0.9854917, 0.1697235), (0.0000023550765, 0.9854917, 0.1697235), (0.0000029506307, 0.98549163, 0.16972408), (-0.000005412847, -0.8869567, 0.46185258), (-0.0000011199154, -0.8869556, 0.46185464), (-0.0000030893893, -0.86773115, 0.49703375), (-0.0000030893896, -0.8677312, 0.4970338), (0.0000019941924, 0.8610037, -0.5085987), (0.0000019941926, 0.86100376, -0.50859874), (-0.0000020958796, 0.9294264, -0.36900762), (0.000002288135, 0.92942625, -0.36900783), (-0.0000034326479, -0.988268, -0.15272999), (-0.0000034326479, -0.988268, -0.15272999), (-0.0000034326479, -0.988268, -0.15272999), (-0.0000034326479, -0.988268, -0.15272999), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, -1.4308532e-8, 0), (-1, 0.0000019826396, -9.4744064e-7), (-1, 0.0000019970898, 1.5414797e-7), (-1, 0, 0), (-1, -1.4308532e-8, 0), (1, -0.0000019594158, -1.515649e-7), (1, -0.0000017682074, -1.3677453e-7), (1, -0.0000027952826, -3.166954e-7), (1, -0.0000020357154, -2.382555e-7), (1, 1.4248226e-7, 0), (1, 7.124114e-8, 0), (1, 1.9088094e-7, 0), (1, 2.8496453e-7, 0), (1, 2.8496453e-7, 0), (1, 7.124114e-8, 0), (1, 1.4248226e-7, 0), (1, -0.0000019594158, -1.515649e-7), (1, -0.0000020357154, -2.382555e-7), (-1, 0.000001802205, 1.3910552e-7), (-1, 0.0000019970898, 1.5414797e-7), (-1, 0.0000019826396, -9.4744064e-7), (-1, 0.0000027521357, -0.0000011575723), (0.01000437, -0.031305637, 0.99945986), (-0.010002727, -0.03130369, 0.9994598), (-1.4180255e-8, 0, 1), (-1.4180255e-8, 0, 1), (-1, 0.000001802205, 1.3910552e-7), (-1, 0.0000027521357, -0.0000011575723), (-1, 0, 0), (-1, 0, 0), (-4.6007966e-9, 0, -1), (-4.6007966e-9, 0, -1), (-4.6007966e-9, 0, -1), (-4.6007966e-9, 0, -1), (1, -0.0000027952826, -3.166954e-7), (1, -0.0000017682074, -1.3677453e-7), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1.6664853e-7, 0.3843103, 0.92320395), (-0.000002611312, 0.015312334, 0.9998828), (0.0008147123, 0.01541426, 0.99988085), (0.0000017752776, 0.38432133, 0.9231994), (0.0000029916923, 0.741891, 0.6705204), (1.6664853e-7, 0.3843103, 0.92320395), (0.0000017752776, 0.38432133, 0.9231994), (-1.2046848e-7, 0.7418906, 0.67052096), (0.0000033400331, 0.95158404, 0.30738866), (0.0000029916923, 0.741891, 0.6705204), (-1.2046848e-7, 0.7418906, 0.67052096), (4.110043e-7, 0.95158046, 0.30739987), (-2.1567394e-7, 0.9857881, 0.16799323), (0.0000033400331, 0.95158404, 0.30738866), (4.110043e-7, 0.95158046, 0.30739987), (-4.0992745e-8, 0.9857882, 0.16799302), (0.0000014367979, 0.0052367575, 0.9999863), (0.0008147123, 0.01541426, 0.99988085), (-0.000002611312, 0.015312334, 0.9998828), (-5.539239e-7, 0.005237192, 0.99998635), (-0.0000032316893, -0.8626877, 0.505737), (-0.0000020339296, -0.8626882, 0.5057362), (0.0000014367979, 0.0052367575, 0.9999863), (-5.539239e-7, 0.005237192, 0.99998635), (0.0000018071984, 0.849272, -0.52795565), (-2.3848173e-7, 0.013534382, -0.99990845), (-0.00009631257, 0.0135311335, -0.99990845), (0.0000020096977, 0.8492701, -0.5279586), (-0.00009631257, 0.0135311335, -0.99990845), (-2.3848173e-7, 0.013534382, -0.99990845), (-2.3762993e-7, -0.007805556, -0.9999696), (-2.5187066e-7, -0.0078053996, -0.9999696), (-0.000002851672, -0.9878975, -0.15510818), (0.0000018613227, -0.9878975, -0.15510798), (1.166768e-8, -0.9365732, -0.35047194), (-0.00000324974, -0.9365553, -0.3505199), (-0.00000324974, -0.9365553, -0.3505199), (1.166768e-8, -0.9365732, -0.35047194), (-4.793799e-7, -0.7419985, -0.67040145), (-0.0000022178403, -0.7419936, -0.67040694), (-0.0000022178403, -0.7419936, -0.67040694), (-4.793799e-7, -0.7419985, -0.67040145), (2.6312978e-7, -0.4168044, -0.90899616), (-9.589066e-7, -0.41679752, -0.90899944), (-9.589066e-7, -0.41679752, -0.90899944), (2.6312978e-7, -0.4168044, -0.90899616), (-2.5187066e-7, -0.0078053996, -0.9999696), (-2.3762993e-7, -0.007805556, -0.9999696), (0.9996276, -0.012798583, -0.024100719), (0.9996214, -0.01310796, -0.02419042), (0.99962664, -0.013203871, -0.023921764), (0.99962664, -0.013203871, -0.023921764), (0.99962664, -0.013203871, -0.023921764), (0.99962664, -0.013203871, -0.023921764), (0.99962664, -0.013203871, -0.023921764), (0.99963015, -0.012973102, -0.023900807), (-0.9996252, -0.012791354, -0.024201008), (-0.99608123, 0.076894015, -0.043697797), (-0.9980054, 0.05757111, -0.025900982), (-0.9996304, -0.012960965, -0.023900224), (-0.99608123, 0.076894015, -0.043697797), (-0.9949613, 0.08369683, -0.055198465), (-0.9980054, 0.05757111, -0.025900982), (-0.9996252, -0.012791354, -0.024201008), (-0.9996304, -0.012960965, -0.023900224), (-0.99962676, -0.013199156, -0.023920732), (-0.99962676, -0.013199156, -0.023920732), (-0.99962676, -0.013199156, -0.023920732), (-0.99962676, -0.013199156, -0.023920732), (-0.99962676, -0.013199156, -0.023920732), (-0.9996224, -0.013165284, -0.024116486), (0.9996276, -0.012798583, -0.024100719), (0.99963015, -0.012973102, -0.023900807), (0.9980038, 0.057600245, -0.025898978), (0.99608165, 0.07688677, -0.0436992), (0.99608165, 0.07688677, -0.0436992), (0.9980038, 0.057600245, -0.025898978), (0.99496084, 0.08369568, -0.055208858), (-2.1567394e-7, 0.9857881, 0.16799323), (-4.0992745e-8, 0.9857882, 0.16799302), (0.0000029506307, 0.9854916, 0.16972406), (0.0000029506307, 0.98549163, 0.16972408), (-0.0000030893896, -0.8677312, 0.4970338), (-0.0000030893893, -0.86773115, 0.49703375), (-0.0000020339296, -0.8626882, 0.5057362), (-0.0000032316893, -0.8626877, 0.505737), (0.0000019941924, 0.8610037, -0.5085987), (0.0000018071984, 0.849272, -0.52795565), (0.0000020096977, 0.8492701, -0.5279586), (0.0000019941926, 0.86100376, -0.50859874), (-0.000002285803, -0.9882696, -0.152719), (0.0000018613227, -0.9878975, -0.15510798), (-0.000002851672, -0.9878975, -0.15510818), (-0.000002285803, -0.9882696, -0.152719), (-1, -1.4308532e-8, 0), (-1, 0, 0), (-1, -4.568407e-8, 0), (-1, 0.0000019826396, -9.4744064e-7), (-1, -1.4308532e-8, 0), (-1, -4.568407e-8, 0), (-1, 0.000002388221, -0.0000024739563), (1, -0.0000020357154, -2.382555e-7), (1, -0.0000027952826, -3.166954e-7), (1, -0.0000042240295, -6.498922e-7), (1, -0.0000042240295, -6.498922e-7), (1, -0.0000042240295, -6.498922e-7), (1, -0.0000042240295, -6.498922e-7), (1, -0.0000042240295, -6.498922e-7), (1, -0.0000025499166, -3.923199e-7), (1, 1.9088094e-7, 0), (1, 7.124114e-8, 0), (1, 0, 0), (1, -0.0000020357154, -2.382555e-7), (1, -0.0000025499166, -3.923199e-7), (1, 0, 0), (1, 7.124114e-8, 0), (-1, 0.0000019826396, -9.4744064e-7), (-1, 0.000002388221, -0.0000024739563), (-0.99999994, 0.0000039936126, -0.0000040980585), (-0.99999994, 0.0000039936126, -0.0000040980585), (-0.99999994, 0.0000039936126, -0.0000040980585), (-0.99999994, 0.0000039936126, -0.0000040980585), (-0.99999994, 0.0000039936126, -0.0000040980585), (-1, 0.0000027521357, -0.0000011575723), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (0.027587, 0.14668, 0.110231), (0.458975, 0.146679, 0.110231), (0.027587, 0.077098, -0.007564), (0.027587, 0.072147, -0.010529), (0.458975, 0.072145, -0.010529), (0.458975, 0.077097, -0.007564), (0.027587, 0.14668, 0.118311), (0.027587, 0.077098, 0.118311), (0.027587, 0.072147, 0.118311), (0.027586, -0.180427, 0.118311), (0.458975, 0.077097, 0.118311), (0.458975, 0.146679, 0.118311), (0.458975, 0.072145, 0.118311), (0.458974, -0.180428, 0.118311), (0.458974, -0.143564, -0.010529), (0.458974, -0.164016, 0.012105), (0.027586, -0.164015, 0.012105), (0.027587, -0.143563, -0.010529), (0.027586, -0.162458, 0.003444), (0.458974, -0.16246, 0.003444), (0.027586, -0.158025, -0.003899), (0.458974, -0.158026, -0.003899), (0.027587, -0.15139, -0.008806), (0.458974, -0.151391, -0.008806), (0.032275, 0.138313, 0.11299), (0.454288, 0.138312, 0.11299), (0.451699, 0.072456, -0.001982), (0.034863, 0.072457, -0.001982), (0.454442, -0.155356, 0.013878), (0.451809, -0.173565, 0.11961), (0.034752, -0.173564, 0.11961), (0.032119, -0.155354, 0.013878), (0.451699, 0.070463, -0.003175), (0.034863, 0.070464, -0.003175), (0.037721, 0.077098, 0.118311), (0.034753, 0.139717, 0.118311), (0.037721, 0.072147, 0.118311), (0.454371, -0.154354, 0.007159), (0.454371, -0.151823, 0.002966), (0.454371, -0.148034, 0.000165), (0.454425, -0.142702, -0.000838), (0.448841, 0.072145, 0.118311), (0.45181, 0.139716, 0.118311), (0.448841, 0.077097, 0.118311), (0.032136, -0.142701, -0.000838), (0.032189, -0.148032, 0.000165), (0.032189, -0.151821, 0.002966), (0.032189, -0.154353, 0.007159), (0.037141, 0.071805, 0.093661), (0.034106, -0.169095, 0.093661), (0.449421, 0.071804, 0.093661), (0.449427, 0.076146, 0.093661), (0.453852, 0.12724, 0.093661), (0.452455, -0.169096, 0.093661), (0.037135, 0.076147, 0.093661), (0.03271, 0.127242, 0.093661), (0.027587, 0.136892, 0.093661), (0.458975, 0.136891, 0.093661), (0.458974, -0.176619, 0.093661), (0.027586, -0.176618, 0.093661), (0.027587, 0.077098, 0.093661), (0.027587, 0.072147, 0.093661), (0.458975, 0.072145, 0.093661), (0.458975, 0.077097, 0.093661), (0.027586, -0.194314, 0.118311), (0.458974, -0.194316, 0.118311), (0.458974, -0.190506, 0.093661), (0.027586, -0.190505, 0.093661)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-169.52118, -113.841446), (-169.52118, -113.84153), (-169.5211, -113.84153), (-169.5211, -113.841446), (-170.1911, 0.694089), (-170.1911, -0.60355), (-170.17474, -0.59593), (-170.17474, 0.686468), (-171.11833, 0.658713), (-171.13826, 0.679502), (-171.13826, -0.572091), (-171.11833, -0.551302), (-170.2094, 0.658713), (-170.18918, 0.679502), (-170.3911, 0.679502), (-170.3911, 0.650101), (-170.3911, 0.650101), (-170.3911, 0.679502), (-170.40546, 0.679502), (-170.40546, 0.650101), (-171.11833, -0.551302), (-171.13826, -0.572091), (-170.40546, -0.572091), (-170.40546, -0.54269), (-170.3911, -0.54269), (-170.3911, -0.572091), (-170.18918, -0.572091), (-170.2094, -0.551302), (-170.40546, -0.54269), (-170.40546, -0.572091), (-170.3911, -0.572091), (-170.3911, -0.54269), (-170.40546, 0.650101), (-170.40546, 0.679502), (-171.13826, 0.679502), (-171.11833, 0.658713), (-170.2094, -0.551302), (-170.18918, -0.572091), (-170.18918, 0.679502), (-170.2094, 0.658713), (-170.3597, 0.711396), (-170.38432, 0.711396), (-170.38432, -0.603984), (-170.3597, -0.603984), (-169.96524, 0.401348), (-170.04045, 0.388397), (-170.04045, -0.309706), (-169.96902, -0.310695), (-169.91367, 0.219945), (-169.98509, 0.217188), (-169.98509, 0.204604), (-169.91367, 0.205593), (-169.91367, 0.219945), (-169.91367, 0.40145), (-169.92908, 0.39738), (-169.98509, 0.365288), (-169.98509, 0.217188), (-169.9099, -0.50661), (-169.91367, 0.205593), (-169.98509, 0.204604), (-169.98509, -0.493657), (-169.96902, -0.325044), (-169.96902, -0.310695), (-170.04045, -0.309706), (-170.04045, -0.322288), (-169.96902, -0.325044), (-170.04045, -0.322288), (-170.04045, -0.470355), (-169.98442, -0.502439), (-169.96902, -0.506508), (-170.12253, 0.652314), (-170.19821, 0.650428), (-170.19821, -0.566485), (-170.12253, -0.56837), (-170.1911, -0.60355), (-170.1911, 0.694089), (-170.25052, 0.692751), (-170.25052, -0.602212), (-170.30917, -0.603984), (-170.30917, 0.711396), (-170.3597, 0.711396), (-170.3597, -0.603984), (-170.33157, 0.68201), (-170.33157, -0.574598), (-170.25974, -0.574598), (-170.25974, 0.68201), (-170.07051, 0.264661), (-170.07051, 0.466207), (-170.0939, 0.466207), (-170.14189, 0.437854), (-170.14189, 0.264661), (-170.14189, 0.250319), (-170.07051, 0.250319), (-170.07051, 0.264661), (-170.14189, 0.264661), (-170.01941, -0.305582), (-170.01941, 0.425954), (-170.0908, 0.414922), (-170.0908, -0.305582), (-170.01941, -0.319923), (-170.0908, -0.319923), (-170.0908, -0.493105), (-170.04282, -0.521456), (-170.01941, -0.521456), (-170.0908, -0.319923), (-170.01941, -0.319923), (-170.01941, -0.305582), (-170.0908, -0.305582), (-170.07051, -0.481263), (-170.07051, 0.250319), (-170.14189, 0.250319), (-170.14189, -0.47023), (-171.13826, -0.572091), (-171.13826, 0.679502), (-171.17854, 0.679502), (-171.17854, -0.572091), (-170.07051, -0.481263), (-170.14189, -0.47023), (-170.14189, -0.510453), (-170.07051, -0.521487), (-170.27437, 0.678222), (-170.27437, -0.57081), (-170.23413, -0.57081), (-170.23413, 0.678222), (-170.0908, 0.414922), (-170.01941, 0.425954), (-170.01941, 0.466176), (-170.0908, 0.455143), (-143.95483, -107.93224), (-143.95483, -113.63171), (-138.40872, -113.63171), (-138.40872, -107.93224), (-118.538795, -109.61047), (-118.538795, -113.51364), (-114.740005, -113.51364), (-114.740005, -109.61047), (-88.714554, -110.74826), (-88.714554, -113.93459), (-85.61387, -113.93459), (-85.61387, -110.74826), (-68.99982, -112.29217), (-68.99982, -112.292175), (-68.99981, -112.292175), (-68.99981, -112.29217), (-71.56355, -0.999075), (-71.54901, -0.99922), (-71.54901, 0.152274), (-71.56355, 0.152129), (-71.57388, -0.999075), (-71.56355, -0.999075), (-71.56355, 0.152129), (-71.57388, 0.152129), (-71.58079, -0.999075), (-71.57388, -0.999075), (-71.57388, 0.152129), (-71.58079, 0.152129), (-71.36335, -0.998661), (-71.34505, -0.998468), (-71.34505, 0.151564), (-71.36335, 0.151755), (-70.96776, 0.144839), (-71.54901, 0.152274), (-71.54901, -0.99922), (-70.96776, -0.991786), (-70.962326, -0.991786), (-70.962326, 0.144839), (-70.96776, 0.144839), (-70.96776, -0.991786), (-72.07719, -1.061298), (-72.06242, -1.061298), (-72.06242, 0.225056), (-72.07719, 0.225056), (-72.06242, 0.225056), (-72.06242, -1.061298), (-71.4192, -1.061298), (-71.4192, 0.225056), (-71.67225, -1.005046), (-71.67225, 0.168804), (-71.695816, 0.168804), (-71.695816, -1.005046), (-71.362854, -1.061298), (-71.362854, 0.225056), (-71.376076, 0.225056), (-71.376076, -1.061298), (-71.376076, -1.061298), (-71.376076, 0.225056), (-71.39586, 0.225056), (-71.39586, -1.061298), (-71.39586, -1.061298), (-71.39586, 0.225056), (-71.4192, 0.225056), (-71.4192, -1.061298), (-71.35958, -0.237214), (-71.35958, 0.414556), (-71.57544, 0.377381), (-71.59362, 0.374672), (-71.604965, 0.367822), (-71.61254, 0.357571), (-71.61526, 0.343145), (-71.62158, -0.233586), (-71.47922, 0.26457), (-71.47922, 0.276317), (-71.73798, 0.266333), (-71.74121, 0.260942), (-71.47922, 0.276317), (-71.47922, 0.414556), (-71.73798, 0.266333), (-71.47922, 0.26457), (-71.74121, 0.260942), (-71.734886, -0.315789), (-71.73218, -0.330215), (-71.724594, -0.340466), (-71.71325, -0.347316), (-71.695076, -0.350025), (-71.47922, -0.3872), (-71.35958, -0.237214), (-71.62158, -0.233586), (-71.61835, -0.238977), (-71.35958, -0.24896), (-71.35958, -0.24896), (-71.61835, -0.238977), (-71.35958, -0.3872), (-71.36335, -0.998661), (-71.36335, 0.151755), (-71.58068, 0.146343), (-71.58068, -0.993247), (-70.97623, -0.534979), (-70.97623, 0.687761), (-71.25392, 0.681509), (-71.25392, -0.528726), (-72.255486, -1.061298), (-72.07719, -1.061298), (-72.07719, 0.225056), (-72.255486, 0.225056), (-71.450325, 0.168804), (-71.67225, 0.168804), (-71.67225, -1.005046), (-71.450325, -1.005046), (-71.09744, 0.275314), (-71.09744, 0.43703), (-71.37121, 0.275314), (-71.09744, 0.261922), (-71.09744, 0.275314), (-71.37121, 0.275314), (-71.37923, 0.261922), (-71.22572, -0.235729), (-71.22572, 0.43707), (-71.4463, 0.402985), (-71.46973, 0.398774), (-71.489586, 0.386784), (-71.50285, 0.368839), (-71.507515, 0.347671), (-71.507515, -0.235729), (-71.22572, -0.410837), (-71.22572, -0.249121), (-71.4995, -0.249121), (-71.22572, -0.235729), (-71.507515, -0.235729), (-71.4995, -0.249121), (-71.22572, -0.249121), (-71.09744, 0.261922), (-71.37923, 0.261922), (-71.37923, -0.321479), (-71.374565, -0.342646), (-71.3613, -0.360592), (-71.34144, -0.372582), (-71.31801, -0.376793), (-71.09744, -0.410878), (5.646933, -121.22408), (7.358486, -121.22408), (7.358486, -119.51253), (5.646933, -119.51253), (-5.253075, -117.71076), (-3.54152, -117.71076), (-3.54152, -115.99921), (-5.253075, -115.99921)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer4C2_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
                rel material:binding = </root/_materials/M_FridgeDrawer4C2_0>
            }

            def GeomSubset "M_FridgeDrawer4C2_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer4C2_1>
            }

            def GeomSubset "M_FridgeDrawer4C2_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer4C2_2>
            }

            def GeomSubset "M_FridgeDrawer4C2_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33]
                rel material:binding = </root/_materials/M_FridgeDrawer4C2_3>
            }

            def GeomSubset "M_FridgeDrawer4C2_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]
                rel material:binding = </root/_materials/M_FridgeDrawer4C2_4>
            }

            def GeomSubset "M_FridgeDrawer4C2_5" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [63]
                rel material:binding = </root/_materials/M_FridgeDrawer4C2_5>
            }

            def GeomSubset "M_FridgeDrawer4C2_6" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [64]
                rel material:binding = </root/_materials/M_FridgeDrawer4C2_6>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer4C2_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C2_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.36764705, 0.36764705, 0.36764705)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C2_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Copper_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C2_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer4C2_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C2_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C2_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C2_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C2_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C2_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C2_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C2_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C2_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C2_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C2_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C2_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C2_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C2_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C2_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C2_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer4C2_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C2_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_FridgeDrawer4C2_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C2_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C2_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C2_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C2_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C2_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C2_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C2_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C2_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C2_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C2_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C2_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

