#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer3_14_FridgeDrawer3C2_3_GeomSubset_5"
    {
        def Mesh "FridgeDrawer3_14_FridgeDrawer3C2_3_GeomSubset_5"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [20, 21, 23, 22]
            rel material:binding = </root/_materials/M_FridgeDrawer3C2_5>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.460904, 0.146682, 0.110231), (-0.029516, 0.146681, 0.110231), (-0.460904, 0.0771, -0.007564), (-0.460904, 0.072148, -0.010529), (-0.029516, 0.072147, -0.010529), (-0.029516, 0.077098, -0.007564), (-0.460904, 0.146682, 0.118311), (-0.460904, 0.0771, 0.118311), (-0.460904, 0.072148, 0.118311), (-0.460905, -0.180426, 0.118311), (-0.029516, 0.077098, 0.118311), (-0.029516, 0.146681, 0.118311), (-0.029516, 0.072147, 0.118311), (-0.029517, -0.180427, 0.118311), (-0.029517, -0.143563, -0.010529), (-0.029517, -0.164015, 0.012105), (-0.460905, -0.164014, 0.012105), (-0.460905, -0.143562, -0.010529), (-0.460905, -0.162457, 0.003444), (-0.029517, -0.162458, 0.003444), (-0.460905, -0.158023, -0.003899), (-0.029517, -0.158025, -0.003899), (-0.460905, -0.151388, -0.008806), (-0.029517, -0.15139, -0.008806), (-0.456217, 0.138315, 0.11299), (-0.034203, 0.138313, 0.11299), (-0.036792, 0.072457, -0.001982), (-0.453628, 0.072458, -0.001982), (-0.034049, -0.155354, 0.013878), (-0.036682, -0.173564, 0.11961), (-0.453739, -0.173562, 0.11961), (-0.456372, -0.155353, 0.013878), (-0.036792, 0.070465, -0.003175), (-0.453628, 0.070466, -0.003175), (-0.45077, 0.0771, 0.118311), (-0.453738, 0.139719, 0.118311), (-0.45077, 0.072148, 0.118311), (-0.034119, -0.154353, 0.007159), (-0.034119, -0.151821, 0.002966), (-0.034119, -0.148032, 0.000165), (-0.034066, -0.1427, -0.000838), (-0.03965, 0.072147, 0.118311), (-0.036682, 0.139718, 0.118311), (-0.03965, 0.077098, 0.118311), (-0.456355, -0.142699, -0.000838), (-0.456302, -0.148031, 0.000165), (-0.456302, -0.15182, 0.002966), (-0.456302, -0.154352, 0.007159), (-0.45135, 0.071807, 0.093661), (-0.454385, -0.169093, 0.093661), (-0.03907, 0.071805, 0.093661), (-0.039064, 0.076147, 0.093661), (-0.034638, 0.127242, 0.093661), (-0.036036, -0.169095, 0.093661), (-0.451356, 0.076148, 0.093661), (-0.455781, 0.127243, 0.093661), (-0.460904, 0.136893, 0.093661), (-0.029516, 0.136892, 0.093661), (-0.029517, -0.176618, 0.093661), (-0.460905, -0.176617, 0.093661), (-0.460904, 0.0771, 0.093661), (-0.460904, 0.072148, 0.093661), (-0.029516, 0.072147, 0.093661), (-0.029516, 0.077098, 0.093661), (-0.460905, -0.194313, 0.118311), (-0.029517, -0.194314, 0.118311), (-0.029517, -0.190505, 0.093661), (-0.460905, -0.190504, 0.093661)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(5.646933, -121.22408), (7.358486, -121.22408), (7.358486, -119.51253), (5.646933, -119.51253)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer3C2_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C2_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer3C2_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C2_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C2_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C2_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

