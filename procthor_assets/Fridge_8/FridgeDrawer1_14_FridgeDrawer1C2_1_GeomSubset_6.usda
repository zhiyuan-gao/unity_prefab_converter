#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer1_14_FridgeDrawer1C2_1_GeomSubset_6"
    {
        def Mesh "FridgeDrawer1_14_FridgeDrawer1C2_1_GeomSubset_6"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer1C2_6>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.000957, 0.030103, -1.040654), (0.000948, 0.030103, -1.040654), (0.000957, 0.030112, -1.040654), (0.000948, 0.030112, -1.040654), (0.000957, 0.030103, -1.040654), (0.000948, 0.030103, -1.040654), (0.000957, 0.030112, -1.040654), (0.000948, 0.030112, -1.040654), (0.000957, 0.030103, -1.040654), (0.000948, 0.030103, -1.040654), (0.000957, 0.030112, -1.040654), (0.000948, 0.030112, -1.040654), (0.000957, 0.030103, -1.040654), (0.000948, 0.030103, -1.040654), (0.000957, 0.030112, -1.040654), (0.000948, 0.030112, -1.040654), (0.000957, 0.030103, -1.040654), (0.000948, 0.030103, -1.040654), (0.000957, 0.030112, -1.040654), (0.000948, 0.030112, -1.040654), (0.000957, 0.030103, -1.040654), (0.000948, 0.030103, -1.040654), (0.000957, 0.030112, -1.040654), (0.000948, 0.030112, -1.040654), (0.000957, 0.030103, -1.040654), (0.000948, 0.030103, -1.040654), (0.000957, 0.030112, -1.040654), (0.000948, 0.030112, -1.040654), (0.460904, 0.146682, 0.283476), (0.029516, 0.146681, 0.283476), (0.460904, 0.0771, 0.165681), (0.460904, 0.072148, 0.162717), (0.029516, 0.072147, 0.162717), (0.029516, 0.077098, 0.165681), (0.460904, 0.146682, 0.291556), (0.460904, 0.0771, 0.291556), (0.460904, 0.072148, 0.291556), (0.460905, -0.180426, 0.291556), (0.029516, 0.077098, 0.291556), (0.029516, 0.146681, 0.291556), (0.029516, 0.072147, 0.291556), (0.029517, -0.180427, 0.291556), (0.029517, -0.143563, 0.162717), (0.029517, -0.164015, 0.185349), (0.460905, -0.164014, 0.18535), (0.460905, -0.143562, 0.162717), (0.460905, -0.162457, 0.176689), (0.029517, -0.162458, 0.176689), (0.460905, -0.158023, 0.169346), (0.029517, -0.158025, 0.169346), (0.460905, -0.151388, 0.164439), (0.029517, -0.15139, 0.164439), (0.456217, 0.138315, 0.286234), (0.034203, 0.138313, 0.286234), (0.036792, 0.072457, 0.171263), (0.453628, 0.072458, 0.171263), (0.034049, -0.155354, 0.187123), (0.036682, -0.173564, 0.292855), (0.453739, -0.173562, 0.292855), (0.456372, -0.155353, 0.187123), (0.036792, 0.070465, 0.17007), (0.453628, 0.070466, 0.17007), (0.45077, 0.077099, 0.291556), (0.453738, 0.139719, 0.291556), (0.45077, 0.072148, 0.291556), (0.034119, -0.154353, 0.180404), (0.034119, -0.151821, 0.176211), (0.034119, -0.148032, 0.173409), (0.034066, -0.1427, 0.172407), (0.03965, 0.072147, 0.291556), (0.036682, 0.139717, 0.291556), (0.03965, 0.077098, 0.291556), (0.456355, -0.142699, 0.172407), (0.456302, -0.148031, 0.173409), (0.456302, -0.15182, 0.176211), (0.456302, -0.154352, 0.180404), (0.45135, 0.071807, 0.266906), (0.454385, -0.169093, 0.266906), (0.03907, 0.071805, 0.266906), (0.039064, 0.076147, 0.266906), (0.034638, 0.127242, 0.266906), (0.036036, -0.169095, 0.266906), (0.451356, 0.076148, 0.266906), (0.455781, 0.127243, 0.266906), (0.460904, 0.136893, 0.266906), (0.029516, 0.136892, 0.266906), (0.029517, -0.176618, 0.266906), (0.460905, -0.176617, 0.266906), (0.460904, 0.0771, 0.266906), (0.460904, 0.072148, 0.266906), (0.029516, 0.072147, 0.266906), (0.029516, 0.077098, 0.266906), (0.460905, -0.194313, 0.291556), (0.029517, -0.194314, 0.291556), (0.029517, -0.190505, 0.266906), (0.460905, -0.190504, 0.266906)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-5.253075, -117.71076), (-3.54152, -117.71076), (-3.54152, -115.99921), (-5.253075, -115.99921)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer1C2_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C2_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C2_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C2_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C2_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C2_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

