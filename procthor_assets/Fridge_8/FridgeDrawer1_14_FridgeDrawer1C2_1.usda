#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer1C2"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer1C2" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.460905, -0.194314, -1.040654), (-0.000948, 0.146682, 0.292855)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 52, 53, 70, 63, 58, 37, 41, 57, 63, 34, 35, 62, 62, 35, 36, 64, 57, 41, 40, 69, 71, 38, 39, 70, 69, 40, 38, 71, 64, 36, 37, 58, 70, 39, 34, 63, 28, 34, 39, 29, 58, 77, 76, 64, 71, 79, 78, 69, 71, 70, 53, 80, 79, 57, 69, 78, 81, 62, 64, 76, 82, 62, 82, 83, 52, 63, 77, 58, 57, 81, 53, 52, 83, 80, 85, 84, 28, 29, 95, 94, 93, 92, 35, 34, 28, 84, 88, 89, 36, 35, 88, 40, 41, 86, 90, 38, 91, 85, 29, 39, 91, 38, 40, 90, 37, 36, 89, 87, 41, 37, 92, 93, 37, 87, 95, 92, 87, 86, 94, 95, 86, 41, 93, 94, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 67, 68, 72, 73, 66, 67, 73, 74, 65, 66, 74, 75, 56, 65, 75, 59, 61, 72, 68, 60, 54, 55, 61, 60, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 76, 77, 59, 75, 74, 73, 72, 61, 78, 79, 54, 60, 79, 80, 54, 78, 60, 68, 67, 66, 65, 56, 81, 76, 61, 55, 82, 82, 55, 83, 56, 59, 77, 81, 80, 83, 55, 54, 85, 33, 30, 84, 87, 44, 43, 86, 88, 84, 30, 89, 88, 30, 31, 90, 86, 43, 47, 49, 51, 42, 32, 85, 91, 33, 90, 32, 33, 91, 89, 31, 45, 50, 48, 46, 44, 87, 20, 21, 23, 22, 24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer1C2_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.00000424881, -0.8869626, 0.46184114), (-0.0000023841858, -0.8869607, 0.46184507), (-0.0000034726959, -0.9668972, 0.2551664), (-0.0000034726959, -0.9668972, 0.2551664), (-0.031993486, -0.10751765, 0.9936883), (-0.010002482, -0.03130379, 0.99945986), (0.010003343, -0.03130342, 0.99945986), (0.031991873, -0.10751737, 0.9936883), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.07436762, 0.0029965, 0.9972263), (-0.07440214, 0.0029996256, 0.99722373), (0.031991873, -0.10751737, 0.9936883), (0.010003343, -0.03130342, 0.99945986), (0.07436927, 0.002996122, 0.99722624), (0.074403875, 0.0029995737, 0.99722356), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.074403875, 0.0029995737, 0.99722356), (0.07436927, 0.002996122, 0.99722624), (0, 0, 1), (0, 0, 1), (-0.07440214, 0.0029996256, 0.99722373), (-0.07436762, 0.0029965, 0.9972263), (-0.010002482, -0.03130379, 0.99945986), (-0.031993486, -0.10751765, 0.9936883), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.00004034193, 0.9294374, -0.36897996), (0.0000023143402, 1, 0), (0.0000023143402, 1, 0), (0.000002293684, 0.9294373, -0.36898017), (0.99960464, -0.012400863, -0.025232581), (0.99961996, -0.012918164, -0.024352824), (0.9996276, -0.012800307, -0.024101336), (0.99960935, -0.0120854275, -0.025198458), (-0.99426347, 0.0756783, -0.07558444), (-0.9960811, 0.076897055, -0.04369564), (-0.9996252, -0.012796448, -0.024200803), (-0.99960953, -0.012077417, -0.025197016), (-0.99426347, 0.0756783, -0.07558444), (-0.99348867, 0.08147828, -0.07963474), (-0.99348867, 0.08147828, -0.07963474), (-0.9949622, 0.083698615, -0.05517848), (-0.9960811, 0.076897055, -0.04369564), (-0.99960476, -0.012396776, -0.025231255), (-0.99960953, -0.012077417, -0.025197016), (-0.9996252, -0.012796448, -0.024200803), (-0.9996224, -0.013165336, -0.02411644), (0.99426466, 0.07566832, -0.07557848), (0.99960935, -0.0120854275, -0.025198458), (0.9996276, -0.012800307, -0.024101336), (0.9960818, 0.076887235, -0.04369575), (0.99426466, 0.07566832, -0.07557848), (0.9960818, 0.076887235, -0.04369575), (0.9949553, 0.083695106, -0.055309772), (0.99349064, 0.08147221, -0.07961479), (0.99349064, 0.08147221, -0.07961479), (0.000004104123, 0.98549163, 0.16972403), (0.000004710152, 0.98549175, 0.16972299), (0.000004710152, 0.98549175, 0.16972299), (0.000004104124, 0.98549163, 0.16972405), (-0.0000023841858, -0.8869607, 0.46184507), (-0.00000424881, -0.8869626, 0.46184114), (-0.0000025950271, -0.8677244, 0.4970455), (-0.000002595021, -0.8677245, 0.4970455), (0.0000024906378, 0.86099315, -0.5086166), (0.000002490637, 0.86099315, -0.5086166), (-0.00004034193, 0.9294374, -0.36897996), (0.000002293684, 0.9294373, -0.36898017), (-0.0000022870397, -0.9882709, -0.152711), (-0.0000022870397, -0.9882709, -0.152711), (-0.0000022870397, -0.9882709, -0.152711), (-0.0000022870397, -0.9882709, -0.152711), (-1, -1.4248278e-7, 0), (-1, -2.8496555e-7, 0), (-1, -2.8496555e-7, 0), (-1, -1.908825e-7, 0), (-1, -9.868072e-7, 0), (-1, 0.0000011067696, 2.3825609e-7), (-1, 0.0000019594083, 1.5156432e-7), (-1, -1.4248278e-7, 0), (-1, -9.868072e-7, 0), (1, -0.0000019970896, -1.5414794e-7), (1, -0.0000018022046, -1.391055e-7), (1, -0.0000028074116, -3.2209442e-7), (1, -0.0000019269248, -2.4231724e-7), (1, 8.905056e-9, 0), (1, 1.18921335e-7, 0), (1, 1.1930027e-8, 0), (0.99999994, 1.781011e-8, 0), (0.99999994, 1.781011e-8, 0), (1, 1.18921335e-7, 0), (1, 8.905056e-9, 0), (1, -0.0000019970896, -1.5414794e-7), (1, -0.0000019269248, -2.4231724e-7), (-1, 0.0000017682006, 1.36774e-7), (-1, 0.0000019594083, 1.5156432e-7), (-1, 0.0000011067696, 2.3825609e-7), (-1, 0.0000027786414, 3.166961e-7), (0.010003343, -0.03130342, 0.99945986), (-0.010002482, -0.03130379, 0.99945986), (7.467566e-9, 0, 1), (7.467566e-9, 0, 1), (-1, 0.0000017682006, 1.36774e-7), (-1, 0.0000027786414, 3.166961e-7), (-1, 0, 0), (-1, 0, 0), (-1.915758e-8, 0, -1), (-1.915758e-8, 0, -1), (-1.915758e-8, 0, -1), (-1.915758e-8, 0, -1), (1, -0.0000028074116, -3.2209442e-7), (1, -0.0000018022046, -1.391055e-7), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-6.85337e-7, 0.38423058, 0.9232372), (-0.0000035989797, 0.015399502, 0.9998815), (0.000813881, 0.0154032335, 0.999881), (9.36826e-7, 0.38422975, 0.92323744), (0.0000017474559, 0.7418908, 0.6705206), (-6.85337e-7, 0.38423058, 0.9232372), (9.36826e-7, 0.38422975, 0.92323744), (-4.1299927e-8, 0.7418906, 0.67052096), (0.0000022108552, 0.95157903, 0.30740407), (0.0000017474559, 0.7418908, 0.6705206), (-4.1299927e-8, 0.7418906, 0.67052096), (-7.141207e-7, 0.95157903, 0.3074042), (7.428025e-8, 0.9857864, 0.16800374), (0.0000022108552, 0.95157903, 0.30740407), (-7.141207e-7, 0.95157903, 0.3074042), (2.6221096e-7, 0.98578626, 0.16800371), (-8.677598e-7, 0.005369031, 0.9999856), (0.000813881, 0.0154032335, 0.999881), (-0.0000035989797, 0.015399502, 0.9998815), (-5.659518e-7, 0.005369425, 0.99998564), (-0.0000025643967, -0.8626832, 0.50574476), (-0.0000015470088, -0.86268306, 0.50574493), (-8.677598e-7, 0.005369031, 0.9999856), (-5.659518e-7, 0.005369425, 0.99998564), (-0.00010530837, 0.8492911, -0.5279248), (-2.4143554e-7, 0.013570696, -0.99990785), (0.00009796447, 0.013521597, -0.99990857), (0.0000025412467, 0.8492938, -0.52792037), (0.00009796447, 0.013521597, -0.99990857), (-2.4143554e-7, 0.013570696, -0.99990785), (-3.424339e-7, -0.0077029318, -0.9999703), (1.01501456e-7, -0.007702388, -0.9999704), (-0.0000024676194, -0.98789996, -0.15509269), (0.0000013192459, -0.98789996, -0.1550927), (-1.2140049e-7, -0.93656194, -0.3505021), (-0.0000027776036, -0.936562, -0.35050195), (-0.0000027776036, -0.936562, -0.35050195), (-1.2140049e-7, -0.93656194, -0.3505021), (2.2079166e-7, -0.7418899, -0.67052174), (-0.0000029326907, -0.74189043, -0.67052114), (-0.0000029326907, -0.74189043, -0.67052114), (2.2079166e-7, -0.7418899, -0.67052174), (-1.1045017e-8, -0.41665262, -0.9090658), (-0.0000017853873, -0.41665363, -0.90906525), (-0.0000017853873, -0.41665363, -0.90906525), (-1.1045017e-8, -0.41665262, -0.9090658), (1.01501456e-7, -0.007702388, -0.9999704), (-3.424339e-7, -0.0077029318, -0.9999703), (0.9996276, -0.012800307, -0.024101336), (0.99961996, -0.012918164, -0.024352824), (0.99962664, -0.013203857, -0.0239217), (0.99962664, -0.013203857, -0.0239217), (0.99962664, -0.013203857, -0.0239217), (0.99962664, -0.013203857, -0.0239217), (0.99962664, -0.013203857, -0.0239217), (0.99963015, -0.012972163, -0.02390079), (-0.9996252, -0.012796448, -0.024200803), (-0.9960811, 0.076897055, -0.04369564), (-0.99800354, 0.057603072, -0.02590088), (-0.9996302, -0.012971081, -0.0239006), (-0.9960811, 0.076897055, -0.04369564), (-0.9949622, 0.083698615, -0.05517848), (-0.99800354, 0.057603072, -0.02590088), (-0.9996252, -0.012796448, -0.024200803), (-0.9996302, -0.012971081, -0.0239006), (-0.99962676, -0.0131995175, -0.023921331), (-0.99962676, -0.0131995175, -0.023921331), (-0.99962676, -0.0131995175, -0.023921331), (-0.99962676, -0.0131995175, -0.023921331), (-0.99962676, -0.0131995175, -0.023921331), (-0.9996224, -0.013165336, -0.02411644), (0.9996276, -0.012800307, -0.024101336), (0.99963015, -0.012972163, -0.02390079), (0.99800354, 0.057602905, -0.025900714), (0.9960818, 0.076887235, -0.04369575), (0.9960818, 0.076887235, -0.04369575), (0.99800354, 0.057602905, -0.025900714), (0.9949553, 0.083695106, -0.055309772), (7.428025e-8, 0.9857864, 0.16800374), (2.6221096e-7, 0.98578626, 0.16800371), (0.000004104123, 0.98549163, 0.16972403), (0.000004104124, 0.98549163, 0.16972405), (-0.000002595021, -0.8677245, 0.4970455), (-0.0000025950271, -0.8677244, 0.4970455), (-0.0000015470088, -0.86268306, 0.50574493), (-0.0000025643967, -0.8626832, 0.50574476), (0.0000024906378, 0.86099315, -0.5086166), (-0.00010530837, 0.8492911, -0.5279248), (0.0000025412467, 0.8492938, -0.52792037), (0.000002490637, 0.86099315, -0.5086166), (-0.0000024591038, -0.98826975, -0.15271851), (0.0000013192459, -0.98789996, -0.1550927), (-0.0000024676194, -0.98789996, -0.15509269), (-0.0000024591038, -0.98826975, -0.15271851), (-1, -9.868072e-7, 0), (-1, -1.908825e-7, 0), (-1, -0.000002923147, 0), (-1, 0.0000011067696, 2.3825609e-7), (-1, -9.868072e-7, 0), (-1, -0.000002923147, 0), (-1, 0.0000010658805, 3.922997e-7), (1, -0.0000019269248, -2.4231724e-7), (1, -0.0000028074116, -3.2209442e-7), (1, -0.000004171395, -6.609731e-7), (1, -0.000004171395, -6.609731e-7), (1, -0.000004171395, -6.609731e-7), (1, -0.000004171395, -6.609731e-7), (1, -0.000004171395, -6.609731e-7), (1, -0.0000023366092, -3.9900004e-7), (1, 1.1930027e-8, 0), (1, 1.18921335e-7, 0), (1, 3.654692e-7, 0), (1, -0.0000019269248, -2.4231724e-7), (1, -0.0000023366092, -3.9900004e-7), (1, 3.654692e-7, 0), (1, 1.18921335e-7, 0), (-1, 0.0000011067696, 2.3825609e-7), (-1, 0.0000010658805, 3.922997e-7), (-1, 0.000004170525, 6.4989575e-7), (-1, 0.000004170525, 6.4989575e-7), (-1, 0.000004170525, 6.4989575e-7), (-1, 0.000004170525, 6.4989575e-7), (-1, 0.000004170525, 6.4989575e-7), (-1, 0.0000027786414, 3.166961e-7), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.000957, 0.030103, -1.040654), (-0.000948, 0.030103, -1.040654), (-0.000957, 0.030112, -1.040654), (-0.000948, 0.030112, -1.040654), (-0.460904, 0.146682, 0.283476), (-0.029516, 0.146681, 0.283476), (-0.460904, 0.0771, 0.165681), (-0.460904, 0.072148, 0.162717), (-0.029516, 0.072147, 0.162717), (-0.029516, 0.077098, 0.165681), (-0.460904, 0.146682, 0.291556), (-0.460904, 0.0771, 0.291556), (-0.460904, 0.072148, 0.291556), (-0.460905, -0.180426, 0.291556), (-0.029516, 0.077098, 0.291556), (-0.029516, 0.146681, 0.291556), (-0.029516, 0.072147, 0.291556), (-0.029517, -0.180427, 0.291556), (-0.029517, -0.143563, 0.162717), (-0.029517, -0.164015, 0.185349), (-0.460905, -0.164014, 0.18535), (-0.460905, -0.143562, 0.162717), (-0.460905, -0.162457, 0.176689), (-0.029517, -0.162458, 0.176689), (-0.460905, -0.158023, 0.169346), (-0.029517, -0.158025, 0.169346), (-0.460905, -0.151388, 0.164439), (-0.029517, -0.15139, 0.164439), (-0.456217, 0.138315, 0.286234), (-0.034203, 0.138313, 0.286234), (-0.036792, 0.072457, 0.171263), (-0.453628, 0.072458, 0.171263), (-0.034049, -0.155354, 0.187123), (-0.036682, -0.173564, 0.292855), (-0.453739, -0.173562, 0.292855), (-0.456372, -0.155353, 0.187123), (-0.036792, 0.070465, 0.17007), (-0.453628, 0.070466, 0.17007), (-0.45077, 0.0771, 0.291556), (-0.453738, 0.139719, 0.291556), (-0.45077, 0.072148, 0.291556), (-0.034119, -0.154353, 0.180404), (-0.034119, -0.151821, 0.176211), (-0.034119, -0.148032, 0.173409), (-0.034066, -0.1427, 0.172407), (-0.03965, 0.072147, 0.291556), (-0.036682, 0.139718, 0.291556), (-0.03965, 0.077098, 0.291556), (-0.456355, -0.142699, 0.172407), (-0.456302, -0.148031, 0.173409), (-0.456302, -0.15182, 0.176211), (-0.456302, -0.154352, 0.180404), (-0.45135, 0.071807, 0.266906), (-0.454385, -0.169093, 0.266906), (-0.03907, 0.071805, 0.266906), (-0.039064, 0.076147, 0.266906), (-0.034638, 0.127242, 0.266906), (-0.036036, -0.169095, 0.266906), (-0.451356, 0.076148, 0.266906), (-0.455781, 0.127243, 0.266906), (-0.460904, 0.136893, 0.266906), (-0.029516, 0.136892, 0.266906), (-0.029517, -0.176618, 0.266906), (-0.460905, -0.176617, 0.266906), (-0.460904, 0.0771, 0.266906), (-0.460904, 0.072148, 0.266906), (-0.029516, 0.072147, 0.266906), (-0.029516, 0.077098, 0.266906), (-0.460905, -0.194313, 0.291556), (-0.029517, -0.194314, 0.291556), (-0.029517, -0.190505, 0.266906), (-0.460905, -0.190504, 0.266906)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-169.52118, -113.841446), (-169.52118, -113.84153), (-169.5211, -113.84153), (-169.5211, -113.841446), (-170.1911, 0.694098), (-170.1911, -0.603559), (-170.17474, -0.595938), (-170.17474, 0.686477), (-171.11841, 0.658819), (-171.13832, 0.679612), (-171.13832, -0.5722), (-171.11841, -0.551407), (-170.20929, 0.658819), (-170.18912, 0.679612), (-170.39102, 0.679612), (-170.39102, 0.650206), (-170.39102, 0.650206), (-170.39102, 0.679612), (-170.4054, 0.679612), (-170.4054, 0.650206), (-171.11841, -0.551407), (-171.13832, -0.5722), (-170.4054, -0.5722), (-170.4054, -0.542794), (-170.39102, -0.542794), (-170.39102, -0.5722), (-170.18912, -0.5722), (-170.20929, -0.551407), (-170.4054, -0.542794), (-170.4054, -0.5722), (-170.39102, -0.5722), (-170.39102, -0.542794), (-170.4054, 0.650206), (-170.4054, 0.679612), (-171.13832, 0.679612), (-171.11841, 0.658819), (-170.20929, -0.551407), (-170.18912, -0.5722), (-170.18912, 0.679612), (-170.20929, 0.658819), (-170.3597, 0.71141), (-170.38432, 0.71141), (-170.38432, -0.603999), (-170.3597, -0.603999), (-169.96524, 0.401328), (-170.04047, 0.388377), (-170.04047, -0.309695), (-169.969, -0.310684), (-169.91367, 0.219961), (-169.98509, 0.217204), (-169.98509, 0.204619), (-169.91367, 0.205608), (-169.91367, 0.219961), (-169.91367, 0.401477), (-169.92908, 0.397406), (-169.98509, 0.365313), (-169.98509, 0.217204), (-169.9099, -0.506637), (-169.91367, 0.205608), (-169.98509, 0.204619), (-169.98509, -0.493683), (-169.969, -0.325032), (-169.969, -0.310684), (-170.04047, -0.309695), (-170.04047, -0.322276), (-169.969, -0.325032), (-170.04047, -0.322276), (-170.04047, -0.470337), (-169.98442, -0.502419), (-169.969, -0.506488), (-170.12253, 0.6523), (-170.19821, 0.650415), (-170.19821, -0.56647), (-170.12253, -0.568356), (-170.1911, -0.603559), (-170.1911, 0.694098), (-170.25052, 0.69276), (-170.25052, -0.602221), (-170.30917, -0.603999), (-170.30917, 0.71141), (-170.3597, 0.71141), (-170.3597, -0.603999), (-170.33157, 0.682057), (-170.33157, -0.574646), (-170.25977, -0.574646), (-170.25977, 0.682057), (-170.07051, 0.264687), (-170.07051, 0.466251), (-170.0939, 0.466251), (-170.14188, 0.437897), (-170.14188, 0.264687), (-170.14188, 0.250344), (-170.07051, 0.250344), (-170.07051, 0.264687), (-170.14188, 0.264687), (-170.01941, -0.305574), (-170.01941, 0.42594), (-170.09082, 0.414908), (-170.09082, -0.305574), (-170.01941, -0.319915), (-170.09082, -0.319915), (-170.09082, -0.493092), (-170.04282, -0.521442), (-170.01941, -0.521442), (-170.09082, -0.319915), (-170.01941, -0.319915), (-170.01941, -0.305574), (-170.09082, -0.305574), (-170.07051, -0.481304), (-170.07051, 0.250344), (-170.14188, 0.250344), (-170.14188, -0.47027), (-171.13832, -0.5722), (-171.13832, 0.679612), (-171.17863, 0.679612), (-171.17863, -0.5722), (-170.07051, -0.481304), (-170.14188, -0.47027), (-170.14188, -0.510497), (-170.07051, -0.521532), (-170.27437, 0.678331), (-170.27437, -0.570919), (-170.23413, -0.570919), (-170.23413, 0.678331), (-170.09082, 0.414908), (-170.01941, 0.42594), (-170.01941, 0.466161), (-170.09082, 0.455128), (-143.95483, -107.93224), (-143.95483, -113.63171), (-138.40872, -113.63171), (-138.40872, -107.93224), (-118.538795, -109.61047), (-118.538795, -113.51364), (-114.740005, -113.51364), (-114.740005, -109.61047), (-88.714554, -110.74826), (-88.714554, -113.93459), (-85.61387, -113.93459), (-85.61387, -110.74826), (-68.99982, -112.29217), (-68.99982, -112.292175), (-68.99981, -112.292175), (-68.99981, -112.29217), (-71.56355, -0.999076), (-71.54901, -0.999221), (-71.54901, 0.152274), (-71.56355, 0.152129), (-71.57388, -0.999076), (-71.56355, -0.999076), (-71.56355, 0.152129), (-71.57388, 0.152129), (-71.58079, -0.999076), (-71.57388, -0.999076), (-71.57388, 0.152129), (-71.58079, 0.152129), (-71.36335, -0.998661), (-71.34505, -0.998469), (-71.34505, 0.151563), (-71.36335, 0.151755), (-70.96776, 0.14484), (-71.54901, 0.152274), (-71.54901, -0.999221), (-70.96776, -0.991786), (-70.962326, -0.991786), (-70.962326, 0.14484), (-70.96776, 0.14484), (-70.96776, -0.991786), (-72.07719, -1.061298), (-72.06242, -1.061298), (-72.06242, 0.225056), (-72.07719, 0.225056), (-72.06242, 0.225056), (-72.06242, -1.061298), (-71.4192, -1.061298), (-71.4192, 0.225056), (-71.67225, -1.005046), (-71.67225, 0.168804), (-71.695816, 0.168804), (-71.695816, -1.005046), (-71.362854, -1.061298), (-71.362854, 0.225056), (-71.376076, 0.225056), (-71.376076, -1.061298), (-71.376076, -1.061298), (-71.376076, 0.225056), (-71.39586, 0.225056), (-71.39586, -1.061298), (-71.39586, -1.061298), (-71.39586, 0.225056), (-71.4192, 0.225056), (-71.4192, -1.061298), (-71.35958, -0.237214), (-71.35958, 0.414556), (-71.57544, 0.377381), (-71.59361, 0.374672), (-71.60496, 0.367822), (-71.61254, 0.357571), (-71.61525, 0.343145), (-71.621574, -0.233586), (-71.47922, 0.264571), (-71.47922, 0.276318), (-71.73798, 0.266334), (-71.74121, 0.260943), (-71.47922, 0.276318), (-71.47922, 0.414557), (-71.73798, 0.266334), (-71.47922, 0.264571), (-71.74121, 0.260943), (-71.734886, -0.315789), (-71.73218, -0.330215), (-71.724594, -0.340467), (-71.71325, -0.347317), (-71.695076, -0.350026), (-71.47922, -0.387201), (-71.35958, -0.237214), (-71.621574, -0.233586), (-71.61835, -0.238977), (-71.35958, -0.248961), (-71.35958, -0.248961), (-71.61835, -0.238977), (-71.35958, -0.3872), (-71.36335, -0.998661), (-71.36335, 0.151755), (-71.58068, 0.146342), (-71.58068, -0.993248), (-70.97623, -0.53498), (-70.97623, 0.687762), (-71.25392, 0.68151), (-71.25392, -0.528727), (-72.255486, -1.061298), (-72.07719, -1.061298), (-72.07719, 0.225056), (-72.255486, 0.225056), (-71.450325, 0.168804), (-71.67225, 0.168804), (-71.67225, -1.005046), (-71.450325, -1.005046), (-71.09744, 0.275313), (-71.09744, 0.437029), (-71.37121, 0.275313), (-71.09744, 0.261921), (-71.09744, 0.275313), (-71.37121, 0.275313), (-71.37923, 0.261921), (-71.22572, -0.23573), (-71.22572, 0.437071), (-71.4463, 0.402985), (-71.46973, 0.398775), (-71.489586, 0.386784), (-71.50285, 0.368839), (-71.507515, 0.347672), (-71.507515, -0.23573), (-71.22572, -0.410838), (-71.22572, -0.249122), (-71.4995, -0.249122), (-71.22572, -0.23573), (-71.507515, -0.23573), (-71.4995, -0.249122), (-71.22572, -0.249122), (-71.09744, 0.261921), (-71.37923, 0.261921), (-71.37923, -0.321479), (-71.374565, -0.342646), (-71.3613, -0.360592), (-71.34144, -0.372582), (-71.31801, -0.376793), (-71.09744, -0.410878), (5.646933, -121.22408), (7.358486, -121.22408), (7.358486, -119.51253), (5.646933, -119.51253), (-5.253075, -117.71076), (-3.54152, -117.71076), (-3.54152, -115.99921), (-5.253075, -115.99921)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer1C2_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
                rel material:binding = </root/_materials/M_FridgeDrawer1C2_0>
            }

            def GeomSubset "M_FridgeDrawer1C2_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer1C2_1>
            }

            def GeomSubset "M_FridgeDrawer1C2_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer1C2_2>
            }

            def GeomSubset "M_FridgeDrawer1C2_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33]
                rel material:binding = </root/_materials/M_FridgeDrawer1C2_3>
            }

            def GeomSubset "M_FridgeDrawer1C2_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]
                rel material:binding = </root/_materials/M_FridgeDrawer1C2_4>
            }

            def GeomSubset "M_FridgeDrawer1C2_5" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [63]
                rel material:binding = </root/_materials/M_FridgeDrawer1C2_5>
            }

            def GeomSubset "M_FridgeDrawer1C2_6" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [64]
                rel material:binding = </root/_materials/M_FridgeDrawer1C2_6>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer1C2_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C2_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.36764705, 0.36764705, 0.36764705)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C2_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Copper_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C2_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer1C2_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C2_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C2_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C2_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C2_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C2_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer1C2_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C2_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C2_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C2_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C2_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C2_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer1C2_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C2_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.25, 0.25, 0.25)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C2_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C2_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer1C2_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C2_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_FridgeDrawer1C2_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C2_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C2_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C2_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C2_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C2_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer1C2_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C2_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C2_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C2_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C2_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C2_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

