#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer4_16_FridgeDrawer4C4_4_GeomSubset_2"
    {
        def Mesh "FridgeDrawer4_16_FridgeDrawer4C4_4_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer4C4_2>
            normal3f[] normals = [(0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (-0.028964, 0.144465, 0.185163), (-0.464277, 0.144465, 0.185163), (-0.028964, 0.072208, 0.063484), (-0.028964, 0.067066, 0.060422), (-0.464277, 0.067066, 0.060422), (-0.464277, 0.072208, 0.063484), (-0.028964, 0.144465, 0.193509), (-0.028964, 0.072208, 0.193509), (-0.028964, 0.067066, 0.193509), (-0.028964, -0.195217, 0.193509), (-0.464277, 0.072208, 0.193509), (-0.464277, 0.144465, 0.193509), (-0.464277, 0.067066, 0.193509), (-0.464277, -0.195217, 0.193509), (-0.464277, -0.156936, 0.060422), (-0.464277, -0.178174, 0.083802), (-0.028964, -0.178174, 0.083802), (-0.028964, -0.156936, 0.060422), (-0.028964, -0.176557, 0.074855), (-0.464277, -0.176557, 0.074855), (-0.028964, -0.171954, 0.06727), (-0.464277, -0.171954, 0.06727), (-0.028964, -0.165063, 0.062201), (-0.464277, -0.165063, 0.062201), (-0.033693, 0.135777, 0.188012), (-0.459547, 0.135777, 0.188012), (-0.456934, 0.067389, 0.06925), (-0.036306, 0.067389, 0.06925), (-0.459703, -0.169181, 0.085633), (-0.457046, -0.18809, 0.194851), (-0.036194, -0.18809, 0.194851), (-0.033537, -0.169181, 0.085633), (-0.456934, 0.06532, 0.068018), (-0.036306, 0.06532, 0.068018), (-0.039189, 0.072208, 0.193509), (-0.036194, 0.137235, 0.193509), (-0.039189, 0.067066, 0.193509), (-0.459632, -0.168141, 0.078693), (-0.459632, -0.165512, 0.074361), (-0.459632, -0.161577, 0.071467), (-0.459686, -0.15604, 0.070432), (-0.454051, 0.067066, 0.193509), (-0.457046, 0.137235, 0.193509), (-0.454051, 0.072208, 0.193509), (-0.033554, -0.15604, 0.070432), (-0.033608, -0.161577, 0.071467), (-0.033608, -0.165512, 0.074361), (-0.033608, -0.168141, 0.078693), (-0.038604, 0.066712, 0.168046), (-0.035542, -0.183449, 0.168046), (-0.454636, 0.066712, 0.168046), (-0.454642, 0.071221, 0.168046), (-0.459108, 0.124279, 0.168046), (-0.457698, -0.183449, 0.168046), (-0.038598, 0.071221, 0.168046), (-0.034133, 0.124279, 0.168046), (-0.028964, 0.134301, 0.168046), (-0.464277, 0.134301, 0.168046), (-0.464277, -0.191262, 0.168046), (-0.028964, -0.191262, 0.168046), (-0.028964, 0.072208, 0.168046), (-0.028964, 0.067066, 0.168046), (-0.464277, 0.067066, 0.168046), (-0.464277, 0.072208, 0.168046), (-0.028964, -0.209638, 0.193509), (-0.464277, -0.209638, 0.193509), (-0.464277, -0.205682, 0.168046), (-0.028964, -0.205682, 0.168046)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-116.58835, -110.940315), (-116.58835, -110.940315), (-116.58835, -110.940315), (-116.58835, -110.940315)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer4C4_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C4_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C4_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C4_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C4_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C4_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

