#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer4C4"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer4C4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(0.00016, -0.209638, -1.093784), (0.464277, 0.144465, 0.194851)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 52, 53, 70, 63, 58, 37, 41, 57, 63, 34, 35, 62, 62, 35, 36, 64, 57, 41, 40, 69, 71, 38, 39, 70, 69, 40, 38, 71, 64, 36, 37, 58, 70, 39, 34, 63, 28, 34, 39, 29, 58, 77, 76, 64, 71, 79, 78, 69, 71, 70, 53, 80, 79, 57, 69, 78, 81, 62, 64, 76, 82, 62, 82, 83, 52, 63, 77, 58, 57, 81, 53, 52, 83, 80, 85, 84, 28, 29, 95, 94, 93, 92, 35, 34, 28, 84, 88, 89, 36, 35, 88, 40, 41, 86, 90, 38, 91, 85, 29, 39, 91, 38, 40, 90, 37, 36, 89, 87, 41, 37, 92, 93, 37, 87, 95, 92, 87, 86, 94, 95, 86, 41, 93, 94, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 67, 68, 72, 73, 66, 67, 73, 74, 65, 66, 74, 75, 56, 65, 75, 59, 61, 72, 68, 60, 54, 55, 61, 60, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 76, 77, 59, 75, 74, 73, 72, 61, 78, 79, 54, 60, 79, 80, 54, 78, 60, 68, 67, 66, 65, 56, 81, 76, 61, 55, 82, 82, 55, 83, 56, 59, 77, 81, 80, 83, 55, 54, 85, 33, 30, 84, 87, 44, 43, 86, 88, 84, 30, 89, 88, 30, 31, 90, 86, 43, 47, 49, 51, 42, 32, 85, 91, 33, 90, 32, 33, 91, 89, 31, 45, 50, 48, 46, 44, 87, 20, 21, 23, 22, 24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer4C4_0>
            normal3f[] normals = [(0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0.0000028350623, -0.8860645, 0.46356186), (-0.0000048577785, -0.8861057, 0.46348307), (0, -0.9665781, 0.2563721), (0, -0.9665781, 0.2563721), (-0.032893863, -0.10641355, 0.9937777), (-0.010014356, -0.031720996, 0.9994466), (0.010011662, -0.031718515, 0.9994467), (0.03290981, -0.106371395, 0.99378175), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.07609774, 0.0030002359, 0.9970959), (-0.07610509, 0.0029998417, 0.9970953), (0.03290981, -0.106371395, 0.99378175), (0.010011662, -0.031718515, 0.9994467), (0.07609363, 0.0030002093, 0.99709624), (0.07610105, 0.0029999544, 0.99709564), (-1.931622e-7, 0, 1), (-1.96075e-7, 0, 1), (-1.9609224e-7, 0, 1), (-1.9796589e-7, 0, 1), (0.07610105, 0.0029999544, 0.99709564), (0.07609363, 0.0030002093, 0.99709624), (-1.96075e-7, 0, 1), (-1.931622e-7, 0, 1), (-0.07610509, 0.0029998417, 0.9970953), (-0.07609774, 0.0030002359, 0.9970959), (-0.010014356, -0.031720996, 0.9994466), (-0.032893863, -0.10641355, 0.9937777), (-1.9796589e-7, 0, 1), (-1.9609224e-7, 0, 1), (0, 0, 1), (0, 0, 1), (-9.758029e-9, 0.9287484, -0.3707106), (0, 1, 0), (0, 1, 0), (0, 0.9287484, -0.3707106), (0.9996236, -0.012047482, -0.02464574), (0.9996333, -0.012395926, -0.024075547), (0.99964494, -0.012375189, -0.023601037), (0.9996281, -0.011773432, -0.024597073), (-0.9945462, 0.07359871, -0.073899955), (-0.99629164, 0.07469745, -0.04269933), (-0.99964494, -0.012374476, -0.023601232), (-0.999628, -0.0117777195, -0.024597544), (-0.9945462, 0.07359871, -0.073899955), (-0.9938183, 0.079197876, -0.077799395), (-0.9938183, 0.079197876, -0.077799395), (-0.99521846, 0.08140332, -0.053979512), (-0.99629164, 0.07469745, -0.04269933), (-0.9996237, -0.012047504, -0.024645822), (-0.999628, -0.0117777195, -0.024597544), (-0.99964494, -0.012374476, -0.023601232), (-0.9996383, -0.0125566805, -0.023781132), (0.9945467, 0.07359301, -0.07389784), (0.9996281, -0.011773432, -0.024597073), (0.99964494, -0.012375189, -0.023601037), (0.9962923, 0.07469021, -0.042696577), (0.9945467, 0.07359301, -0.07389784), (0.9962923, 0.07469021, -0.042696577), (0.9952168, 0.08140032, -0.054013915), (0.99382067, 0.07919068, -0.07777838), (0.99382067, 0.07919068, -0.07777838), (0, 0.98534006, 0.17060164), (0, 0.98534006, 0.17060152), (0, 0.98534006, 0.17060152), (0, 0.98534006, 0.17060162), (-0.0000048577785, -0.8861057, 0.46348307), (0.0000028350623, -0.8860645, 0.46356186), (0, -0.86658555, 0.49902856), (0, -0.8665855, 0.49902856), (0, 0.8598295, -0.51058125), (0, 0.8598295, -0.51058125), (-9.758029e-9, 0.9287484, -0.3707106), (0, 0.9287484, -0.3707106), (0, -0.98814535, -0.1535215), (0, -0.98814535, -0.1535215), (0, -0.98814535, -0.1535215), (0, -0.98814535, -0.1535215), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, -1.0003047e-8, 0), (-1, -1.0003047e-8, 0), (-1, 0, 0), (-1, 0, 0), (-1, -1.0003047e-8, 0), (1, 0, 0), (1, 0, 0), (1, 9.440313e-9, 0), (1, -0.0000016995931, 0), (1, 1.3282668e-7, 0), (1, -0.0000016407733, 0), (1, 1.7814075e-7, 0), (1, 2.6565337e-7, 0), (1, 2.6565337e-7, 0), (1, -0.0000016407733, 0), (1, 1.3282668e-7, 0), (1, 0, 0), (1, -0.0000016995931, 0), (-1, 0, 0), (-1, 0, 0), (-1, -1.0003047e-8, 0), (-1, 0, 0), (0.010011662, -0.031718515, 0.9994467), (-0.010014356, -0.031720996, 0.9994466), (0, 0, 0.99999994), (0, 0, 0.99999994), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 9.440313e-9, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (-3.2770913e-8, 0.3826205, 0.9239056), (0.000003221212, 0.015235496, 0.99988395), (0.0007948058, 0.015239306, 0.9998836), (0, 0.3826205, 0.9239056), (0, 0.7401767, 0.67241234), (-3.2770913e-8, 0.3826205, 0.9239056), (0, 0.3826205, 0.9239056), (3.1253766e-8, 0.7401767, 0.67241234), (0, 0.9510947, 0.30889976), (0, 0.7401767, 0.67241234), (3.1253766e-8, 0.7401767, 0.67241234), (3.0754018e-7, 0.9510947, 0.3088997), (-1.8948049e-7, 0.9856511, 0.16879527), (0, 0.9510947, 0.30889976), (3.0754018e-7, 0.9510947, 0.3088997), (2.9457442e-7, 0.9856511, 0.16879529), (6.0675666e-7, 0.0052505787, 0.9999862), (0.0007948058, 0.015239306, 0.9998836), (0.000003221212, 0.015235496, 0.99988395), (0, 0.0052505583, 0.9999862), (-6.183982e-7, -0.8615264, 0.5077127), (0, -0.861526, 0.50771344), (6.0675666e-7, 0.0052505787, 0.9999862), (0, 0.0052505583, 0.9999862), (1.9612779e-8, 0.8480407, -0.5299311), (0, 0.013442561, -0.9999097), (-2.2060835e-8, 0.013442591, -0.9999097), (0, 0.8480407, -0.5299311), (-2.2060835e-8, 0.013442591, -0.9999097), (0, 0.013442561, -0.9999097), (8.72849e-9, -0.007741697, -0.99997), (0, -0.007741697, -0.99996996), (0, -0.9877882, -0.15580283), (-8.7625274e-10, -0.9877882, -0.15580283), (-1.8971194e-10, -0.93591344, -0.35223013), (0, -0.93591344, -0.35223013), (0, -0.93591344, -0.35223013), (-1.8971194e-10, -0.93591344, -0.35223013), (-3.131726e-10, -0.7401993, -0.6723874), (0, -0.7401993, -0.6723874), (0, -0.7401993, -0.6723874), (-3.131726e-10, -0.7401993, -0.6723874), (-2.6010696e-10, -0.41490185, -0.9098663), (0, -0.41490185, -0.9098663), (0, -0.41490185, -0.9098663), (-2.6010696e-10, -0.41490185, -0.9098663), (0, -0.007741697, -0.99996996), (8.72849e-9, -0.007741697, -0.99997), (0.99964494, -0.012375189, -0.023601037), (0.9996333, -0.012395926, -0.024075547), (0.9996447, -0.012829528, -0.02336597), (0.9996447, -0.012829528, -0.02336597), (0.9996447, -0.012829528, -0.02336597), (0.9996447, -0.012829528, -0.02336597), (0.9996447, -0.012829528, -0.02336597), (0.9996454, -0.012703006, -0.023401074), (-0.99964494, -0.012374476, -0.023601232), (-0.99629164, 0.07469745, -0.04269933), (-0.9981059, 0.05607502, -0.025300909), (-0.9996455, -0.01269857, -0.023401208), (-0.99629164, 0.07469745, -0.04269933), (-0.99521846, 0.08140332, -0.053979512), (-0.9981059, 0.05607502, -0.025300909), (-0.99964494, -0.012374476, -0.023601232), (-0.9996455, -0.01269857, -0.023401208), (-0.9996447, -0.0128294015, -0.023366073), (-0.9996447, -0.0128294015, -0.023366073), (-0.9996447, -0.0128294015, -0.023366073), (-0.9996447, -0.0128294015, -0.023366073), (-0.9996447, -0.0128294015, -0.023366073), (-0.9996383, -0.0125566805, -0.023781132), (0.99964494, -0.012375189, -0.023601037), (0.9996454, -0.012703006, -0.023401074), (0.998104, 0.056111053, -0.02529854), (0.9962923, 0.07469021, -0.042696577), (0.9962923, 0.07469021, -0.042696577), (0.998104, 0.056111053, -0.02529854), (0.9952168, 0.08140032, -0.054013915), (-1.8948049e-7, 0.9856511, 0.16879527), (2.9457442e-7, 0.9856511, 0.16879529), (0, 0.98534006, 0.17060164), (0, 0.98534006, 0.17060162), (0, -0.8665855, 0.49902856), (0, -0.86658555, 0.49902856), (0, -0.861526, 0.50771344), (-6.183982e-7, -0.8615264, 0.5077127), (0, 0.8598295, -0.51058125), (1.9612779e-8, 0.8480407, -0.5299311), (0, 0.8480407, -0.5299311), (0, 0.8598295, -0.51058125), (0, -0.9881461, -0.15351667), (-8.7625274e-10, -0.9877882, -0.15580283), (0, -0.9877882, -0.15580283), (0, -0.9881461, -0.15351667), (-1, -1.0003047e-8, 0), (-1, 0, 0), (-1, -3.1901926e-8, 0), (-1, -1.0003047e-8, 0), (-1, -1.0003047e-8, 0), (-1, -3.1901926e-8, 0), (-1, -1.5880348e-8, 0), (1, -0.0000016995931, 0), (1, 9.440313e-9, 0), (1, 3.037468e-8, 0), (1, 3.037468e-8, 0), (1, 3.037468e-8, 0), (1, 3.037468e-8, 0), (1, 3.037468e-8, 0), (1, -0.0000026919265, 0), (1, 1.7814075e-7, 0), (1, -0.0000016407733, 0), (1, -0.0000054445954, 0), (1, -0.0000016995931, 0), (1, -0.0000026919265, 0), (1, -0.0000054445954, 0), (1, -0.0000016407733, 0), (-1, -1.0003047e-8, 0), (-1, -1.5880348e-8, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.00016, 0.023406, -1.093784), (0.000169, 0.023406, -1.093784), (0.00016, 0.023416, -1.093784), (0.000169, 0.023416, -1.093784), (0.00016, 0.023406, -1.093784), (0.000169, 0.023406, -1.093784), (0.00016, 0.023416, -1.093784), (0.000169, 0.023416, -1.093784), (0.00016, 0.023406, -1.093784), (0.000169, 0.023406, -1.093784), (0.00016, 0.023416, -1.093784), (0.000169, 0.023416, -1.093784), (0.00016, 0.023406, -1.093784), (0.000169, 0.023406, -1.093784), (0.00016, 0.023416, -1.093784), (0.000169, 0.023416, -1.093784), (0.00016, 0.023406, -1.093784), (0.000169, 0.023406, -1.093784), (0.00016, 0.023416, -1.093784), (0.000169, 0.023416, -1.093784), (0.00016, 0.023406, -1.093784), (0.000169, 0.023406, -1.093784), (0.00016, 0.023416, -1.093784), (0.000169, 0.023416, -1.093784), (0.00016, 0.023406, -1.093784), (0.000169, 0.023406, -1.093784), (0.00016, 0.023416, -1.093784), (0.000169, 0.023416, -1.093784), (0.028964, 0.144465, 0.185163), (0.464277, 0.144465, 0.185163), (0.028964, 0.072208, 0.063484), (0.028964, 0.067066, 0.060422), (0.464277, 0.067066, 0.060422), (0.464277, 0.072208, 0.063484), (0.028964, 0.144465, 0.193509), (0.028964, 0.072208, 0.193509), (0.028964, 0.067066, 0.193509), (0.028964, -0.195217, 0.193509), (0.464277, 0.072208, 0.193509), (0.464277, 0.144465, 0.193509), (0.464277, 0.067066, 0.193509), (0.464277, -0.195217, 0.193509), (0.464277, -0.156936, 0.060422), (0.464277, -0.178174, 0.083802), (0.028964, -0.178174, 0.083802), (0.028964, -0.156936, 0.060422), (0.028964, -0.176557, 0.074855), (0.464277, -0.176557, 0.074855), (0.028964, -0.171954, 0.06727), (0.464277, -0.171954, 0.06727), (0.028964, -0.165063, 0.062201), (0.464277, -0.165063, 0.062201), (0.033693, 0.135777, 0.188012), (0.459547, 0.135777, 0.188012), (0.456934, 0.067389, 0.06925), (0.036306, 0.067389, 0.06925), (0.459703, -0.16918, 0.085633), (0.457046, -0.18809, 0.194851), (0.036194, -0.18809, 0.194851), (0.033537, -0.16918, 0.085633), (0.456934, 0.06532, 0.068018), (0.036306, 0.06532, 0.068018), (0.039189, 0.072208, 0.193509), (0.036194, 0.137235, 0.193509), (0.039189, 0.067066, 0.193509), (0.459632, -0.168141, 0.078693), (0.459632, -0.165512, 0.074361), (0.459632, -0.161577, 0.071467), (0.459686, -0.15604, 0.070432), (0.454051, 0.067066, 0.193509), (0.457046, 0.137235, 0.193509), (0.454051, 0.072208, 0.193509), (0.033554, -0.15604, 0.070432), (0.033608, -0.161577, 0.071467), (0.033608, -0.165512, 0.074361), (0.033608, -0.168141, 0.078693), (0.038604, 0.066712, 0.168046), (0.035542, -0.183449, 0.168046), (0.454636, 0.066712, 0.168046), (0.454642, 0.071221, 0.168046), (0.459108, 0.124279, 0.168046), (0.457698, -0.183449, 0.168046), (0.038598, 0.071221, 0.168046), (0.034133, 0.124279, 0.168046), (0.028964, 0.134301, 0.168046), (0.464277, 0.134301, 0.168046), (0.464277, -0.191262, 0.168046), (0.028964, -0.191262, 0.168046), (0.028964, 0.072208, 0.168046), (0.028964, 0.067066, 0.168046), (0.464277, 0.067066, 0.168046), (0.464277, 0.072208, 0.168046), (0.028964, -0.209638, 0.193509), (0.464277, -0.209638, 0.193509), (0.464277, -0.205682, 0.168046), (0.028964, -0.205682, 0.168046)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-169.52118, -113.22002), (-169.5211, -113.22002), (-169.5211, -113.21994), (-169.52118, -113.21994), (-170.19357, 0.663268), (-170.19357, -0.598405), (-170.17729, -0.590997), (-170.17729, 0.655859), (-171.12009, 0.628575), (-171.14, 0.64878), (-171.14, -0.567613), (-171.12009, -0.547409), (-170.21104, 0.628575), (-170.19084, 0.64878), (-170.39273, 0.64878), (-170.39273, 0.620206), (-170.39273, 0.620206), (-170.39273, 0.64878), (-170.4071, 0.64878), (-170.4071, 0.620206), (-171.12009, -0.547409), (-171.14, -0.567613), (-170.4071, -0.567613), (-170.4071, -0.539039), (-170.39273, -0.539039), (-170.39273, -0.567613), (-170.19084, -0.567613), (-170.21104, -0.547409), (-170.4071, -0.539039), (-170.4071, -0.567613), (-170.39273, -0.567613), (-170.39273, -0.539039), (-170.4071, 0.620206), (-170.4071, 0.64878), (-171.14, 0.64878), (-171.12009, 0.628575), (-170.21104, -0.547409), (-170.19084, -0.567613), (-170.19084, 0.64878), (-170.21104, 0.628575), (-170.36433, 0.68001), (-170.38884, 0.68001), (-170.38884, -0.598842), (-170.36433, -0.598842), (-169.96443, 0.399814), (-170.03923, 0.38686), (-170.03923, -0.311378), (-169.96817, -0.312367), (-169.91356, 0.218312), (-169.98463, 0.215556), (-169.98463, 0.202972), (-169.91356, 0.203961), (-169.91356, 0.218312), (-169.91356, 0.39981), (-169.92892, 0.39574), (-169.98463, 0.36365), (-169.98463, 0.215556), (-169.90984, -0.508214), (-169.91356, 0.203961), (-169.98463, 0.202972), (-169.98463, -0.49526), (-169.96817, -0.326718), (-169.96817, -0.312367), (-170.03923, -0.311378), (-170.03923, -0.323962), (-169.96817, -0.326718), (-170.03923, -0.323962), (-170.03923, -0.472057), (-169.98349, -0.504148), (-169.96817, -0.508218), (-170.1237, 0.622312), (-170.19902, 0.62048), (-170.19902, -0.56199), (-170.1237, -0.563822), (-170.19357, -0.598405), (-170.19357, 0.663268), (-170.25272, 0.661967), (-170.25272, -0.597104), (-170.31404, -0.598842), (-170.31404, 0.68001), (-170.36433, 0.68001), (-170.36433, -0.598842), (-170.33467, 0.651263), (-170.33467, -0.570095), (-170.26323, -0.570095), (-170.26323, 0.651263), (-170.07243, 0.262899), (-170.07243, 0.464444), (-170.0957, 0.464444), (-170.14345, 0.436092), (-170.14345, 0.262899), (-170.14345, 0.248557), (-170.07243, 0.248557), (-170.07243, 0.262899), (-170.14345, 0.262899), (-170.01994, -0.307325), (-170.01994, 0.424165), (-170.09096, 0.413133), (-170.09096, -0.307325), (-170.01994, -0.321665), (-170.09096, -0.321665), (-170.09096, -0.494837), (-170.04323, -0.523186), (-170.01994, -0.523186), (-170.09096, -0.321665), (-170.01994, -0.321665), (-170.01994, -0.307325), (-170.09096, -0.307325), (-170.07243, -0.483021), (-170.07243, 0.248557), (-170.14345, 0.248557), (-170.14345, -0.471988), (-171.14, -0.567613), (-171.14, 0.64878), (-171.1803, 0.64878), (-171.1803, -0.567613), (-170.07243, -0.483021), (-170.14345, -0.471988), (-170.14345, -0.512212), (-170.07243, -0.523245), (-170.27611, 0.647374), (-170.27611, -0.566206), (-170.23589, -0.566206), (-170.23589, 0.647374), (-170.09096, 0.413133), (-170.01994, 0.424165), (-170.01994, 0.464385), (-170.09096, 0.453352), (-143.9544, -113.009964), (-138.25906, -113.009964), (-138.25906, -107.3105), (-143.9544, -107.3105), (-116.58835, -110.940315), (-116.58835, -110.940315), (-116.58835, -110.940315), (-116.58835, -110.940315), (-88.71439, -113.31285), (-85.53026, -113.31285), (-85.53026, -110.12652), (-88.71439, -110.12652), (-69.0005, -111.67041), (-69.00049, -111.67041), (-69.00049, -111.670395), (-69.0005, -111.670395), (-71.5438, -0.982784), (-71.52927, -0.982925), (-71.52927, 0.135951), (-71.5438, 0.135811), (-71.55413, -0.982784), (-71.5438, -0.982784), (-71.5438, 0.135811), (-71.55413, 0.135811), (-71.561035, -0.982784), (-71.55413, -0.982784), (-71.55413, 0.135811), (-71.561035, 0.135811), (-71.3484, -0.982462), (-71.33019, -0.982274), (-71.33019, 0.135343), (-71.3484, 0.135529), (-70.94805, 0.128727), (-71.52927, 0.135951), (-71.52927, -0.982925), (-70.94805, -0.975701), (-70.94262, -0.975701), (-70.94262, 0.128727), (-70.94805, 0.128727), (-70.94805, -0.975701), (-72.07186, -1.042693), (-72.057106, -1.042693), (-72.057106, 0.206423), (-72.07186, 0.206423), (-72.057106, 0.206423), (-72.057106, -1.042693), (-71.41434, -1.042693), (-71.41434, 0.206423), (-71.65969, -0.98851), (-71.65969, 0.152241), (-71.683136, 0.152241), (-71.683136, -0.98851), (-71.35803, -1.042693), (-71.35803, 0.206423), (-71.37125, 0.206423), (-71.37125, -1.042693), (-71.37125, -1.042693), (-71.37125, 0.206423), (-71.39102, 0.206423), (-71.39102, -1.042693), (-71.39102, -1.042693), (-71.39102, 0.206423), (-71.41434, 0.206423), (-71.41434, -1.042693), (-71.35676, -0.232123), (-71.35676, 0.419634), (-71.57147, 0.38246), (-71.589554, 0.379751), (-71.60084, 0.372901), (-71.608376, 0.36265), (-71.61108, 0.348224), (-71.61736, -0.228495), (-71.479164, 0.269652), (-71.479164, 0.281398), (-71.736565, 0.271415), (-71.73977, 0.266024), (-71.479164, 0.281398), (-71.479164, 0.419636), (-71.736565, 0.271415), (-71.479164, 0.269652), (-71.73977, 0.266024), (-71.73348, -0.310698), (-71.73078, -0.325123), (-71.72324, -0.335374), (-71.71196, -0.342224), (-71.69388, -0.344933), (-71.479164, -0.382108), (-71.35676, -0.232123), (-71.61736, -0.228495), (-71.61415, -0.233886), (-71.35676, -0.24387), (-71.35676, -0.24387), (-71.61415, -0.233886), (-71.35676, -0.382106), (-71.3484, -0.982462), (-71.3484, 0.135529), (-71.5646, 0.130269), (-71.5646, -0.977201), (-70.964645, -0.518081), (-70.964645, 0.67089), (-71.24105, 0.664811), (-71.24105, -0.512001), (-72.25003, -1.042693), (-72.07186, -1.042693), (-72.07186, 0.206423), (-72.25003, 0.206423), (-71.43893, 0.152241), (-71.65969, 0.152241), (-71.65969, -0.98851), (-71.43893, -0.98851), (-71.08881, 0.280693), (-71.08881, 0.442409), (-71.36114, 0.280693), (-71.08881, 0.267301), (-71.08881, 0.280693), (-71.36114, 0.280693), (-71.36912, 0.267301), (-71.22008, -0.230349), (-71.22008, 0.442449), (-71.43948, 0.408364), (-71.46278, 0.404153), (-71.482544, 0.392163), (-71.49574, 0.374217), (-71.500374, 0.35305), (-71.500374, -0.230349), (-71.22008, -0.405457), (-71.22008, -0.24374), (-71.4924, -0.24374), (-71.22008, -0.230349), (-71.500374, -0.230349), (-71.4924, -0.24374), (-71.22008, -0.24374), (-71.08881, 0.267301), (-71.36912, 0.267301), (-71.36912, -0.3161), (-71.36448, -0.337267), (-71.35128, -0.355212), (-71.33152, -0.367203), (-71.30822, -0.371413), (-71.08881, -0.405499), (5.646933, -120.60234), (7.358486, -120.60234), (7.358486, -118.890785), (5.646933, -118.890785), (-5.253075, -117.08902), (-3.54152, -117.08902), (-3.54152, -115.377464), (-5.253075, -115.377464)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer4C4_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
                rel material:binding = </root/_materials/M_FridgeDrawer4C4_0>
            }

            def GeomSubset "M_FridgeDrawer4C4_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer4C4_1>
            }

            def GeomSubset "M_FridgeDrawer4C4_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer4C4_2>
            }

            def GeomSubset "M_FridgeDrawer4C4_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33]
                rel material:binding = </root/_materials/M_FridgeDrawer4C4_3>
            }

            def GeomSubset "M_FridgeDrawer4C4_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]
                rel material:binding = </root/_materials/M_FridgeDrawer4C4_4>
            }

            def GeomSubset "M_FridgeDrawer4C4_5" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [63]
                rel material:binding = </root/_materials/M_FridgeDrawer4C4_5>
            }

            def GeomSubset "M_FridgeDrawer4C4_6" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [64]
                rel material:binding = </root/_materials/M_FridgeDrawer4C4_6>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer4C4_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C4_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C4_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge.tga@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C4_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer4C4_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C4_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C4_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C4_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C4_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C4_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C4_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C4_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C4_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C4_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C4_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C4_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C4_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C4_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.5735294, 0.5735294, 0.5735294)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C4_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C4_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer4C4_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C4_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_FridgeDrawer4C4_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C4_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C4_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C4_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C4_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C4_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C4_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C4_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C4_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C4_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C4_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C4_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

