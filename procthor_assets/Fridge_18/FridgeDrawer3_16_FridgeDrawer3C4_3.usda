#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer3C4"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer3C4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.000169, -0.209638, -1.093784), (0.463973, 0.144465, 0.194851)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 52, 53, 70, 63, 58, 37, 41, 57, 63, 34, 35, 62, 62, 35, 36, 64, 57, 41, 40, 69, 71, 38, 39, 70, 69, 40, 38, 71, 64, 36, 37, 58, 70, 39, 34, 63, 28, 34, 39, 29, 58, 77, 76, 64, 71, 79, 78, 69, 71, 70, 53, 80, 79, 57, 69, 78, 81, 62, 64, 76, 82, 62, 82, 83, 52, 63, 77, 58, 57, 81, 53, 52, 83, 80, 85, 84, 28, 29, 95, 94, 93, 92, 35, 34, 28, 84, 88, 89, 36, 35, 88, 40, 41, 86, 90, 38, 91, 85, 29, 39, 91, 38, 40, 90, 37, 36, 89, 87, 41, 37, 92, 93, 37, 87, 95, 92, 87, 86, 94, 95, 86, 41, 93, 94, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 67, 68, 72, 73, 66, 67, 73, 74, 65, 66, 74, 75, 56, 65, 75, 59, 61, 72, 68, 60, 54, 55, 61, 60, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 76, 77, 59, 75, 74, 73, 72, 61, 78, 79, 54, 60, 79, 80, 54, 78, 60, 68, 67, 66, 65, 56, 81, 76, 61, 55, 82, 82, 55, 83, 56, 59, 77, 81, 80, 83, 55, 54, 85, 33, 30, 84, 87, 44, 43, 86, 88, 84, 30, 89, 88, 30, 31, 90, 86, 43, 47, 49, 51, 42, 32, 85, 91, 33, 90, 32, 33, 91, 89, 31, 45, 50, 48, 46, 44, 87, 20, 21, 23, 22, 24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer3C4_0>
            normal3f[] normals = [(0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0.000005031936, 0.9459498, -0.324313), (0.0000053402036, 0.9459498, -0.32431296), (0, 0.9665781, -0.2563721), (0, 0.9665781, -0.2563721), (-0.04479412, 0.077705555, -0.99596953), (-0.029789548, 0.059483312, -0.99778473), (0.029798375, 0.059595667, -0.99777776), (0.044796575, 0.07770644, -0.9959694), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-0.0023989715, -0.00010283443, -0.99999726), (-0.00082760304, -0.0000026149212, -0.9999997), (0.044796575, 0.07770644, -0.9959694), (0.029798375, 0.059595667, -0.99777776), (0.002399303, -0.00010281976, -0.99999726), (0.0008279383, -0.0000024639885, -0.9999997), (-1.9316218e-7, 0, -1), (-1.96075e-7, 0, -1), (-1.9609232e-7, 0, -1), (-1.9796586e-7, 0, -1), (0.0008279383, -0.0000024639885, -0.9999997), (0.002399303, -0.00010281976, -0.99999726), (-1.96075e-7, 0, -1), (-1.9316218e-7, 0, -1), (-0.00082760304, -0.0000026149212, -0.9999997), (-0.0023989715, -0.00010283443, -0.99999726), (-0.029789548, 0.059483312, -0.99778473), (-0.04479412, 0.077705555, -0.99596953), (-1.9796586e-7, 0, -1), (-1.9609232e-7, 0, -1), (0, 0, -1), (0, 0, -1), (-0.000034039076, -0.9840227, 0.17804319), (0, -1, 0), (0, -1, 0), (0, -0.9840227, 0.17804317), (0.9996236, 0.012047359, 0.024645811), (0.9996332, 0.012394963, 0.024077682), (0.99971724, -0.0028998242, 0.023600452), (0.999733, -0.00035489348, 0.023106433), (-0.9995584, -0.008405486, 0.028500468), (-0.99942833, -0.010602458, 0.032104224), (-0.99971974, -0.0028686016, 0.023501271), (-0.99973303, -0.0003590947, 0.023106253), (-0.9995584, -0.008405486, 0.028500468), (-0.9938185, -0.079197094, 0.07779937), (-0.9938185, -0.079197094, 0.07779937), (-0.9945054, -0.08020193, 0.06728086), (-0.99942833, -0.010602458, 0.032104224), (-0.9996237, 0.012047496, 0.02464575), (-0.99973303, -0.0003590947, 0.023106253), (-0.99971974, -0.0028686016, 0.023501271), (-0.9996333, 0.012395922, 0.024075553), (0.99955845, -0.008402288, 0.02849979), (0.999733, -0.00035489348, 0.023106433), (0.99971724, -0.0028998242, 0.023600452), (0.9994285, -0.010593813, 0.032101672), (0.99955845, -0.008402288, 0.02849979), (0.9994285, -0.010593813, 0.032101672), (0.99450576, -0.0802023, 0.06727574), (0.99381906, -0.07920525, 0.077782705), (0.99381906, -0.07920525, 0.077782705), (0, -0.98534113, -0.17059542), (0, -0.9853403, -0.17060052), (0, -0.9853403, -0.17060052), (0, -0.98534113, -0.17059544), (0.0000053402036, 0.9459498, -0.32431296), (0.000005031936, 0.9459498, -0.324313), (0, 0.86658543, -0.49902868), (0, 0.8665855, -0.49902862), (0, -0.85982937, 0.5105815), (0, -0.85982937, 0.5105815), (-0.000034039076, -0.9840227, 0.17804319), (0, -0.9840227, 0.17804317), (0, 0.9881453, 0.15352115), (0, 0.9881453, 0.15352115), (0, 0.9881453, 0.15352115), (0, 0.9881453, 0.15352115), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 2.1339834e-7, 0), (-1, 2.1339834e-7, 0), (-1, 0, 0), (-1, 0, 0), (-1, 2.1339834e-7, 0), (1, 0, 0), (1, 0, 0), (1, 1.8543473e-9, 0), (1, 1.4916136e-9, 0), (1, -8.301668e-9, 0), (1, -4.150834e-9, 0), (1, -1.1133797e-8, 0), (1, -1.6603336e-8, 0), (1, -1.6603336e-8, 0), (1, -4.150834e-9, 0), (1, -8.301668e-9, 0), (1, 0, 0), (1, 1.4916136e-9, 0), (-1, 0, 0), (-1, 0, 0), (-1, 2.1339834e-7, 0), (-1, 0, 0), (0.029798375, 0.059595667, -0.99777776), (-0.029789548, 0.059483312, -0.99778473), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 1.8543473e-9, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (1.5254773e-7, -0.4155137, -0.9095869), (-0.0000034680124, -0.18596216, -0.9825569), (-0.00085647084, -0.18595792, -0.9825574), (0, -0.41551366, -0.90958697), (0, -0.7349027, -0.6781726), (1.5254773e-7, -0.4155137, -0.9095869), (0, -0.41551366, -0.90958697), (-3.6462364e-8, -0.7349027, -0.6781726), (0, -0.92682725, -0.37548786), (0, -0.7349027, -0.6781726), (-3.6462364e-8, -0.7349027, -0.6781726), (-2.3574103e-7, -0.9268274, -0.37548766), (1.9653089e-7, -0.9887039, -0.14988257), (0, -0.92682725, -0.37548786), (-2.3574103e-7, -0.9268274, -0.37548766), (-2.944871e-7, -0.98870385, -0.14988258), (8.06991e-7, 0.5643513, -0.82553464), (-0.00085647084, -0.18595792, -0.9825574), (-0.0000034680124, -0.18596216, -0.9825569), (0, 0.564351, -0.82553494), (0.0000017094426, 0.4714271, -0.881905), (0, 0.47142643, -0.8819054), (8.06991e-7, 0.5643513, -0.82553464), (0, 0.564351, -0.82553494), (-1.5896877e-8, -0.56724, 0.8235525), (0, -0.45428866, 0.8908546), (0.00011598331, -0.45428863, 0.8908546), (0, -0.56724, 0.8235525), (0.00011598331, -0.45428863, 0.8908546), (0, -0.45428866, 0.8908546), (0.000034967376, 0.1977942, 0.98024356), (0, 0.1977942, 0.98024356), (0, 0.9845016, 0.17537533), (-0.0000033905078, 0.9845016, 0.17537533), (1.6618867e-10, 0.9344718, 0.35603747), (0, 0.9344718, 0.35603747), (0, 0.9344718, 0.35603747), (1.6618867e-10, 0.9344718, 0.35603747), (1.1784913e-7, 0.7357055, 0.67730165), (0, 0.7357055, 0.67730165), (0, 0.7357055, 0.67730165), (1.1784913e-7, 0.7357055, 0.67730165), (2.1001853e-10, 0.41000327, 0.91208404), (0, 0.41000327, 0.91208404), (0, 0.41000327, 0.91208404), (2.1001853e-10, 0.41000327, 0.91208404), (0, 0.1977942, 0.98024356), (0.000034967376, 0.1977942, 0.98024356), (0.99971724, -0.0028998242, 0.023600452), (0.9996332, 0.012394963, 0.024077682), (0.9996445, 0.012827516, 0.023370678), (0.9996445, 0.012827516, 0.023370678), (0.9996445, 0.012827516, 0.023370678), (0.9996445, 0.012827516, 0.023370678), (0.9996445, 0.012827516, 0.023370678), (0.99972785, -0.0010909139, 0.023300901), (-0.99971974, -0.0028686016, 0.023501271), (-0.99942833, -0.010602458, 0.032104224), (-0.9996219, 0.01608193, 0.022300998), (-0.999726, -0.0011027143, 0.023381198), (-0.99942833, -0.010602458, 0.032104224), (-0.9945054, -0.08020193, 0.06728086), (-0.9996219, 0.01608193, 0.022300998), (-0.99971974, -0.0028686016, 0.023501271), (-0.999726, -0.0011027143, 0.023381198), (-0.99964464, 0.012829504, 0.02336598), (-0.99964464, 0.012829504, 0.02336598), (-0.99964464, 0.012829504, 0.02336598), (-0.99964464, 0.012829504, 0.02336598), (-0.99964464, 0.012829504, 0.02336598), (-0.9996333, 0.012395922, 0.024075553), (0.99971724, -0.0028998242, 0.023600452), (0.99972785, -0.0010909139, 0.023300901), (0.9996191, 0.01611373, 0.0224018), (0.9994285, -0.010593813, 0.032101672), (0.9994285, -0.010593813, 0.032101672), (0.9996191, 0.01611373, 0.0224018), (0.99450576, -0.0802023, 0.06727574), (1.9653089e-7, -0.9887039, -0.14988257), (-2.944871e-7, -0.98870385, -0.14988258), (0, -0.98534113, -0.17059542), (0, -0.98534113, -0.17059544), (0, 0.8665855, -0.49902862), (0, 0.86658543, -0.49902868), (0, 0.47142643, -0.8819054), (0.0000017094426, 0.4714271, -0.881905), (0, -0.85982937, 0.5105815), (-1.5896877e-8, -0.56724, 0.8235525), (0, -0.56724, 0.8235525), (0, -0.85982937, 0.5105815), (0, 0.988146, 0.15351671), (-0.0000033905078, 0.9845016, 0.17537533), (0, 0.9845016, 0.17537533), (0, 0.988146, 0.15351671), (-1, 2.1339834e-7, 0), (-1, 0, 0), (-1, 6.8057443e-7, 0), (-1, 2.1339834e-7, 0), (-1, 2.1339834e-7, 0), (-1, 6.8057443e-7, 0), (-1, 3.3878075e-7, 0), (1, 1.4916136e-9, 0), (1, 1.8543473e-9, 0), (1, 5.966455e-9, 0), (1, 5.966455e-9, 0), (1, 5.966455e-9, 0), (1, 5.966455e-9, 0), (1, 5.966455e-9, 0), (1, 3.5984422e-9, 0), (1, -1.1133797e-8, 0), (1, -4.150834e-9, 0), (1, 0, 0), (1, 1.4916136e-9, 0), (1, 3.5984422e-9, 0), (1, 0, 0), (1, -4.150834e-9, 0), (-1, 2.1339834e-7, 0), (-1, 3.3878075e-7, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (-0.00016, 0.023406, -1.093784), (-0.000169, 0.023406, -1.093784), (-0.00016, 0.023416, -1.093784), (-0.000169, 0.023416, -1.093784), (0.463973, 0.144465, 0.185163), (0.028659, 0.144465, 0.185163), (0.463973, 0.072208, 0.063484), (0.463973, 0.067066, 0.060422), (0.028659, 0.067066, 0.060422), (0.028659, 0.072208, 0.063484), (0.463973, 0.144465, 0.193509), (0.463973, 0.072208, 0.193509), (0.463973, 0.067066, 0.193509), (0.463973, -0.195217, 0.193509), (0.028659, 0.072208, 0.193509), (0.028659, 0.144465, 0.193509), (0.028659, 0.067066, 0.193509), (0.028659, -0.195217, 0.193509), (0.028659, -0.156936, 0.060422), (0.028659, -0.178174, 0.083802), (0.463973, -0.178174, 0.083802), (0.463973, -0.156936, 0.060422), (0.463973, -0.176557, 0.074855), (0.028659, -0.176557, 0.074855), (0.463973, -0.171954, 0.06727), (0.028659, -0.171954, 0.06727), (0.463973, -0.165063, 0.062201), (0.028659, -0.165063, 0.062201), (0.459243, 0.135777, 0.188012), (0.033389, 0.135777, 0.188012), (0.036002, 0.067389, 0.06925), (0.456631, 0.067389, 0.06925), (0.033233, -0.169181, 0.085633), (0.03589, -0.18809, 0.194851), (0.456742, -0.18809, 0.194851), (0.459399, -0.169181, 0.085633), (0.036002, 0.06532, 0.068018), (0.456631, 0.06532, 0.068018), (0.453747, 0.072208, 0.193509), (0.456742, 0.137235, 0.193509), (0.453747, 0.067066, 0.193509), (0.033304, -0.168141, 0.078693), (0.033304, -0.165512, 0.074361), (0.033304, -0.161577, 0.071467), (0.03325, -0.15604, 0.070432), (0.038885, 0.067066, 0.193509), (0.03589, 0.137235, 0.193509), (0.038885, 0.072208, 0.193509), (0.459382, -0.15604, 0.070432), (0.459328, -0.161577, 0.071467), (0.459328, -0.165512, 0.074361), (0.459328, -0.168141, 0.078693), (0.454332, 0.066712, 0.168046), (0.457394, -0.183449, 0.168046), (0.0383, 0.066712, 0.168046), (0.038294, 0.071221, 0.168046), (0.033828, 0.124279, 0.168046), (0.035238, -0.183449, 0.168046), (0.454337, 0.071221, 0.168046), (0.458804, 0.124279, 0.168046), (0.463973, 0.134301, 0.168046), (0.028659, 0.134301, 0.168046), (0.028659, -0.191262, 0.168046), (0.463973, -0.191262, 0.168046), (0.463973, 0.072208, 0.168046), (0.463973, 0.067066, 0.168046), (0.028659, 0.067066, 0.168046), (0.028659, 0.072208, 0.168046), (0.463973, -0.209638, 0.193509), (0.028659, -0.209638, 0.193509), (0.028659, -0.205682, 0.168046), (0.463973, -0.205682, 0.168046)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-169.52118, -113.22002), (-169.5211, -113.22002), (-169.5211, -113.21994), (-169.52118, -113.21994), (-170.19357, 0.663274), (-170.19357, -0.598411), (-170.17729, -0.591002), (-170.17729, 0.655865), (-171.12013, 0.628626), (-171.14005, 0.648832), (-171.14005, -0.567665), (-171.12013, -0.547458), (-170.211, 0.628626), (-170.19081, 0.648832), (-170.39272, 0.648832), (-170.39272, 0.620256), (-170.39272, 0.620256), (-170.39272, 0.648832), (-170.40709, 0.648832), (-170.40709, 0.620256), (-171.12013, -0.547458), (-171.14005, -0.567665), (-170.40709, -0.567665), (-170.40709, -0.539088), (-170.39272, -0.539088), (-170.39272, -0.567665), (-170.19081, -0.567665), (-170.211, -0.547458), (-170.40709, -0.539088), (-170.40709, -0.567665), (-170.39272, -0.567665), (-170.39272, -0.539088), (-170.40709, 0.620256), (-170.40709, 0.648832), (-171.14005, 0.648832), (-171.12013, 0.628626), (-170.211, -0.547458), (-170.19081, -0.567665), (-170.19081, 0.648832), (-170.211, 0.628626), (-170.36433, 0.680022), (-170.38882, 0.680022), (-170.38882, -0.598854), (-170.36433, -0.598854), (-169.96442, 0.399692), (-170.03925, 0.386742), (-170.03925, -0.311309), (-169.96817, -0.312298), (-169.91357, 0.218308), (-169.98463, 0.215551), (-169.98463, 0.202967), (-169.91357, 0.203956), (-169.91357, 0.218308), (-169.91357, 0.399802), (-169.92892, 0.395732), (-169.98463, 0.363643), (-169.98463, 0.215551), (-169.90984, -0.508206), (-169.91357, 0.203956), (-169.98463, 0.202967), (-169.98463, -0.495253), (-169.96817, -0.326645), (-169.96817, -0.312298), (-170.03925, -0.311309), (-170.03925, -0.323889), (-169.96817, -0.326645), (-170.03925, -0.323889), (-170.03925, -0.471945), (-169.98349, -0.504027), (-169.96817, -0.508096), (-170.1237, 0.622301), (-170.19902, 0.620468), (-170.19902, -0.561978), (-170.1237, -0.56381), (-170.19357, -0.598411), (-170.19357, 0.663274), (-170.25272, 0.661973), (-170.25272, -0.59711), (-170.31403, -0.598854), (-170.31403, 0.680022), (-170.36433, 0.680022), (-170.36433, -0.598854), (-170.33467, 0.651294), (-170.33467, -0.570126), (-170.26323, -0.570126), (-170.26323, 0.651294), (-170.07243, 0.262865), (-170.07243, 0.464386), (-170.0957, 0.464386), (-170.14345, 0.436037), (-170.14345, 0.262865), (-170.14345, 0.248524), (-170.07243, 0.248524), (-170.07243, 0.262865), (-170.14345, 0.262865), (-170.01994, -0.307336), (-170.01994, 0.424183), (-170.09096, 0.413151), (-170.09096, -0.307336), (-170.01994, -0.321677), (-170.09096, -0.321677), (-170.09096, -0.494855), (-170.04323, -0.523205), (-170.01994, -0.523205), (-170.09096, -0.321677), (-170.01994, -0.321677), (-170.01994, -0.307336), (-170.09096, -0.307336), (-170.07243, -0.482968), (-170.07243, 0.248524), (-170.14345, 0.248524), (-170.14345, -0.471936), (-171.14005, -0.567665), (-171.14005, 0.648832), (-171.18034, 0.648832), (-171.18034, -0.567665), (-170.07243, -0.482968), (-170.14345, -0.471936), (-170.14345, -0.512155), (-170.07243, -0.523188), (-170.27611, 0.647429), (-170.27611, -0.566261), (-170.23589, -0.566261), (-170.23589, 0.647429), (-170.09096, 0.413151), (-170.01994, 0.424183), (-170.01994, 0.464404), (-170.09096, 0.453371), (-143.9544, -113.009964), (-138.25906, -113.009964), (-138.25906, -107.3105), (-143.9544, -107.3105), (-116.5884, -110.94038), (-116.58829, -110.94038), (-116.58829, -110.940254), (-116.5884, -110.940254), (-88.71439, -113.31285), (-85.53026, -113.31285), (-85.53026, -110.12652), (-88.71439, -110.12652), (-69.0005, -111.67041), (-69.00049, -111.67041), (-69.00049, -111.670395), (-69.0005, -111.670395), (-71.5438, -0.982784), (-71.52927, -0.982925), (-71.52927, 0.135951), (-71.5438, 0.135811), (-71.55413, -0.982784), (-71.5438, -0.982784), (-71.5438, 0.135811), (-71.55413, 0.135811), (-71.561035, -0.982784), (-71.55413, -0.982784), (-71.55413, 0.135811), (-71.561035, 0.135811), (-71.3484, -0.982463), (-71.33019, -0.982277), (-71.33019, 0.135344), (-71.3484, 0.13553), (-70.94806, 0.128727), (-71.52927, 0.135951), (-71.52927, -0.982925), (-70.94806, -0.975701), (-70.94262, -0.975701), (-70.94262, 0.128727), (-70.94806, 0.128727), (-70.94806, -0.975701), (-72.07186, -1.042693), (-72.057106, -1.042693), (-72.057106, 0.206423), (-72.07186, 0.206423), (-72.057106, 0.206423), (-72.057106, -1.042693), (-71.41434, -1.042693), (-71.41434, 0.206423), (-71.65969, -0.988511), (-71.65969, 0.152242), (-71.683136, 0.152242), (-71.683136, -0.988511), (-71.35803, -1.042693), (-71.35803, 0.206423), (-71.37125, 0.206423), (-71.37125, -1.042693), (-71.37125, -1.042693), (-71.37125, 0.206423), (-71.39102, 0.206423), (-71.39102, -1.042693), (-71.39102, -1.042693), (-71.39102, 0.206423), (-71.41434, 0.206423), (-71.41434, -1.042693), (-71.35676, -0.232124), (-71.35676, 0.419634), (-71.57147, 0.38246), (-71.589554, 0.379751), (-71.60084, 0.372901), (-71.608376, 0.36265), (-71.61108, 0.348225), (-71.61736, -0.228496), (-71.479164, 0.269651), (-71.479164, 0.281398), (-71.73656, 0.271414), (-71.73977, 0.266023), (-71.479164, 0.281398), (-71.479164, 0.419634), (-71.73656, 0.271414), (-71.479164, 0.269651), (-71.73977, 0.266023), (-71.73348, -0.310697), (-71.73078, -0.325122), (-71.72324, -0.335374), (-71.71196, -0.342223), (-71.69388, -0.344932), (-71.479164, -0.382107), (-71.35676, -0.232124), (-71.61736, -0.228496), (-71.61415, -0.233886), (-71.35676, -0.24387), (-71.35676, -0.24387), (-71.61415, -0.233886), (-71.35676, -0.382107), (-71.3484, -0.982463), (-71.3484, 0.13553), (-71.5646, 0.13027), (-71.5646, -0.977203), (-70.964645, -0.518081), (-70.964645, 0.67089), (-71.24105, 0.664811), (-71.24105, -0.512001), (-72.25003, -1.042693), (-72.07186, -1.042693), (-72.07186, 0.206423), (-72.25003, 0.206423), (-71.43893, 0.152242), (-71.65969, 0.152242), (-71.65969, -0.988511), (-71.43893, -0.988511), (-71.08881, 0.280693), (-71.08881, 0.442409), (-71.36114, 0.280693), (-71.08881, 0.267301), (-71.08881, 0.280693), (-71.36114, 0.280693), (-71.36912, 0.267301), (-71.22008, -0.23035), (-71.22008, 0.44245), (-71.43948, 0.408364), (-71.46278, 0.404153), (-71.482544, 0.392163), (-71.49574, 0.374218), (-71.500374, 0.35305), (-71.500374, -0.23035), (-71.22008, -0.405458), (-71.22008, -0.243742), (-71.4924, -0.243742), (-71.22008, -0.23035), (-71.500374, -0.23035), (-71.4924, -0.243742), (-71.22008, -0.243742), (-71.08881, 0.267301), (-71.36912, 0.267301), (-71.36912, -0.3161), (-71.36448, -0.337267), (-71.35128, -0.355212), (-71.33153, -0.367203), (-71.30822, -0.371413), (-71.08881, -0.405499), (5.646933, -120.60234), (7.358486, -120.60234), (7.358486, -118.890785), (5.646933, -118.890785), (-5.253075, -117.08902), (-3.54152, -117.08902), (-3.54152, -115.377464), (-5.253075, -115.377464)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer3C4_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
                rel material:binding = </root/_materials/M_FridgeDrawer3C4_0>
            }

            def GeomSubset "M_FridgeDrawer3C4_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer3C4_1>
            }

            def GeomSubset "M_FridgeDrawer3C4_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer3C4_2>
            }

            def GeomSubset "M_FridgeDrawer3C4_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33]
                rel material:binding = </root/_materials/M_FridgeDrawer3C4_3>
            }

            def GeomSubset "M_FridgeDrawer3C4_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]
                rel material:binding = </root/_materials/M_FridgeDrawer3C4_4>
            }

            def GeomSubset "M_FridgeDrawer3C4_5" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [63]
                rel material:binding = </root/_materials/M_FridgeDrawer3C4_5>
            }

            def GeomSubset "M_FridgeDrawer3C4_6" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [64]
                rel material:binding = </root/_materials/M_FridgeDrawer3C4_6>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer3C4_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C4_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C4_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge.tga@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C4_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer3C4_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C4_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer3C4_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C4_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C4_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C4_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer3C4_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C4_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer3C4_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C4_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C4_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C4_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer3C4_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C4_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.5735294, 0.5735294, 0.5735294)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C4_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C4_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer3C4_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C4_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_FridgeDrawer3C4_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C4_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer3C4_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C4_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C4_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C4_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer3C4_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C4_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer3C4_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C4_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C4_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C4_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

