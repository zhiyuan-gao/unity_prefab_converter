#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "LightSwitchDial_9_LightSwitchDial_9_1_GeomSubset_0"
    {
        def Mesh "LightSwitchDial_9_LightSwitchDial_9_1_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            rel material:binding = </root/_materials/M_LightSwitchDial_9_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.0005, 0.010938, -0.0024), (0.0005, 0.010938, -0.0024), (-0.0005, 0.011938, -0.0024), (0.0005, 0.011938, -0.0024), (-0.0005, 0.010938, -0.0024), (0.0005, 0.010938, -0.0024), (-0.0005, 0.011938, -0.0024), (0.0005, 0.011938, -0.0024), (-0.0005, 0.010938, -0.0024), (0.0005, 0.010938, -0.0024), (-0.0005, 0.011938, -0.0024), (0.0005, 0.011938, -0.0024), (0, -0.009392, 0.02102), (-0, -0.015497, -0.021835), (-0, -0.009446, 0.001772), (0, -0.009886, -0.001201), (0, -0.009557, 0.000269), (0.012649, 0.011384, 0.033657), (0.006846, 0.011384, 0.037535), (-0, 0.011384, 0.038896), (-0.006846, 0.011384, 0.037535), (-0.012649, 0.011384, 0.033657), (-0.016526, 0.011384, 0.027854), (-0.017888, 0.011384, 0.020967), (-0.017889, 0.004484, -0.027524), (-0.016527, 0.002526, -0.034234), (-0.012649, 0.0009, -0.039805), (-0.006845, -0.000186, -0.043527), (-0, -0.000567, -0.044834), (0.006845, -0.000186, -0.043527), (0.012649, 0.0009, -0.039805), (0.016527, 0.002526, -0.034234), (0.017888, 0.004484, -0.027524), (0.017888, 0.011384, 0.020967), (0.016527, 0.011384, 0.027854), (-0.017888, 0.011253, 0.000483), (0.017888, 0.011253, 0.000483), (-0.017888, 0.010269, -0.006223), (0.017888, 0.010269, -0.006223), (0.017888, 0.010918, -0.003007), (-0.017888, 0.010918, -0.003007), (0.011386, -0.009392, 0.032395), (0.012279, -0.008879, 0.033288), (0.012649, -0.007641, 0.033657), (0.006162, -0.009392, 0.035886), (0.006645, -0.008879, 0.037052), (0.006845, -0.007641, 0.037535), (0, -0.009392, 0.037111), (0, -0.008879, 0.038374), (0, -0.007641, 0.038896), (-0.006162, -0.009392, 0.035886), (-0.006645, -0.008879, 0.037052), (-0.006845, -0.007641, 0.037535), (-0.011386, -0.009392, 0.032395), (-0.012279, -0.008879, 0.033288), (-0.012649, -0.007641, 0.033657), (-0.014877, -0.009392, 0.027171), (-0.016043, -0.008879, 0.027654), (-0.016526, -0.007641, 0.027854), (-0.016137, -0.009393, 0.020847), (-0.017375, -0.008879, 0.020968), (-0.017888, -0.007641, 0.021016), (-0.016138, -0.015451, -0.021669), (-0.017375, -0.01499, -0.021927), (-0.017888, -0.013812, -0.022314), (-0.014877, -0.017225, -0.027756), (-0.016043, -0.016869, -0.028363), (-0.016526, -0.015737, -0.028902), (-0.011386, -0.018689, -0.032771), (-0.012279, -0.018448, -0.033771), (-0.012649, -0.017363, -0.034473), (-0.006162, -0.019668, -0.036121), (-0.006645, -0.019503, -0.037384), (-0.006845, -0.01845, -0.038195), (-0, -0.020012, -0.037298), (-0, -0.019874, -0.038653), (-0, -0.018832, -0.039502), (0.006162, -0.019668, -0.036121), (0.006645, -0.019503, -0.037384), (0.006845, -0.01845, -0.038195), (0.011386, -0.018689, -0.032771), (0.012279, -0.018448, -0.033771), (0.012648, -0.017363, -0.034473), (0.014877, -0.017225, -0.027756), (0.016043, -0.016869, -0.028363), (0.016526, -0.015737, -0.028902), (0.016137, -0.015451, -0.021669), (0.017375, -0.01499, -0.021927), (0.017888, -0.013812, -0.022314), (0.016137, -0.009393, 0.020847), (0.017375, -0.008879, 0.020968), (0.017888, -0.007641, 0.021016), (0.014877, -0.009392, 0.027171), (0.016043, -0.008879, 0.027654), (0.016526, -0.007641, 0.027854), (-0.016137, -0.009444, 0.001776), (-0.017375, -0.008931, 0.001758), (-0.017888, -0.007693, 0.001714), (0.016137, -0.009444, 0.001776), (0.017375, -0.008931, 0.001758), (0.017888, -0.007693, 0.001714), (-0.016137, -0.009886, -0.001206), (-0.017375, -0.009389, -0.00133), (-0.017888, -0.008188, -0.001631), (0.016137, -0.009886, -0.001206), (0.017375, -0.009388, -0.00133), (0.017888, -0.008188, -0.001631), (-0.016137, -0.009549, 0.000268), (-0.017375, -0.00904, 0.000193), (-0.017888, -0.007813, 0.000011), (0.016137, -0.009549, 0.000268), (0.017375, -0.00904, 0.000193), (0.017888, -0.007813, 0.000011)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(1.292504, 0.758382), (1.292504, 0.755381), (1.295505, 0.755381), (1.295505, 0.758382)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_LightSwitchDial_9_0"
        {
            token outputs:surface.connect = </root/_materials/M_LightSwitchDial_9_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.19852942, 0.19852942, 0.19852942)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_LightSwitchDial_9_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_LightSwitchDial_9_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

