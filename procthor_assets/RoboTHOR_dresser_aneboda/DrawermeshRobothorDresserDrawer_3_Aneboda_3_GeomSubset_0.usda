#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "DrawermeshRobothorDresserDrawer_3_Aneboda_3_GeomSubset_0"
    {
        def Mesh "DrawermeshRobothorDresserDrawer_3_Aneboda_3_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 5, 4, 1, 3, 6, 5, 0, 2, 7, 6, 3, 1, 4, 7, 2, 1, 14, 15, 0, 12, 3, 0, 15, 2, 13, 14, 1, 3, 12, 13, 2, 6, 10, 9, 5, 8, 4, 5, 9, 7, 11, 10, 6, 4, 8, 11, 7, 9, 13, 12, 8, 10, 14, 13, 9, 11, 15, 14, 10, 8, 12, 15, 11, 22, 16, 17, 23, 23, 17, 18, 24, 24, 18, 19, 25, 25, 19, 20, 26, 26, 20, 21, 27, 27, 21, 16, 22, 18, 17, 20, 19, 20, 17, 16, 21, 22, 23, 26, 27, 24, 25, 26, 23, 30, 31, 28, 29, 28, 33, 32, 29, 31, 34, 33, 28, 30, 35, 34, 31, 29, 32, 35, 30, 48, 49, 50, 51, 40, 41, 43, 42, 42, 43, 37, 36, 37, 43, 41, 39, 42, 36, 38, 40, 39, 41, 46, 45, 41, 40, 47, 46, 40, 38, 44, 47, 45, 46, 50, 49, 46, 47, 51, 50, 47, 44, 48, 51]
            rel material:binding = </root/_materials/M_RobothorDresserDrawer_3_Aneboda_0>
            normal3f[] normals = [(-0.99999994, -0.00029962198, 0), (-0.99999994, -0.00029962198, 0), (-0.99999994, -0.00029962198, 0), (-0.99999994, -0.00029962198, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0.00019976796, 0), (1, 0.00019976796, 0), (1, 0.00019976796, 0), (1, 0.00019976796, 0), (1.45511825e-8, 0, 1), (1.45511825e-8, 0, 1), (1.45511825e-8, 0, 1), (1.45511825e-8, 0, 1), (-0.0002786486, 1, -0.000028971823), (-0.00029128915, 0.99999994, -0.000008836323), (-0.0002784768, 0.99999994, -0.000026736774), (-0.00027935373, 1, 0.000027913233), (-0.00027960527, 0.99999994, 0.000030356294), (-0.000292247, 1, 0.0000075189732), (-0.00027935373, 1, 0.000027913233), (-0.0002784768, 0.99999994, -0.000026736774), (-0.0002915408, 1, -0.00000777398), (-0.00029241876, 0.99999994, 0.000006463251), (-0.00029128915, 0.99999994, -0.000008836323), (-0.0002786486, 1, -0.000028971823), (-0.000292247, 1, 0.0000075189732), (-0.00027960527, 0.99999994, 0.000030356294), (-0.00029241876, 0.99999994, 0.000006463251), (-0.0002915408, 1, -0.00000777398), (0.00030422982, -1, -0.000039801525), (0.00030508265, -0.99999994, 0.000040822422), (0.00030398558, -0.99999994, -0.000043126816), (0.00029171762, -0.99999994, 0.000007651583), (0.0002915509, -0.99999994, 0.000007777981), (0.00029240156, -1, -0.000007709556), (0.00029171762, -0.99999994, 0.000007651583), (0.00030398558, -0.99999994, -0.000043126816), (0.00030491594, -0.99999994, 0.000043753695), (0.00029264568, -0.99999994, -0.000007668095), (0.00030508265, -0.99999994, 0.000040822422), (0.00030422982, -1, -0.000039801525), (0.00029240156, -1, -0.000007709556), (0.0002915509, -0.99999994, 0.000007777981), (0.00029264568, -0.99999994, -0.000007668095), (0.00030491594, -0.99999994, 0.000043753695), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, -0.00019893171, 0), (-1, -0.00019893171, 0), (-1, -0.00019893171, 0), (-1, -0.00019893171, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0.99999994, 0.0003028815, 0), (0.99999994, 0.0003028815, 0), (0.99999994, 0.0003028815, 0), (0.99999994, 0.0003028815, 0), (2.4336156e-8, 0, -1), (2.4336156e-8, 0, -1), (2.4336156e-8, 0, -1), (2.4336156e-8, 0, -1), (-0.00030010962, 0.9999999, 0), (-0.00030010962, 0.9999999, 0), (-0.00030010962, 0.9999999, 0), (-0.00030010962, 0.9999999, 0), (6.6443604e-8, 0, -0.99999994), (6.6443604e-8, 0, -0.99999994), (6.6443604e-8, 0, -0.99999994), (6.6443604e-8, 0, -0.99999994), (0.0002899765, -0.99999994, 0), (0.0002899765, -0.99999994, 0), (0.0002899765, -0.99999994, 0), (0.0002899765, -0.99999994, 0), (-4.1292854e-8, 0, 1), (-4.1292854e-8, 0, 1), (-4.1292854e-8, 0, 1), (-4.1292854e-8, 0, 1), (-0.00030010892, 0.99999994, 0), (-0.00030010892, 0.99999994, 0), (-0.00030010892, 0.99999994, 0), (-0.00030010892, 0.99999994, 0), (0.99999994, 0.00024620863, 0), (0.9999999, 0.00028231184, 0.000018263028), (1, 0.00028227046, 0.000018242092), (0.99999994, 0.00024620863, 0), (1, 0.00028227046, 0.000018242092), (0.9999999, 0.00028231184, 0.000018263028), (1, 0.0003183944, 0.000036515587), (1, 0.0003183944, 0.000036515587), (-1, -0.0003184031, -0.00003649952), (-0.9999999, -0.00028201175, -0.00001825451), (-0.99999994, -0.00028197386, -0.000018235509), (-1, -0.0003184031, -0.00003649952), (-0.99999994, -0.0002456015, 0), (-0.99999994, -0.0002456015, 0), (-0.99999994, -0.00028197386, -0.000018235509), (-0.9999999, -0.00028201175, -0.00001825451), (-0.00028947467, 0.99999994, 0), (-0.00028947467, 0.99999994, 0), (-0.00028947467, 0.99999994, 0), (-0.00028947467, 0.99999994, 0), (-0.9999999, -0.00040384074, 0), (-0.9999999, -0.00040384074, 0), (-0.9999999, -0.00040384074, 0), (-0.9999999, -0.00040384074, 0), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0.9999999, 0.0003979019, 0), (0.9999999, 0.0003979019, 0), (0.9999999, 0.0003979019, 0), (0.9999999, 0.0003979019, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.0000017866397, 0, 1), (-0.0000010376173, 0, 1), (-8.452183e-7, 0, 1), (-0.0000017866397, 0, 1), (-0.0000010376173, 0, 1), (0.0000010376162, 0, 1), (8.452156e-7, 0, 1), (-8.452183e-7, 0, 1), (0.0000010376162, 0, 1), (0.0000017866352, 0, 1), (0.0000017866352, 0, 1), (8.452156e-7, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.399844, -0.189917, -0.457951), (-0.399844, -0.189917, -0.167041), (0.400156, -0.189686, -0.167041), (0.400156, -0.189686, -0.457951), (-0.399841, -0.199918, -0.167041), (-0.399841, -0.199918, -0.457951), (0.400158, -0.199686, -0.457951), (0.400158, -0.199686, -0.167041), (-0.379841, -0.199912, -0.437951), (0.380158, -0.199693, -0.437951), (0.380158, -0.199693, -0.187041), (-0.379841, -0.199912, -0.187041), (-0.379844, -0.189912, -0.437951), (0.380156, -0.189692, -0.437951), (0.380156, -0.189692, -0.187041), (-0.379844, -0.189912, -0.187041), (0.050158, -0.199775, -0.177033), (0.050163, -0.214537, -0.177033), (0.050163, -0.214537, -0.18417), (0.050165, -0.222682, -0.18417), (0.050165, -0.222682, -0.168899), (0.050158, -0.199775, -0.168899), (-0.049842, -0.199805, -0.177033), (-0.049837, -0.214567, -0.177033), (-0.049837, -0.214567, -0.18417), (-0.049835, -0.222711, -0.18417), (-0.049835, -0.222711, -0.168899), (-0.049842, -0.199805, -0.168899), (-0.379844, -0.192565, -0.437951), (-0.379844, -0.192565, -0.187041), (0.380156, -0.192345, -0.187041), (0.380156, -0.192345, -0.437951), (-0.379842, -0.197565, -0.187041), (-0.379842, -0.197565, -0.437951), (0.380158, -0.197345, -0.437951), (0.380158, -0.197345, -0.187041), (-0.365217, -0.189918, -0.455037), (0.366466, -0.189918, -0.455037), (-0.365217, -0.189918, -0.205983), (0.366466, -0.189918, -0.205983), (-0.365217, 0.187641, -0.205983), (0.366466, 0.187641, -0.205983), (-0.365217, 0.187641, -0.455037), (0.366466, 0.187641, -0.455037), (-0.354044, -0.189918, -0.205983), (0.355293, -0.189918, -0.205983), (0.355293, 0.178996, -0.205983), (-0.354044, 0.178996, -0.205983), (-0.354044, -0.189918, -0.445757), (0.355293, -0.189918, -0.445757), (0.355293, 0.178996, -0.445757), (-0.354044, 0.178996, -0.445757)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-2.205307, 1.910151), (-2.205307, 1.927493), (-2.70976, 1.927492), (-2.70976, 1.910152), (4.215607, 2.922874), (4.215611, 2.940215), (2.828376, 2.940616), (2.82837, 2.923275), (-2.70976, 1.86438), (-2.70976, 1.84704), (-2.205308, 1.847041), (-2.205307, 1.864379), (2.828369, 3.012918), (2.828375, 2.995576), (4.215613, 2.995976), (4.215607, 3.013316), (2.828375, 3.068277), (4.180931, 3.102955), (2.863055, 3.102955), (2.828375, 3.57273), (2.863056, 3.538048), (4.215613, 3.57273), (2.828375, 3.57273), (2.863055, 3.102955), (4.215613, 3.068277), (4.180931, 3.538048), (4.180931, 3.102955), (2.828375, 3.068277), (4.215613, 3.57273), (2.863056, 3.538048), (4.180931, 3.538048), (4.215613, 3.068277), (4.215612, 3.620808), (4.180931, 4.090578), (4.180931, 3.655488), (2.828375, 3.620808), (2.863056, 3.655488), (2.828375, 4.12526), (2.828375, 3.620808), (4.180931, 3.655488), (4.215611, 4.12526), (2.863056, 4.090579), (4.180931, 4.090578), (4.215612, 3.620808), (2.828375, 4.12526), (2.863056, 3.655488), (2.863056, 4.090579), (4.215611, 4.12526), (-0.160065, -0.230363), (-0.160071, -0.213023), (-1.477946, -0.213403), (-1.47794, -0.230742), (-2.640398, 1.548817), (-2.640398, 1.531475), (-2.205308, 1.531475), (-2.205307, 1.548816), (-1.477942, -0.276515), (-1.477947, -0.293856), (-0.160071, -0.294237), (-0.160067, -0.276896), (-2.205302, 1.468364), (-2.205302, 1.485703), (-2.640391, 1.485703), (-2.640392, 1.468363), (-2.39606, 0.81789), (-2.222654, 0.817837), (-2.222649, 0.843437), (-2.396051, 0.843488), (-2.396051, 0.759688), (-2.222649, 0.759688), (-2.222649, 0.772065), (-2.396051, 0.772065), (-2.396058, 0.699793), (-2.222652, 0.699743), (-2.22265, 0.713866), (-2.396054, 0.713915), (-2.396243, 0.239495), (-2.222836, 0.239495), (-2.222836, 0.265975), (-2.396242, 0.265975), (-2.396054, 0.614198), (-2.222649, 0.614247), (-2.222659, 0.65397), (-2.396065, 0.653918), (-2.396239, 0.179619), (-2.222836, 0.179619), (-2.222835, 0.193722), (-2.396239, 0.193722), (-2.880972, -2.75173), (-2.880972, -2.739354), (-2.895096, -2.725251), (-2.895096, -2.75173), (-2.895096, -2.725251), (-2.880972, -2.739354), (-2.855373, -2.739353), (-2.855374, -2.725251), (-2.89509, -2.81161), (-2.869492, -2.81161), (-2.855371, -2.797505), (-2.89509, -2.797504), (-2.869492, -2.823986), (-2.855371, -2.823986), (-2.855371, -2.797505), (-2.869492, -2.81161), (-1.649688, -2.809327), (-0.914597, -2.809327), (-0.914597, -0.582769), (-1.649689, -0.58277), (0.687873, -0.45978), (0.702519, -0.459781), (0.70252, 0.275372), (0.687873, 0.275371), (-2.038495, -2.809401), (-2.023846, -2.809406), (-2.023204, -0.582695), (-2.037849, -0.58269), (0.648078, 0.275308), (0.633429, 0.27531), (0.633428, -0.459719), (0.648078, -0.459717), (-2.078671, -0.582762), (-2.093318, -0.582766), (-2.092677, -2.809338), (-2.078027, -2.809333), (-0.68829, -1.129599), (1.111853, -1.129599), (1.111853, -0.402833), (-0.68829, -0.402833), (-0.210293, -1.411714), (1.633492, -1.411714), (1.633493, -0.993113), (-0.210293, -0.993114), (-0.210293, -1.40976), (1.633492, -1.40976), (1.633492, -0.666107), (-0.210293, -0.666107), (-0.016182, -1.251679), (0.727471, -1.251679), (0.727471, -0.833079), (-0.016182, -0.833079), (-0.016182, -1.371247), (0.727471, -1.371247), (0.727471, -0.952647), (-0.016182, -0.952647), (1.63349, -1.201146), (1.633491, -0.457495), (1.611669, -0.474381), (1.611669, -1.201146), (1.633491, -0.457495), (-0.210291, -0.457495), (-0.18847, -0.474381), (1.611669, -0.474381), (-0.210291, -0.457495), (-0.210291, -1.201146), (-0.18847, -1.201146), (-0.18847, -0.474381), (0.70474, -1.078809), (-0.022027, -1.078809), (-0.022027, -1.479285), (0.70474, -1.479285), (1.111853, -0.725041), (-0.68829, -0.725041), (-0.68829, -1.125518), (1.111853, -1.125518), (0.70474, -1.193441), (-0.022027, -1.193441), (-0.022027, -1.593917), (0.70474, -1.593917)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorDresserDrawer_3_Aneboda_0"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorDresserDrawer_3_Aneboda_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorDresserDrawer_3_Aneboda_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorDresserDrawer_3_Aneboda_0/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/TexturesCom_WoodWhite1.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDresserDrawer_3_Aneboda_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDresserDrawer_3_Aneboda_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

