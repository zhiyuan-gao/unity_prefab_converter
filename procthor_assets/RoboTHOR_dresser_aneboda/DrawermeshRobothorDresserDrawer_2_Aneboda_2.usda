#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "RobothorDresserDrawer_2_Aneboda"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "RobothorDresserDrawer_2_Aneboda" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.399844, -0.222711, -0.157951), (0.400158, 0.187641, 0.132959)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 5, 4, 1, 3, 6, 5, 0, 2, 7, 6, 3, 1, 4, 7, 2, 1, 14, 15, 0, 12, 3, 0, 15, 2, 13, 14, 1, 3, 12, 13, 2, 6, 10, 9, 5, 8, 4, 5, 9, 7, 11, 10, 6, 4, 8, 11, 7, 9, 13, 12, 8, 10, 14, 13, 9, 11, 15, 14, 10, 8, 12, 15, 11, 22, 16, 17, 23, 23, 17, 18, 24, 24, 18, 19, 25, 25, 19, 20, 26, 26, 20, 21, 27, 27, 21, 16, 22, 18, 17, 20, 19, 20, 17, 16, 21, 22, 23, 26, 27, 24, 25, 26, 23, 30, 31, 28, 29, 28, 33, 32, 29, 31, 34, 33, 28, 30, 35, 34, 31, 29, 32, 35, 30, 48, 49, 50, 51, 40, 41, 43, 42, 42, 43, 37, 36, 37, 43, 41, 39, 42, 36, 38, 40, 39, 41, 46, 45, 41, 40, 47, 46, 40, 38, 44, 47, 45, 46, 50, 49, 46, 47, 51, 50, 47, 44, 48, 51, 35, 32, 33, 34]
            rel material:binding = </root/_materials/M_RobothorDresserDrawer_2_Aneboda_0>
            normal3f[] normals = [(-1, -0.00029962204, 0), (-1, -0.00029962204, 0), (-1, -0.00029962204, 0), (-1, -0.00029962204, 0), (-1.4551181e-8, 0, -1), (-1.4551181e-8, 0, -1), (-1.4551181e-8, 0, -1), (-1.4551181e-8, 0, -1), (1, 0.00019976796, 0), (1, 0.00019976796, 0), (1, 0.00019976796, 0), (1, 0.00019976796, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.00026598858, 1, -0.000064802996), (-0.00029108598, 1, -0.000009412082), (-0.00026564766, 0.99999994, -0.000060038434), (-0.00026739071, 0.99999994, 0.000060919632), (-0.00026789025, 0.99999994, 0.000066203735), (-0.00029298686, 1, 0.000008113312), (-0.00026739071, 0.99999994, 0.000060919632), (-0.00026564766, 0.99999994, -0.000060038434), (-0.00029158543, 0.99999994, -0.000007774282), (-0.00029332784, 0.99999994, 0.0000064632372), (-0.00029108598, 1, -0.000009412082), (-0.00026598858, 1, -0.000064802996), (-0.00029298686, 1, 0.000008113312), (-0.00026789025, 0.99999994, 0.000066203735), (-0.00029332784, 0.99999994, 0.0000064632372), (-0.00029158543, 0.99999994, -0.000007774282), (0.00030423034, -0.99999994, -0.000039801474), (0.00030508245, -0.99999994, 0.000040823932), (0.00030398613, -0.99999994, -0.000043126845), (0.0002917173, -0.99999994, 0.000007651582), (0.00029155056, -0.99999994, 0.000007777968), (0.00029240188, -1, -0.000007709862), (0.0002917173, -0.99999994, 0.000007651582), (0.00030398613, -0.99999994, -0.000043126845), (0.0003049158, -1, 0.000043755248), (0.00029264603, -0.99999994, -0.000007668386), (0.00030508245, -0.99999994, 0.000040823932), (0.00030423034, -0.99999994, -0.000039801474), (0.00029240188, -1, -0.000007709862), (0.00029155056, -0.99999994, 0.000007777968), (0.00029264603, -0.99999994, -0.000007668386), (0.0003049158, -1, 0.000043755248), (1.5317806e-8, 0, 1), (1.5317806e-8, 0, 1), (1.5317806e-8, 0, 1), (1.5317806e-8, 0, 1), (-1, -0.00020190001, 0), (-1, -0.00020190001, 0), (-1, -0.00020190001, 0), (-1, -0.00020190001, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0.99999994, 0.00029994082, 0), (0.99999994, 0.00029994082, 0), (0.99999994, 0.00029994082, 0), (0.99999994, 0.00029994082, 0), (-7.239483e-9, 0, -1), (-7.239483e-9, 0, -1), (-7.239483e-9, 0, -1), (-7.239483e-9, 0, -1), (-0.0003001093, 0.99999994, 0), (-0.0003001093, 0.99999994, 0), (-0.0003001093, 0.99999994, 0), (-0.0003001093, 0.99999994, 0), (-1.9821412e-8, 0, -0.99999994), (-1.9821412e-8, 0, -0.99999994), (-1.9821412e-8, 0, -0.99999994), (-1.9821412e-8, 0, -0.99999994), (0.00028997666, -0.99999994, 0), (0.00028997666, -0.99999994, 0), (0.00028997666, -0.99999994, 0), (0.00028997666, -0.99999994, 0), (2.372406e-8, 0, 1), (2.372406e-8, 0, 1), (2.372406e-8, 0, 1), (2.372406e-8, 0, 1), (-0.0002901256, 0.99999994, 0), (-0.0002901256, 0.99999994, 0), (-0.0002901256, 0.99999994, 0), (-0.0002901256, 0.99999994, 0), (0.99999994, 0.0002455708, 0), (1, 0.00028200162, 0.000018267358), (0.99999994, 0.00028195983, 0.000018246401), (0.99999994, 0.0002455708, 0), (0.99999994, 0.00028195983, 0.000018246401), (1, 0.00028200162, 0.000018267358), (1, 0.00031841156, 0.000036524238), (1, 0.00031841156, 0.000036524238), (-1, -0.0003184031, -0.00003649952), (-1, -0.00028217104, -0.000018254514), (-1, -0.0002821333, -0.0000182355), (-1, -0.0003184031, -0.00003649952), (-1, -0.00024592015, 0), (-1, -0.00024592015, 0), (-1, -0.0002821333, -0.0000182355), (-1, -0.00028217104, -0.000018254514), (-0.00028947464, 0.99999994, 0), (-0.00028947464, 0.99999994, 0), (-0.00028947464, 0.99999994, 0), (-0.00028947464, 0.99999994, 0), (-0.9999999, -0.0003979003, 0), (-0.9999999, -0.0003979003, 0), (-0.9999999, -0.0003979003, 0), (-0.9999999, -0.0003979003, 0), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0.9999999, 0.0004038391, 0), (0.9999999, 0.0004038391, 0), (0.9999999, 0.0004038391, 0), (0.9999999, 0.0004038391, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0.00028947464, -0.99999994, 0), (0.00028947464, -0.99999994, 0), (0.00028947464, -0.99999994, 0), (0.00028947464, -0.99999994, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.399844, -0.189917, -0.157951), (-0.399844, -0.189917, 0.132959), (0.400156, -0.189686, 0.132959), (0.400156, -0.189686, -0.157951), (-0.399841, -0.199918, 0.132959), (-0.399841, -0.199918, -0.157951), (0.400158, -0.199686, -0.157951), (0.400158, -0.199686, 0.132959), (-0.379841, -0.199912, -0.137951), (0.380158, -0.199693, -0.137951), (0.380158, -0.199693, 0.11296), (-0.379841, -0.199912, 0.11296), (-0.379844, -0.189913, -0.137951), (0.380156, -0.189692, -0.137951), (0.380156, -0.189692, 0.11296), (-0.379844, -0.189913, 0.11296), (0.050158, -0.199776, 0.122967), (0.050163, -0.214537, 0.122967), (0.050163, -0.214537, 0.11583), (0.050165, -0.222682, 0.11583), (0.050165, -0.222682, 0.131101), (0.050158, -0.199776, 0.131101), (-0.049842, -0.199805, 0.122967), (-0.049837, -0.214567, 0.122967), (-0.049837, -0.214567, 0.11583), (-0.049835, -0.222711, 0.11583), (-0.049835, -0.222711, 0.131101), (-0.049842, -0.199805, 0.131101), (-0.379844, -0.192565, -0.137951), (-0.379844, -0.192565, 0.11296), (0.380156, -0.192345, 0.11296), (0.380156, -0.192345, -0.137951), (-0.379842, -0.197565, 0.11296), (-0.379842, -0.197565, -0.137951), (0.380158, -0.197345, -0.137951), (0.380158, -0.197345, 0.11296), (-0.365217, -0.189918, -0.154439), (0.366466, -0.189918, -0.154439), (-0.365217, -0.189918, 0.094614), (0.366466, -0.189918, 0.094614), (-0.365217, 0.187641, 0.094614), (0.366466, 0.187641, 0.094614), (-0.365217, 0.187641, -0.154439), (0.366466, 0.187641, -0.154439), (-0.354044, -0.189918, 0.094614), (0.355293, -0.189918, 0.094614), (0.355293, 0.178996, 0.094614), (-0.354044, 0.178996, 0.094614), (-0.354044, -0.189918, -0.14516), (0.355293, -0.189918, -0.14516), (0.355293, 0.178996, -0.14516), (-0.354044, 0.178996, -0.14516)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-2.205307, 1.657702), (-2.205307, 1.675043), (-2.70976, 1.675043), (-2.70976, 1.657702), (2.798586, 3.034554), (2.798591, 3.051895), (1.411355, 3.052297), (1.41135, 3.034956), (-2.70976, 1.611929), (-2.70976, 1.59459), (-2.205307, 1.594589), (-2.205307, 1.611929), (1.411348, 2.988384), (1.411354, 2.97104), (2.798592, 2.971442), (2.798586, 2.988781), (1.411152, 2.420816), (2.763708, 2.455497), (1.445831, 2.455497), (1.411151, 2.925268), (1.445831, 2.890587), (2.798387, 2.925268), (1.411151, 2.925268), (1.445831, 2.455497), (2.798387, 2.420816), (2.763708, 2.890586), (2.763708, 2.455497), (1.411152, 2.420816), (2.798387, 2.925268), (1.445831, 2.890587), (2.763708, 2.890586), (2.798387, 2.420816), (2.798387, 1.870589), (2.763706, 2.340362), (2.763706, 1.905271), (1.41115, 1.870589), (1.445831, 1.905271), (1.41115, 2.375042), (1.41115, 1.870589), (2.763706, 1.905271), (2.798387, 2.375042), (1.445831, 2.340362), (2.763706, 2.340362), (2.798387, 1.870589), (1.41115, 2.375042), (1.445831, 1.905271), (1.445831, 2.340362), (2.798387, 2.375042), (-0.160065, -0.484339), (-0.160071, -0.466999), (-1.477946, -0.467381), (-1.47794, -0.484718), (-2.640392, 1.296364), (-2.640393, 1.279024), (-2.205302, 1.279024), (-2.205302, 1.296365), (-1.477942, -0.530491), (-1.477947, -0.54783), (-0.160071, -0.548212), (-0.160067, -0.530871), (-2.205302, 1.215915), (-2.205302, 1.233252), (-2.640393, 1.233252), (-2.640393, 1.215915), (-2.396249, 0.542827), (-2.222846, 0.542777), (-2.222838, 0.568375), (-2.396243, 0.568425), (-2.396239, 0.121472), (-2.222836, 0.121471), (-2.222836, 0.133847), (-2.396239, 0.133847), (-2.396246, 0.482882), (-2.222841, 0.482832), (-2.222837, 0.496955), (-2.396241, 0.497004), (-2.396242, 0.049218), (-2.222836, 0.049219), (-2.222837, 0.075699), (-2.396243, 0.075699), (-2.396242, 0.39729), (-2.222836, 0.397339), (-2.22285, 0.437059), (-2.396252, 0.43701), (-2.396238, -0.01066), (-2.222836, -0.01066), (-2.222836, 0.003446), (-2.396239, 0.003446), (-2.880967, -2.896239), (-2.880967, -2.883864), (-2.89509, -2.869758), (-2.895089, -2.896238), (-2.89509, -2.869758), (-2.880967, -2.883864), (-2.855371, -2.883864), (-2.855371, -2.869758), (-2.89509, -2.956117), (-2.869492, -2.956117), (-2.855371, -2.942013), (-2.89509, -2.942012), (-2.869492, -2.968494), (-2.855371, -2.968494), (-2.855371, -2.942013), (-2.869492, -2.956117), (-3.792431, -2.809332), (-3.057342, -2.809331), (-3.057343, -0.582765), (-3.79243, -0.582765), (0.470104, -0.442443), (0.484751, -0.442442), (0.484751, 0.292727), (0.470103, 0.292725), (-3.207031, -1.46171), (-3.192383, -1.461715), (-3.191738, 0.764918), (-3.206386, 0.764924), (0.43031, 0.292668), (0.41566, 0.292669), (0.41566, -0.442384), (0.43031, -0.442384), (-3.134223, 0.764902), (-3.14887, 0.764896), (-3.148229, -1.461681), (-3.133579, -1.461676), (-0.68829, -1.129599), (1.111853, -1.129599), (1.111853, -0.402833), (-0.68829, -0.402833), (-0.210293, -1.411714), (1.633492, -1.411714), (1.633493, -0.993113), (-0.210293, -0.993114), (-0.210293, -1.40976), (1.633492, -1.40976), (1.633492, -0.666107), (-0.210293, -0.666107), (-0.016182, -1.251679), (0.727471, -1.251679), (0.727471, -0.833079), (-0.016182, -0.833079), (-0.016182, -1.371247), (0.727471, -1.371247), (0.727471, -0.952647), (-0.016182, -0.952647), (1.63349, -1.201146), (1.633491, -0.457495), (1.611669, -0.474381), (1.611669, -1.201146), (1.633491, -0.457495), (-0.210291, -0.457495), (-0.18847, -0.474381), (1.611669, -0.474381), (-0.210291, -0.457495), (-0.210291, -1.201146), (-0.18847, -1.201146), (-0.18847, -0.474381), (0.70474, -1.078809), (-0.022027, -1.078809), (-0.022027, -1.479285), (0.70474, -1.479285), (1.111853, -0.725041), (-0.68829, -0.725041), (-0.68829, -1.125518), (1.111853, -1.125518), (0.70474, -1.193441), (-0.022027, -1.193441), (-0.022027, -1.593917), (0.70474, -1.593917), (-3.100104, -1.461679), (-3.100104, 0.764886), (-3.835192, 0.764886), (-3.835193, -1.461679)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_RobothorDresserDrawer_2_Aneboda_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]
                rel material:binding = </root/_materials/M_RobothorDresserDrawer_2_Aneboda_0>
            }

            def GeomSubset "M_RobothorDresserDrawer_2_Aneboda_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [42]
                rel material:binding = </root/_materials/M_RobothorDresserDrawer_2_Aneboda_1>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorDresserDrawer_2_Aneboda_0"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorDresserDrawer_2_Aneboda_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorDresserDrawer_2_Aneboda_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorDresserDrawer_2_Aneboda_0/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/TexturesCom_WoodWhite1.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDresserDrawer_2_Aneboda_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDresserDrawer_2_Aneboda_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_RobothorDresserDrawer_2_Aneboda_1"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorDresserDrawer_2_Aneboda_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorDresserDrawer_2_Aneboda_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorDresserDrawer_2_Aneboda_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/WoodGrains2.jpg@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDresserDrawer_2_Aneboda_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/FloorDarkNRM.jpg@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDresserDrawer_2_Aneboda_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

