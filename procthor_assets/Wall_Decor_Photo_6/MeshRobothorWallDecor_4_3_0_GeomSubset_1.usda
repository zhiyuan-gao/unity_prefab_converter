#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshRobothorWallDecor_4_3_0_GeomSubset_1"
    {
        def Mesh "MeshRobothorWallDecor_4_3_0_GeomSubset_1"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [4, 5, 7, 6, 12, 14, 13, 12, 15, 14, 13, 17, 16, 13, 14, 17, 16, 19, 18, 16, 17, 19, 20, 22, 21, 20, 23, 22, 13, 18, 12, 13, 16, 18, 17, 15, 19, 17, 14, 15, 24, 15, 12, 24, 23, 15, 20, 18, 19, 20, 25, 18, 25, 12, 18, 25, 24, 12, 23, 19, 15, 23, 20, 19, 25, 21, 26, 25, 20, 21, 24, 26, 27, 24, 25, 26, 23, 27, 22, 23, 24, 27, 29, 22, 27, 29, 30, 22, 31, 26, 21, 31, 28, 26, 28, 27, 26, 28, 29, 27, 30, 21, 22, 30, 31, 21]
            rel material:binding = </root/_materials/M_RobothorWallDecor_4_3_1>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0.0000024052545, 0), (-1, -0.0000028539832, 0), (-1, 0.000002538338, 0), (-1, 0.0000024052545, 0), (-1, -0.0000029870616, 0), (-1, -0.0000028539832, 0), (0, 0.99999994, 0.00034479162), (0, 0.99999994, 0.00034479058), (0, 0.9999999, 0.00034478912), (0, 0.99999994, 0.00034479162), (0, 0.99999994, 0.00034479305), (0, 0.99999994, 0.00034479058), (1, 0.0000023959676, 0), (1, -0.0000032304104, 0), (1, 0.0000025383383, 0), (1, 0.0000023959676, 0), (1, -0.000003372775, 0), (1, -0.0000032304104, 0), (0, 0.0001888684, -1), (0, 0.0001888684, -1), (0, 0.00018886842, -1), (0, 0.0001888684, -1), (0, 0.0001888684, -1), (0, 0.0001888684, -1), (0, 0.00033217348, -1), (0, 0.00033217343, -1), (0, 0.00033217348, -1), (0, 0.00033217348, -1), (0, 0.00033217345, -1), (0, 0.00033217343, -1), (0, -0.00033215777, 1), (0, -0.00033215774, 0.99999994), (0, -0.0003321577, 0.99999994), (0, -0.00033215777, 1), (0, -0.00033215777, 1), (0, -0.00033215774, 0.99999994), (0.00003789046, -1, -0.00030386474), (-0.000040419454, -0.99999994, -0.00030861152), (0.000041146584, -0.99999994, -0.00030620198), (0.00003789046, -1, -0.00030386474), (-0.000041183812, -0.9999999, -0.00030619657), (-0.000040419454, -0.99999994, -0.00030861152), (0.00003788729, -0.9999999, -0.0003038656), (-0.00004041881, -1, -0.00030861437), (0.0000411453, -0.99999994, -0.00030620475), (0.00003788729, -0.9999999, -0.0003038656), (-0.000041180956, -0.9999999, -0.0003061971), (-0.00004041881, -1, -0.00030861437), (-0.000041180956, -0.9999999, -0.0003061971), (0.000041146584, -0.99999994, -0.00030620198), (-0.00004041881, -1, -0.00030861437), (-0.000041180956, -0.9999999, -0.0003061971), (0.00003789046, -1, -0.00030386474), (0.000041146584, -0.99999994, -0.00030620198), (-0.000041183812, -0.9999999, -0.00030619657), (0.0000411453, -0.99999994, -0.00030620475), (-0.000040419454, -0.99999994, -0.00030861152), (-0.000041183812, -0.9999999, -0.00030619657), (0.00003788729, -0.9999999, -0.0003038656), (0.0000411453, -0.99999994, -0.00030620475), (-1, 0.000010458733, 0), (-1, -0.0000036942527, 0), (-1, 0.000010551715, 0), (-1, 0.000010458733, 0), (-0.99999994, -0.0000037872346, 0), (-1, -0.0000036942527, 0), (0, -0.00018327929, 1), (0, -0.00018327926, 1), (0, -0.00018327929, 1), (0, -0.00018327929, 1), (0, -0.00018327926, 1), (0, -0.00018327926, 1), (1, 0.000020920188, 0), (1, -0.000007565002, 0), (1, 0.000021107368, 0), (1, 0.000020920188, 0), (1, -0.000007752076, 0), (1, -0.000007565002, 0), (0.0000036644628, -0.99999994, -0.00034576096), (-0.000007157408, -0.99999994, -0.00034724257), (0.0000072472185, -0.99999994, -0.00034703952), (0.0000036644628, -0.99999994, -0.00034576096), (-0.0000037200662, -0.99999994, -0.00034590685), (-0.000007157408, -0.99999994, -0.00034724257), (0.0000036442004, -0.99999994, -0.00034577594), (-0.000007195568, -0.99999994, -0.00034717986), (0.0000072090575, -0.99999994, -0.00034705718), (0.0000036442004, -0.99999994, -0.00034577594), (-0.0000037403413, -1, -0.00034583776), (-0.000007195568, -0.99999994, -0.00034717986), (-0.0000037403413, -1, -0.00034583776), (0.0000072472185, -0.99999994, -0.00034703952), (-0.000007195568, -0.99999994, -0.00034717986), (-0.0000037403413, -1, -0.00034583776), (0.0000036644628, -0.99999994, -0.00034576096), (0.0000072472185, -0.99999994, -0.00034703952), (-0.0000037200662, -0.99999994, -0.00034590685), (0.0000072090575, -0.99999994, -0.00034705718), (-0.000007157408, -0.99999994, -0.00034724257), (-0.0000037200662, -0.99999994, -0.00034590685), (0.0000036442004, -0.99999994, -0.00034577594), (0.0000072090575, -0.99999994, -0.00034705718)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.001721, 0.014509, -0.555408), (0.002368, 0.014509, -0.555408), (0.001721, 0.015066, -0.555408), (0.002368, 0.015066, -0.555408), (0.001721, 0.014509, -0.555408), (0.002368, 0.014509, -0.555408), (0.001721, 0.015066, -0.555408), (0.002368, 0.015066, -0.555408), (0.001721, 0.014509, -0.555408), (0.002368, 0.014509, -0.555408), (0.001721, 0.015066, -0.555408), (0.002368, 0.015066, -0.555408), (-0.429411, -0.006105, -0.276472), (-0.429411, 0.014979, -0.276465), (-0.429411, 0.014787, 0.280397), (-0.429411, -0.006298, 0.28039), (0.433343, 0.014979, -0.276465), (0.433343, 0.014787, 0.280397), (0.433343, -0.006105, -0.276472), (0.433343, -0.006298, 0.28039), (0.417042, -0.006294, 0.265135), (0.417042, -0.000929, 0.265136), (-0.413111, -0.000929, 0.265136), (-0.413111, -0.006294, 0.265135), (-0.413111, -0.006109, -0.261217), (0.417042, -0.006109, -0.261217), (0.417042, -0.000743, -0.261216), (-0.413111, -0.000743, -0.261216), (0.412035, -0.000744, -0.25823), (-0.408104, -0.000744, -0.25823), (-0.408104, -0.000928, 0.262151), (0.412035, -0.000928, 0.262151)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-19.367811, -9.606503), (-19.367811, -9.606655), (-19.36766, -9.606655), (-19.36766, -9.606503), (-18.92621, 0.496147), (-20.878542, 0.422902), (-18.926235, 0.422224), (-18.92621, 0.496147), (-20.878517, 0.496825), (-20.878542, 0.422902), (-18.274233, -0.384711), (-20.876123, 1.567579), (-20.876123, -0.384711), (-18.274233, -0.384711), (-18.274233, 1.567579), (-20.876123, 1.567579), (-18.926281, 0.476635), (-20.878471, 0.402035), (-18.926256, 0.402714), (-18.926281, 0.476635), (-20.878496, 0.475954), (-20.878471, 0.402035), (-18.208565, 0.636526), (-20.712126, 0.617714), (-18.208565, 0.617716), (-18.208565, 0.636526), (-20.712126, 0.636525), (-20.712126, 0.617714), (-20.770592, 0.168532), (-18.168613, 0.242449), (-20.770592, 0.242447), (-20.770592, 0.168532), (-18.168613, 0.168534), (-18.168613, 0.242449), (-18.168652, 0.263895), (-20.770554, 0.189968), (-18.168652, 0.18997), (-18.168652, 0.263895), (-20.770554, 0.263893), (-20.770554, 0.189968), (-20.721394, -0.497451), (-20.770554, 1.401366), (-20.770554, -0.550933), (-20.721394, -0.497451), (-20.721394, 1.347883), (-20.770554, 1.401366), (-18.217812, 1.347883), (-18.168652, -0.550932), (-18.168652, 1.401366), (-18.217812, 1.347883), (-18.217812, -0.49745), (-18.168652, -0.550932), (-18.217812, -0.49745), (-20.770554, -0.550933), (-18.168652, -0.550932), (-18.217812, -0.49745), (-20.721394, -0.497451), (-20.770554, -0.550933), (-20.721394, 1.347883), (-18.168652, 1.401366), (-20.770554, 1.401366), (-20.721394, 1.347883), (-18.217812, 1.347883), (-18.168652, 1.401366), (-18.969456, 0.433438), (-20.815151, 0.41527), (-18.969461, 0.414624), (-18.969456, 0.433438), (-20.815145, 0.434084), (-20.815151, 0.41527), (-20.711739, 0.607981), (-18.208954, 0.626787), (-20.711739, 0.626786), (-20.711739, 0.607981), (-18.208954, 0.607983), (-18.208954, 0.626787), (-20.81515, 0.40481), (-18.96946, 0.424286), (-20.815153, 0.423624), (-20.81515, 0.40481), (-18.969454, 0.405472), (-18.96946, 0.424286), (-21.19094, -0.265751), (-21.20604, 1.569066), (-21.20604, -0.276224), (-21.19094, -0.265751), (-21.19094, 1.558592), (-21.20604, 1.569066), (-18.717615, 1.558592), (-18.702517, -0.276222), (-18.702517, 1.569065), (-18.717615, 1.558592), (-18.717615, -0.265749), (-18.702517, -0.276222), (-18.717615, -0.265749), (-21.20604, -0.276224), (-18.702517, -0.276222), (-18.717615, -0.265749), (-21.19094, -0.265751), (-21.20604, -0.276224), (-21.19094, 1.558592), (-18.702517, 1.569065), (-21.20604, 1.569066), (-21.19094, 1.558592), (-18.717615, 1.558592), (-18.702517, 1.569065)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorWallDecor_4_3_1"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecor_4_3_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorWallDecor_4_3_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorWallDecor_4_3_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/DarkWood2.tif@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecor_4_3_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecor_4_3_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

