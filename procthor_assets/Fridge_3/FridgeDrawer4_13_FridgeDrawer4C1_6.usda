#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "FridgeDrawer4C1"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "FridgeDrawer4C1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(0.000164, -0.208556, -0.999793), (0.475283, 0.153942, 0.066866)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 5, 4, 4, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 4, 3, 8, 4, 3, 4, 4, 4, 4, 3, 4, 8, 3, 4, 8, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 52, 53, 70, 63, 58, 37, 41, 57, 63, 34, 35, 62, 62, 35, 36, 64, 57, 41, 40, 69, 71, 38, 39, 70, 69, 40, 38, 71, 64, 36, 37, 58, 70, 39, 34, 63, 28, 34, 39, 29, 58, 77, 76, 64, 71, 79, 78, 69, 71, 70, 53, 80, 79, 57, 69, 78, 81, 62, 64, 76, 82, 62, 82, 83, 52, 63, 77, 58, 57, 81, 53, 52, 83, 80, 85, 84, 28, 29, 95, 94, 93, 92, 35, 34, 28, 84, 88, 89, 36, 35, 88, 40, 41, 86, 90, 38, 91, 85, 29, 39, 91, 38, 40, 90, 37, 36, 89, 87, 41, 37, 92, 93, 37, 87, 95, 92, 87, 86, 94, 95, 86, 41, 93, 94, 4, 5, 7, 6, 8, 9, 11, 10, 12, 13, 15, 14, 16, 17, 19, 18, 67, 68, 72, 73, 66, 67, 73, 74, 65, 66, 74, 75, 56, 65, 75, 59, 61, 72, 68, 60, 54, 55, 61, 60, 33, 32, 31, 30, 31, 32, 42, 45, 43, 44, 46, 47, 47, 46, 48, 49, 49, 48, 50, 51, 51, 50, 45, 42, 76, 77, 59, 75, 74, 73, 72, 61, 78, 79, 54, 60, 79, 80, 54, 78, 60, 68, 67, 66, 65, 56, 81, 76, 61, 55, 82, 82, 55, 83, 56, 59, 77, 81, 80, 83, 55, 54, 85, 33, 30, 84, 87, 44, 43, 86, 88, 84, 30, 89, 88, 30, 31, 90, 86, 43, 47, 49, 51, 42, 32, 85, 91, 33, 90, 32, 33, 91, 89, 31, 45, 50, 48, 46, 44, 87, 20, 21, 23, 22, 24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer4C1_0>
            normal3f[] normals = [(0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0.0000025560148, -0.86608964, 0.49988863), (-0.0000036899, -0.8660896, 0.49988878), (0, -0.959899, 0.28034592), (0, -0.959899, 0.28034592), (-0.030001394, -0.096790165, 0.99485254), (-0.009098029, -0.02879773, 0.99954385), (0.009097932, -0.028797738, 0.9995439), (0.030001063, -0.09679012, 0.99485254), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-0.06910442, 0.0026984313, 0.9976058), (-0.06909773, 0.0026982257, 0.9976062), (0.030001063, -0.09679012, 0.99485254), (0.009097932, -0.028797738, 0.9995439), (0.069104224, 0.0026984238, 0.9976058), (0.069097534, 0.002698198, 0.9976063), (-9.216451e-8, 0, 1), (-9.3554334e-8, 0, 1), (-9.355434e-8, 0, 1), (-9.445925e-8, 0, 1), (0.069097534, 0.002698198, 0.9976063), (0.069104224, 0.0026984238, 0.9976058), (-9.3554334e-8, 0, 1), (-9.216451e-8, 0, 1), (-0.06909773, 0.0026982257, 0.9976062), (-0.06910442, 0.0026984313, 0.9976058), (-0.009098029, -0.02879773, 0.99954385), (-0.030001394, -0.096790165, 0.99485254), (-9.445925e-8, 0, 1), (-9.355434e-8, 0, 1), (0, 0, 1), (0, 0, 1), (0.000047598834, 0.9155185, -0.40227577), (0, 1, 0), (0, 1, 0), (0, 0.9155185, -0.40227577), (0.9995595, -0.012045549, -0.027122173), (0.9995719, -0.012389203, -0.026506087), (0.9995852, -0.012382276, -0.02599869), (0.999563, -0.011808631, -0.027100218), (-0.9939721, 0.07357225, -0.08128043), (-0.99610376, 0.07468742, -0.046894528), (-0.9995846, -0.012426253, -0.025998993), (-0.99956304, -0.011806006, -0.027099889), (-0.9939721, 0.07357225, -0.08128043), (-0.99318427, 0.07913886, -0.08556888), (-0.99318427, 0.07913886, -0.08556888), (-0.99486476, 0.08129778, -0.0602884), (-0.99610376, 0.07468742, -0.046894528), (-0.9995596, -0.01204569, -0.02712218), (-0.99956304, -0.011806006, -0.027099889), (-0.9995846, -0.012426253, -0.025998993), (-0.9995778, -0.012543469, -0.026208136), (0.9939672, 0.07360788, -0.08130882), (0.999563, -0.011808631, -0.027100218), (0.9995852, -0.012382276, -0.02599869), (0.99610406, 0.07468347, -0.04689546), (0.9939672, 0.07360788, -0.08130882), (0.99610406, 0.07468347, -0.04689546), (0.9948648, 0.08129767, -0.060288068), (0.99318427, 0.07913898, -0.085568406), (0.99318427, 0.07913898, -0.085568406), (0, 0.98231703, 0.18722509), (0, 0.982317, 0.18722546), (0, 0.982317, 0.18722546), (0, 0.98231703, 0.18722507), (-0.0000036899, -0.8660896, 0.49988878), (0.0000025560148, -0.86608964, 0.49988863), (0, -0.84459853, 0.53540015), (0, -0.8445986, 0.5354001), (0, 0.8370179, -0.5471756), (0, 0.8370179, -0.5471756), (0.000047598834, 0.9155185, -0.40227577), (0, 0.9155185, -0.40227577), (0, -0.98568624, -0.16859014), (0, -0.98568624, -0.16859014), (0, -0.98568624, -0.16859014), (0, -0.98568624, -0.16859014), (-1, -8.720435e-9, 0), (-0.99999994, -1.7440868e-8, 0), (-0.99999994, -1.7440868e-8, 0), (-1, -1.1934728e-8, 0), (-1, 3.0664562e-8, 0), (-1, 3.7303828e-8, 0), (-1, 0, 0), (-1, -8.720435e-9, 0), (-1, 3.0664562e-8, 0), (1, 0, 0), (1, 0, 0), (1, -2.460639e-8, 0), (1, -1.9941645e-8, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, -1.9941645e-8, 0), (-1, 0, 0), (-1, 0, 0), (-1, 3.7303828e-8, 0), (-1, 2.812159e-9, 0), (0.009097932, -0.028797738, 0.9995439), (-0.009098029, -0.02879773, 0.99954385), (0, 0, 0.99999994), (0, 0, 0.99999994), (-1, 0, 0), (-1, 2.812159e-9, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, -2.460639e-8, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (-5.3536496e-8, 0.35211012, 0.9359586), (-0.0000021141605, 0.013840961, 0.9999042), (0.0007226307, 0.013798021, 0.9999045), (0, 0.35210997, 0.93595874), (0, 0.7071062, 0.70710737), (-5.3536496e-8, 0.35211012, 0.9359586), (0, 0.35210997, 0.93595874), (0, 0.7071062, 0.70710737), (0, 0.9416378, 0.33662772), (0, 0.7071062, 0.70710737), (0, 0.7071062, 0.70710737), (-1.5733531e-7, 0.94163793, 0.33662757), (-7.6812285e-8, 0.98268396, 0.18528946), (0, 0.9416378, 0.33662772), (-1.5733531e-7, 0.94163793, 0.33662757), (1.8786523e-7, 0.982684, 0.18528943), (5.8556907e-7, 0.0047560832, 0.99998873), (0.0007226307, 0.013798021, 0.9999045), (-0.0000021141605, 0.013840961, 0.9999042), (0, 0.004756078, 0.9999888), (-0.0000016535632, -0.8389403, 0.5442234), (0, -0.8389403, 0.5442234), (5.8556907e-7, 0.0047560832, 0.99998873), (0, 0.004756078, 0.9999888), (0.000008517329, 0.82387745, -0.56676793), (0, 0.012255371, -0.99992496), (-2.0422467e-8, 0.012255371, -0.99992496), (0, 0.82387745, -0.56676793), (-2.0422467e-8, 0.012255371, -0.99992496), (0, 0.012255371, -0.99992496), (7.95593e-9, -0.0070462152, -0.99997514), (0, -0.0070462152, -0.99997514), (0, -0.9852574, -0.17107849), (-9.567551e-10, -0.9852574, -0.17107849), (0, -0.9238847, -0.38267106), (0, -0.9238847, -0.38267106), (0, -0.9238847, -0.38267106), (0, -0.9238847, -0.38267106), (0, -0.7071414, -0.7070722), (0, -0.7071414, -0.7070722), (0, -0.7071414, -0.7070722), (0, -0.7071414, -0.7070722), (0, -0.38271675, -0.92386574), (0, -0.38271675, -0.92386574), (0, -0.38271675, -0.92386574), (0, -0.38271675, -0.92386574), (0, -0.0070462152, -0.99997514), (7.95593e-9, -0.0070462152, -0.99997514), (0.9995852, -0.012382276, -0.02599869), (0.9995719, -0.012389203, -0.026506087), (0.9995869, -0.012826248, -0.025722543), (0.9995869, -0.012826248, -0.025722543), (0.9995869, -0.012826248, -0.025722543), (0.9995869, -0.012826248, -0.025722543), (0.9995869, -0.012826248, -0.025722543), (0.999589, -0.012695977, -0.025699735), (-0.9995846, -0.012426253, -0.025998993), (-0.99610376, 0.07468742, -0.046894528), (-0.9979441, 0.057698518, -0.027899604), (-0.99959034, -0.01259519, -0.025700005), (-0.99610376, 0.07468742, -0.046894528), (-0.99486476, 0.08129778, -0.0602884), (-0.9979441, 0.057698518, -0.027899604), (-0.9995846, -0.012426253, -0.025998993), (-0.99959034, -0.01259519, -0.025700005), (-0.9995869, -0.012826065, -0.025722561), (-0.9995869, -0.012826065, -0.025722561), (-0.9995869, -0.012826065, -0.025722561), (-0.9995869, -0.012826065, -0.025722561), (-0.9995869, -0.012826065, -0.025722561), (-0.9995778, -0.012543469, -0.026208136), (0.9995852, -0.012382276, -0.02599869), (0.999589, -0.012695977, -0.025699735), (0.9979446, 0.057690084, -0.027899452), (0.99610406, 0.07468347, -0.04689546), (0.99610406, 0.07468347, -0.04689546), (0.9979446, 0.057690084, -0.027899452), (0.9948648, 0.08129767, -0.060288068), (-7.6812285e-8, 0.98268396, 0.18528946), (1.8786523e-7, 0.982684, 0.18528943), (0, 0.98231703, 0.18722509), (0, 0.98231703, 0.18722507), (0, -0.8445986, 0.5354001), (0, -0.84459853, 0.53540015), (0, -0.8389403, 0.5442234), (-0.0000016535632, -0.8389403, 0.5442234), (0, 0.8370179, -0.5471756), (0.000008517329, 0.82387745, -0.56676793), (0, 0.82387745, -0.56676793), (0, 0.8370179, -0.5471756), (0, -0.985689, -0.16857404), (-9.567551e-10, -0.9852574, -0.17107849), (0, -0.9852574, -0.17107849), (0, -0.985689, -0.16857404), (-1, 3.0664562e-8, 0), (-1, -1.1934728e-8, 0), (-1, 1.0944143e-7, 0), (-1, 3.7303828e-8, 0), (-1, 3.0664562e-8, 0), (-1, 1.0944143e-7, 0), (-1, 6.232609e-8, 0), (1, -1.9941645e-8, 0), (1, -2.460639e-8, 0), (0.99999994, -7.976658e-8, 0), (0.99999994, -7.976658e-8, 0), (0.99999994, -7.976658e-8, 0), (0.99999994, -7.976658e-8, 0), (0.99999994, -7.976658e-8, 0), (1, -4.7362576e-8, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, -1.9941645e-8, 0), (1, -4.7362576e-8, 0), (1, 0, 0), (1, 0, 0), (-1, 3.7303828e-8, 0), (-1, 6.232609e-8, 0), (-1, 9.116182e-9, 0), (-1, 9.116182e-9, 0), (-1, 9.116182e-9, 0), (-1, 9.116182e-9, 0), (-1, 9.116182e-9, 0), (-1, 2.812159e-9, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (0.02965, 0.153942, 0.057857), (0.475283, 0.153942, 0.057857), (0.02965, 0.079972, -0.055296), (0.02965, 0.074708, -0.058145), (0.475283, 0.074708, -0.058145), (0.475283, 0.079972, -0.055296), (0.02965, 0.153942, 0.065618), (0.02965, 0.079972, 0.065618), (0.02965, 0.074708, 0.065618), (0.02965, -0.193793, 0.065618), (0.475283, 0.079972, 0.065618), (0.475283, 0.153942, 0.065618), (0.475283, 0.074708, 0.065618), (0.475283, -0.193793, 0.065618), (0.475283, -0.154604, -0.058145), (0.475283, -0.176346, -0.036402), (0.02965, -0.176346, -0.036402), (0.02965, -0.154604, -0.058145), (0.02965, -0.174691, -0.044722), (0.475283, -0.174691, -0.044722), (0.02965, -0.169978, -0.051776), (0.475283, -0.169978, -0.051776), (0.02965, -0.162924, -0.05649), (0.475283, -0.162924, -0.05649), (0.034492, 0.145047, 0.060506), (0.470441, 0.145047, 0.060506), (0.467767, 0.075038, -0.049935), (0.037166, 0.075038, -0.049935), (0.470601, -0.167139, -0.0347), (0.467881, -0.186497, 0.066866), (0.037052, -0.186497, 0.066866), (0.034332, -0.167139, -0.0347), (0.467767, 0.07292, -0.05108), (0.037166, 0.07292, -0.05108), (0.040118, 0.079972, 0.065618), (0.037052, 0.14654, 0.065618), (0.040118, 0.074708, 0.065618), (0.470528, -0.166075, -0.041153), (0.470528, -0.163383, -0.045181), (0.470528, -0.159355, -0.047873), (0.470583, -0.153687, -0.048836), (0.464815, 0.074708, 0.065618), (0.467881, 0.14654, 0.065618), (0.464815, 0.079972, 0.065618), (0.03435, -0.153687, -0.048836), (0.034405, -0.159355, -0.047873), (0.034405, -0.163383, -0.045181), (0.034405, -0.166075, -0.041153), (0.039519, 0.074345, 0.041939), (0.036385, -0.181746, 0.041939), (0.465414, 0.074345, 0.041939), (0.46542, 0.078961, 0.041939), (0.469991, 0.133277, 0.041939), (0.468548, -0.181746, 0.041939), (0.039513, 0.078961, 0.041939), (0.034942, 0.133277, 0.041939), (0.02965, 0.143536, 0.041939), (0.475283, 0.143536, 0.041939), (0.475283, -0.189744, 0.041939), (0.02965, -0.189744, 0.041939), (0.02965, 0.079972, 0.041939), (0.02965, 0.074708, 0.041939), (0.475283, 0.074708, 0.041939), (0.475283, 0.079972, 0.041939), (0.02965, -0.208556, 0.065618), (0.475283, -0.208556, 0.065618), (0.475283, -0.204506, 0.041939), (0.02965, -0.204506, 0.041939)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-169.52118, -113.841515), (-169.5211, -113.841515), (-169.5211, -113.84144), (-169.52118, -113.84144), (-170.17819, 0.683361), (-170.17819, -0.592152), (-170.16322, -0.584663), (-170.16322, 0.67587), (-171.10902, 0.641815), (-171.1289, 0.662013), (-171.1289, -0.553917), (-171.10902, -0.53372), (-170.2003, 0.641815), (-170.18011, 0.662013), (-170.38196, 0.662013), (-170.38196, 0.633449), (-170.38196, 0.633449), (-170.38196, 0.662013), (-170.39629, 0.662013), (-170.39629, 0.633449), (-171.10902, -0.53372), (-171.1289, -0.553917), (-170.39629, -0.553917), (-170.39629, -0.525354), (-170.38196, -0.525354), (-170.38196, -0.553917), (-170.18011, -0.553917), (-170.2003, -0.53372), (-170.39629, -0.525354), (-170.39629, -0.553917), (-170.38196, -0.553917), (-170.38196, -0.525354), (-170.39629, 0.633449), (-170.39629, 0.662013), (-171.1289, 0.662013), (-171.10902, 0.641815), (-170.2003, -0.53372), (-170.18011, -0.553917), (-170.18011, 0.662013), (-170.2003, 0.641815), (-170.34265, 0.699618), (-170.36513, 0.699618), (-170.36513, -0.591522), (-170.34265, -0.591522), (-169.96336, 0.409866), (-170.03134, 0.396914), (-170.03134, -0.301289), (-169.96677, -0.302278), (-169.9153, 0.228384), (-169.97987, 0.225628), (-169.97987, 0.213044), (-169.9153, 0.214033), (-169.9153, 0.228384), (-169.9153, 0.40988), (-169.92924, 0.40581), (-169.97987, 0.37372), (-169.97987, 0.225628), (-169.9119, -0.498132), (-169.9153, 0.214033), (-169.97987, 0.213044), (-169.97987, -0.485179), (-169.96677, -0.316629), (-169.96677, -0.302278), (-170.03134, -0.301289), (-170.03134, -0.313872), (-169.96677, -0.316629), (-170.03134, -0.313872), (-170.03134, -0.46196), (-169.98068, -0.494049), (-169.96677, -0.498118), (-170.1132, 0.636224), (-170.18173, 0.634389), (-170.18173, -0.549782), (-170.1132, -0.551616), (-170.17819, -0.592152), (-170.17819, 0.683361), (-170.2325, 0.682046), (-170.2325, -0.590837), (-170.29654, -0.591522), (-170.29654, 0.699618), (-170.34265, 0.699618), (-170.34265, -0.591522), (-170.314, 0.665545), (-170.314, -0.557449), (-170.24904, -0.557449), (-170.24904, 0.665545), (-170.06482, 0.27383), (-170.06482, 0.475354), (-170.08597, 0.475354), (-170.12933, 0.447005), (-170.12933, 0.27383), (-170.12933, 0.25949), (-170.06482, 0.25949), (-170.06482, 0.27383), (-170.12933, 0.27383), (-170.0155, -0.29638), (-170.0155, 0.435156), (-170.08002, 0.424123), (-170.08002, -0.29638), (-170.0155, -0.310721), (-170.08002, -0.310721), (-170.08002, -0.483904), (-170.03667, -0.512254), (-170.0155, -0.512254), (-170.08002, -0.310721), (-170.0155, -0.310721), (-170.0155, -0.29638), (-170.08002, -0.29638), (-170.06482, -0.47201), (-170.06482, 0.25949), (-170.12933, 0.25949), (-170.12933, -0.460978), (-171.1289, -0.553917), (-171.1289, 0.662013), (-171.1692, 0.662013), (-171.1692, -0.553917), (-170.06482, -0.47201), (-170.12933, -0.460978), (-170.12933, -0.501197), (-170.06482, -0.51223), (-170.26007, 0.661269), (-170.26007, -0.553173), (-170.21985, -0.553173), (-170.21985, 0.661269), (-170.08002, 0.424123), (-170.0155, 0.435156), (-170.0155, 0.475378), (-170.08002, 0.464344), (-143.9544, -113.63171), (-138.25499, -113.63171), (-138.25499, -107.93224), (-143.9544, -107.93224), (-118.53859, -113.51364), (-114.635414, -113.51364), (-114.635414, -109.61047), (-118.53859, -109.61047), (-88.71439, -110.74826), (-88.71439, -113.93459), (-85.53684, -113.93459), (-85.53684, -110.74826), (-68.811325, -112.25636), (-68.81132, -112.25636), (-68.81132, -112.25635), (-68.811325, -112.25635), (-71.579735, -1.008741), (-71.56407, -1.008893), (-71.56407, 0.196623), (-71.579735, 0.196471), (-71.590866, -1.008741), (-71.579735, -1.008741), (-71.579735, 0.196471), (-71.590866, 0.196471), (-71.598305, -1.008741), (-71.590866, -1.008741), (-71.590866, 0.196471), (-71.598305, 0.196471), (-71.33555, -0.965952), (-71.318985, -0.965765), (-71.318985, 0.153539), (-71.33555, 0.153725), (-70.93784, 0.188839), (-71.56407, 0.196623), (-71.56407, -1.008893), (-70.93784, -1.00111), (-70.93199, -1.00111), (-70.93199, 0.188839), (-70.93784, 0.188839), (-70.93784, -1.00111), (-72.05574, -1.017343), (-72.04117, -1.017343), (-72.04117, 0.216529), (-72.05574, 0.216529), (-72.04117, 0.216529), (-72.04117, -1.017343), (-71.40624, -1.017343), (-71.40624, 0.216529), (-71.62621, -0.971518), (-71.62621, 0.170704), (-71.647545, 0.170704), (-71.647545, -0.971518), (-71.35063, -1.017343), (-71.35063, 0.216529), (-71.36368, 0.216529), (-71.36368, -1.017343), (-71.36368, -1.017343), (-71.36368, 0.216529), (-71.38321, 0.216529), (-71.38321, -1.017343), (-71.38321, -1.017343), (-71.38321, 0.216529), (-71.40624, 0.216529), (-71.40624, -1.017343), (-71.18368, -0.195191), (-71.18368, 0.456586), (-71.37873, 0.419411), (-71.39516, 0.416701), (-71.40541, 0.409851), (-71.41226, 0.3996), (-71.41471, 0.385174), (-71.420425, -0.191563), (-71.30319, 0.306642), (-71.30319, 0.318389), (-71.537025, 0.308405), (-71.53994, 0.303014), (-71.30319, 0.318389), (-71.30319, 0.456629), (-71.537025, 0.308405), (-71.30319, 0.306642), (-71.53994, 0.303014), (-71.534225, -0.273723), (-71.53178, -0.288149), (-71.524925, -0.2984), (-71.51467, -0.30525), (-71.49825, -0.307959), (-71.30319, -0.345135), (-71.18368, -0.195191), (-71.420425, -0.191563), (-71.41751, -0.196954), (-71.18368, -0.206938), (-71.18368, -0.206938), (-71.41751, -0.196954), (-71.18368, -0.345179), (-71.33555, -0.965952), (-71.33555, 0.153725), (-71.53224, 0.148457), (-71.53224, -0.960684), (-70.77105, -1.007257), (-70.77105, 0.194987), (-70.93199, 0.188839), (-70.93199, -1.00111), (-72.23174, -1.017343), (-72.05574, -1.017343), (-72.05574, 0.216529), (-72.23174, 0.216529), (-71.425415, 0.170704), (-71.62621, 0.170704), (-71.62621, -0.971518), (-71.425415, -0.971518), (-70.92279, 0.329068), (-70.92279, 0.490784), (-71.17017, 0.329068), (-70.92279, 0.315676), (-70.92279, 0.329068), (-71.17017, 0.329068), (-71.17742, 0.315676), (-71.05092, -0.182016), (-71.05092, 0.490784), (-71.25023, 0.456699), (-71.2714, 0.452488), (-71.289345, 0.440498), (-71.30133, 0.422553), (-71.30554, 0.401385), (-71.30554, -0.182016), (-71.05092, -0.357124), (-71.05092, -0.195408), (-71.2983, -0.195408), (-71.05092, -0.182016), (-71.30554, -0.182016), (-71.2983, -0.195408), (-71.05092, -0.195408), (-70.92279, 0.315676), (-71.17742, 0.315676), (-71.17742, -0.267725), (-71.17321, -0.288892), (-71.16122, -0.306838), (-71.14327, -0.318828), (-71.1221, -0.323039), (-70.92279, -0.357124), (5.646933, -121.22408), (7.358486, -121.22408), (7.358486, -119.51253), (5.646933, -119.51253), (-5.253075, -117.71076), (-3.54152, -117.71076), (-3.54152, -115.99921), (-5.253075, -115.99921)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_FridgeDrawer4C1_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
                rel material:binding = </root/_materials/M_FridgeDrawer4C1_0>
            }

            def GeomSubset "M_FridgeDrawer4C1_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [31]
                rel material:binding = </root/_materials/M_FridgeDrawer4C1_1>
            }

            def GeomSubset "M_FridgeDrawer4C1_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [32]
                rel material:binding = </root/_materials/M_FridgeDrawer4C1_2>
            }

            def GeomSubset "M_FridgeDrawer4C1_3" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [33]
                rel material:binding = </root/_materials/M_FridgeDrawer4C1_3>
            }

            def GeomSubset "M_FridgeDrawer4C1_4" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62]
                rel material:binding = </root/_materials/M_FridgeDrawer4C1_4>
            }

            def GeomSubset "M_FridgeDrawer4C1_5" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [63]
                rel material:binding = </root/_materials/M_FridgeDrawer4C1_5>
            }

            def GeomSubset "M_FridgeDrawer4C1_6" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [64]
                rel material:binding = </root/_materials/M_FridgeDrawer4C1_6>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer4C1_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C1_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.1834451, 0.21323532, 0.21323532)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C1_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge.tga@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C1_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer4C1_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C1_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C1_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C1_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C1_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C1_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C1_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C1_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C1_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C1_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C1_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C1_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C1_3"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C1_3/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.5735294, 0.5735294, 0.5735294)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C1_3/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C1_3/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_FridgeDrawer4C1_4"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C1_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.39705884, 0.39705884, 0.39705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_FridgeDrawer4C1_5"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C1_5/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C1_5/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C1_5/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C1_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Decal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C1_5/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_FridgeDrawer4C1_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer4C1_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer4C1_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer4C1_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C1_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer4C1_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

