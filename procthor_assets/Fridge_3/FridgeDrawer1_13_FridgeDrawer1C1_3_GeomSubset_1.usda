#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer1_13_FridgeDrawer1C1_3_GeomSubset_1"
    {
        def Mesh "FridgeDrawer1_13_FridgeDrawer1C1_3_GeomSubset_1"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [4, 5, 7, 6]
            rel material:binding = </root/_materials/M_FridgeDrawer1C1_1>
            normal3f[] normals = [(0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000164, 0.030013, -0.999793), (-0.000173, 0.030013, -0.999793), (-0.000164, 0.030023, -0.999793), (-0.000173, 0.030023, -0.999793), (-0.000164, 0.030013, -0.999793), (-0.000173, 0.030013, -0.999793), (-0.000164, 0.030023, -0.999793), (-0.000173, 0.030023, -0.999793), (-0.000164, 0.030013, -0.999793), (-0.000173, 0.030013, -0.999793), (-0.000164, 0.030023, -0.999793), (-0.000173, 0.030023, -0.999793), (-0.000164, 0.030013, -0.999793), (-0.000173, 0.030013, -0.999793), (-0.000164, 0.030023, -0.999793), (-0.000173, 0.030023, -0.999793), (-0.000164, 0.030013, -0.999793), (-0.000173, 0.030013, -0.999793), (-0.000164, 0.030023, -0.999793), (-0.000173, 0.030023, -0.999793), (-0.000164, 0.030013, -0.999793), (-0.000173, 0.030013, -0.999793), (-0.000164, 0.030023, -0.999793), (-0.000173, 0.030023, -0.999793), (-0.000164, 0.030013, -0.999793), (-0.000173, 0.030013, -0.999793), (-0.000164, 0.030023, -0.999793), (-0.000173, 0.030023, -0.999793), (0.474972, 0.153942, 0.224275), (0.029339, 0.153942, 0.224275), (0.474972, 0.079972, 0.111122), (0.474972, 0.074708, 0.108274), (0.029339, 0.074708, 0.108274), (0.029339, 0.079972, 0.111122), (0.474972, 0.153942, 0.232036), (0.474972, 0.079972, 0.232036), (0.474972, 0.074708, 0.232036), (0.474972, -0.193793, 0.232036), (0.029339, 0.079972, 0.232036), (0.029339, 0.153942, 0.232036), (0.029339, 0.074708, 0.232036), (0.029339, -0.193793, 0.232036), (0.029339, -0.154604, 0.108274), (0.029339, -0.176346, 0.130015), (0.474972, -0.176346, 0.130016), (0.474972, -0.154604, 0.108274), (0.474972, -0.174691, 0.121696), (0.029339, -0.174691, 0.121696), (0.474972, -0.169978, 0.114642), (0.029339, -0.169978, 0.114642), (0.474972, -0.162924, 0.109929), (0.029339, -0.162924, 0.109929), (0.47013, 0.145047, 0.226924), (0.034181, 0.145047, 0.226924), (0.036855, 0.075038, 0.116484), (0.467456, 0.075038, 0.116484), (0.034021, -0.167139, 0.131718), (0.036741, -0.186497, 0.233284), (0.46757, -0.186497, 0.233284), (0.47029, -0.167139, 0.131718), (0.036855, 0.07292, 0.115338), (0.467456, 0.07292, 0.115338), (0.464503, 0.079972, 0.232036), (0.46757, 0.14654, 0.232036), (0.464503, 0.074708, 0.232036), (0.034093, -0.166075, 0.125265), (0.034093, -0.163383, 0.121237), (0.034093, -0.159355, 0.118545), (0.034038, -0.153687, 0.117583), (0.039807, 0.074708, 0.232036), (0.036741, 0.14654, 0.232036), (0.039807, 0.079972, 0.232036), (0.470272, -0.153687, 0.117583), (0.470217, -0.159355, 0.118545), (0.470217, -0.163383, 0.121237), (0.470217, -0.166075, 0.125265), (0.465102, 0.074345, 0.208357), (0.468237, -0.181746, 0.208357), (0.039208, 0.074345, 0.208357), (0.039202, 0.078961, 0.208357), (0.03463, 0.133277, 0.208357), (0.036073, -0.181746, 0.208357), (0.465108, 0.078961, 0.208357), (0.46968, 0.133277, 0.208357), (0.474972, 0.143536, 0.208357), (0.029339, 0.143536, 0.208357), (0.029339, -0.189744, 0.208357), (0.474972, -0.189744, 0.208357), (0.474972, 0.079972, 0.208357), (0.474972, 0.074708, 0.208357), (0.029339, 0.074708, 0.208357), (0.029339, 0.079972, 0.208357), (0.474972, -0.208556, 0.232036), (0.029339, -0.208556, 0.232036), (0.029339, -0.204506, 0.208357), (0.474972, -0.204506, 0.208357)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-143.9544, -113.63171), (-138.25499, -113.63171), (-138.25499, -107.93224), (-143.9544, -107.93224)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer1C1_1"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1C1_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1C1_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1C1_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C1_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1C1_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

