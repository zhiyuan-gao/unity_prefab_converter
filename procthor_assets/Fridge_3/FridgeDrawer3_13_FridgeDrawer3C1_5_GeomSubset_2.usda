#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer3_13_FridgeDrawer3C1_5_GeomSubset_2"
    {
        def Mesh "FridgeDrawer3_13_FridgeDrawer3C1_5_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer3C1_2>
            normal3f[] normals = [(0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (0.000164, 0.030013, -0.999793), (0.000173, 0.030013, -0.999793), (0.000164, 0.030023, -0.999793), (0.000173, 0.030023, -0.999793), (-0.474972, 0.153942, 0.057857), (-0.029339, 0.153942, 0.057857), (-0.474972, 0.079972, -0.055296), (-0.474972, 0.074708, -0.058145), (-0.029339, 0.074708, -0.058145), (-0.029339, 0.079972, -0.055296), (-0.474972, 0.153942, 0.065618), (-0.474972, 0.079972, 0.065618), (-0.474972, 0.074708, 0.065618), (-0.474972, -0.193793, 0.065618), (-0.029339, 0.079972, 0.065618), (-0.029339, 0.153942, 0.065618), (-0.029339, 0.074708, 0.065618), (-0.029339, -0.193793, 0.065618), (-0.029339, -0.154604, -0.058145), (-0.029339, -0.176346, -0.036402), (-0.474972, -0.176346, -0.036402), (-0.474972, -0.154604, -0.058145), (-0.474972, -0.174691, -0.044722), (-0.029339, -0.174691, -0.044722), (-0.474972, -0.169978, -0.051776), (-0.029339, -0.169978, -0.051776), (-0.474972, -0.162924, -0.05649), (-0.029339, -0.162924, -0.05649), (-0.47013, 0.145047, 0.060506), (-0.034181, 0.145047, 0.060506), (-0.036855, 0.075038, -0.049935), (-0.467456, 0.075038, -0.049935), (-0.034021, -0.167139, -0.0347), (-0.036741, -0.186497, 0.066866), (-0.46757, -0.186497, 0.066866), (-0.47029, -0.167139, -0.0347), (-0.036855, 0.07292, -0.05108), (-0.467456, 0.07292, -0.05108), (-0.464503, 0.079972, 0.065618), (-0.46757, 0.14654, 0.065618), (-0.464503, 0.074708, 0.065618), (-0.034093, -0.166075, -0.041153), (-0.034093, -0.163383, -0.045181), (-0.034093, -0.159355, -0.047873), (-0.034038, -0.153687, -0.048836), (-0.039807, 0.074708, 0.065618), (-0.036741, 0.14654, 0.065618), (-0.039807, 0.079972, 0.065618), (-0.470272, -0.153687, -0.048836), (-0.470217, -0.159355, -0.047873), (-0.470217, -0.163383, -0.045181), (-0.470217, -0.166075, -0.041153), (-0.465102, 0.074345, 0.041939), (-0.468237, -0.181746, 0.041939), (-0.039208, 0.074345, 0.041939), (-0.039202, 0.078961, 0.041939), (-0.03463, 0.133277, 0.041939), (-0.036073, -0.181746, 0.041939), (-0.465108, 0.078961, 0.041939), (-0.46968, 0.133277, 0.041939), (-0.474972, 0.143536, 0.041939), (-0.029339, 0.143536, 0.041939), (-0.029339, -0.189744, 0.041939), (-0.474972, -0.189744, 0.041939), (-0.474972, 0.079972, 0.041939), (-0.474972, 0.074708, 0.041939), (-0.029339, 0.074708, 0.041939), (-0.029339, 0.079972, 0.041939), (-0.474972, -0.208556, 0.065618), (-0.029339, -0.208556, 0.065618), (-0.029339, -0.204506, 0.041939), (-0.474972, -0.204506, 0.041939)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-118.53859, -113.51364), (-114.635414, -113.51364), (-114.635414, -109.61047), (-118.53859, -109.61047)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer3C1_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3C1_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer3C1_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3C1_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C1_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3C1_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

