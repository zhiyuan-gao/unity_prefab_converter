#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "RobothorWallDecor_4_3"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "RobothorWallDecor_4_3" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.46489, -0.012891, -0.729114), (0.460641, 0.015153, 0.368069)]
            int[] faceVertexCounts = [4, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 28, 30, 29, 28, 31, 30, 4, 5, 7, 6, 12, 14, 13, 12, 15, 14, 13, 17, 16, 13, 14, 17, 16, 19, 18, 16, 17, 19, 20, 22, 21, 20, 23, 22, 13, 18, 12, 13, 16, 18, 17, 15, 19, 17, 14, 15, 24, 15, 12, 24, 23, 15, 20, 18, 19, 20, 25, 18, 25, 12, 18, 25, 24, 12, 23, 19, 15, 23, 20, 19, 25, 21, 26, 25, 20, 21, 24, 26, 27, 24, 25, 26, 23, 27, 22, 23, 24, 27, 29, 22, 27, 29, 30, 22, 31, 26, 21, 31, 28, 26, 28, 27, 26, 28, 29, 27, 30, 21, 22, 30, 31, 21, 8, 9, 11, 10]
            rel material:binding = </root/_materials/M_RobothorWallDecor_4_3_0>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-0.000025313318, 1, 0.00031462946), (-0.000025319816, 1, 0.00031465324), (0.00002484786, 0.99999994, 0.0003142926), (-0.000025313318, 1, 0.00031462946), (0.000024853813, 0.99999994, 0.00031423327), (-0.000025319816, 1, 0.00031465324), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 4.862662e-8, 0), (-1, 0.000001970142, 0), (-1, 0, 0), (-1, 4.862662e-8, 0), (-1, 0.0000020187706, 0), (-1, 0.000001970142, 0), (0, -0.99999994, -0.00034609815), (0, -0.99999994, -0.00034609856), (0, -0.9999999, -0.0003460997), (0, -0.99999994, -0.00034609815), (0, -0.9999999, -0.00034609693), (0, -0.99999994, -0.00034609856), (1, -0.0000027853384, 0), (1, 0.000003556851, 0), (1, -0.0000029458329, 0), (1, -0.0000027853384, 0), (1, 0.000003717352, 0), (1, 0.000003556851, 0), (0, -0.00028350926, 0.99999994), (0, -0.0002835092, 1), (0, -0.00028350926, 0.9999999), (0, -0.00028350926, 0.99999994), (0, -0.0002835092, 0.99999994), (0, -0.0002835092, 1), (0, -0.00036177534, 0.99999994), (0, -0.00036177534, 0.99999994), (0, -0.0003617753, 0.9999999), (0, -0.00036177534, 0.99999994), (0, -0.00036177528, 0.9999999), (0, -0.00036177534, 0.99999994), (0, 0.00036071162, -0.99999994), (0, 0.00036071165, -0.99999994), (0, 0.00036071162, -0.99999994), (0, 0.00036071162, -0.99999994), (0, 0.00036071165, -0.99999994), (0, 0.00036071165, -0.99999994), (0.000083618535, 0.9999999, 0.0002743814), (-0.000074927084, 1, 0.00026978386), (0.00007587748, 0.99999994, 0.0002660222), (0.000083618535, 0.9999999, 0.0002743814), (-0.00009035131, 1, 0.00027870527), (-0.000074927084, 1, 0.00026978386), (0.00008362383, 0.9999999, 0.00027434327), (-0.00007492869, 0.99999994, 0.00026967414), (0.000075878415, 0.99999994, 0.0002659804), (0.00008362383, 0.9999999, 0.00027434327), (-0.00009035791, 1, 0.00027861234), (-0.00007492869, 0.99999994, 0.00026967414), (-0.00009035791, 1, 0.00027861234), (0.00007587748, 0.99999994, 0.0002660222), (-0.00007492869, 0.99999994, 0.00026967414), (-0.00009035791, 1, 0.00027861234), (0.000083618535, 0.9999999, 0.0002743814), (0.00007587748, 0.99999994, 0.0002660222), (-0.00009035131, 1, 0.00027870527), (0.000075878415, 0.99999994, 0.0002659804), (-0.000074927084, 1, 0.00026978386), (-0.00009035131, 1, 0.00027870527), (0.00008362383, 0.9999999, 0.00027434327), (0.000075878415, 0.99999994, 0.0002659804), (-1, -0.000012091252, 0), (-1, 0.0000117981335, 0), (-1, -0.000012248209, 0), (-1, -0.000012091252, 0), (-1, 0.0000119550905, 0), (-1, 0.0000117981335, 0), (0, 0.00028350926, -0.99999994), (0, 0.00028350926, -1), (0, 0.00028350923, -0.9999999), (0, 0.00028350926, -0.99999994), (0, 0.00028350923, -0.99999994), (0, 0.00028350926, -1), (1, 2.4534552e-8, 0), (1, 0.000003756261, 0), (1, 0, 0), (1, 2.4534552e-8, 0), (1, 0.0000037807954, 0), (1, 0.000003756261, 0), (0.00002484786, 0.99999994, 0.0003142926), (-0.000042564076, 0.99999994, 0.00031449515), (0.000042769872, 1, 0.0003138505), (0.00002484786, 0.99999994, 0.0003142926), (-0.000025319816, 1, 0.00031465324), (-0.000042564076, 0.99999994, 0.00031449515), (0.000024853813, 0.99999994, 0.00031423327), (-0.000042545125, 0.99999994, 0.0003144616), (0.00004278777, 0.99999994, 0.00031379898), (0.000024853813, 0.99999994, 0.00031423327), (-0.000025313318, 1, 0.00031462946), (-0.000042545125, 0.99999994, 0.0003144616), (-0.000025313318, 1, 0.00031462946), (0.000042769872, 1, 0.0003138505), (-0.000042545125, 0.99999994, 0.0003144616), (-0.000025313318, 1, 0.00031462946), (0.00002484786, 0.99999994, 0.0003142926), (0.000042769872, 1, 0.0003138505), (-0.000025319816, 1, 0.00031465324), (0.00004278777, 0.99999994, 0.00031379898), (-0.000042564076, 0.99999994, 0.00031449515), (-0.000025319816, 1, 0.00031465324), (0.000024853813, 0.99999994, 0.00031423327), (0.00004278777, 0.99999994, 0.00031379898), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.001862, 0.014422, -0.729114), (-0.002557, 0.014422, -0.729114), (-0.001862, 0.015153, -0.729114), (-0.002557, 0.015153, -0.729114), (-0.001862, 0.014422, -0.729114), (-0.002557, 0.014422, -0.729114), (-0.001862, 0.015153, -0.729114), (-0.002557, 0.015153, -0.729114), (-0.001862, 0.014422, -0.729114), (-0.002557, 0.014422, -0.729114), (-0.001862, 0.015153, -0.729114), (-0.002557, 0.015153, -0.729114), (0.460641, -0.012639, -0.362948), (0.460641, 0.01504, -0.362938), (0.460641, 0.014787, 0.368069), (0.460641, -0.012891, 0.368059), (-0.46489, 0.01504, -0.362938), (-0.46489, 0.014787, 0.368069), (-0.46489, -0.012639, -0.362948), (-0.46489, -0.012891, 0.368059), (-0.447404, -0.012887, 0.348033), (-0.447404, -0.005844, 0.348035), (0.443154, -0.005844, 0.348035), (0.443154, -0.012887, 0.348033), (0.443154, -0.012643, -0.342922), (-0.447404, -0.012643, -0.342922), (-0.447404, -0.0056, -0.34292), (0.443154, -0.0056, -0.34292), (-0.442033, -0.005601, -0.339001), (0.437783, -0.005601, -0.339001), (0.437783, -0.005843, 0.344117), (-0.442033, -0.005843, 0.344117)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-9.379675, -9.755536), (-9.379675, -9.75594), (-9.379271, -9.75594), (-9.379271, -9.755536), (-9, 0), (-10, 1), (-10, 0), (-9, 0), (-9, 1), (-10, 1), (-19.367811, -9.606503), (-19.367811, -9.606655), (-19.36766, -9.606655), (-19.36766, -9.606503), (-18.92621, 0.496147), (-20.878542, 0.422902), (-18.926235, 0.422224), (-18.92621, 0.496147), (-20.878517, 0.496825), (-20.878542, 0.422902), (-18.274233, -0.384711), (-20.876123, 1.567579), (-20.876123, -0.384711), (-18.274233, -0.384711), (-18.274233, 1.567579), (-20.876123, 1.567579), (-18.926281, 0.476635), (-20.878471, 0.402035), (-18.926256, 0.402714), (-18.926281, 0.476635), (-20.878496, 0.475954), (-20.878471, 0.402035), (-18.208565, 0.636526), (-20.712126, 0.617714), (-18.208565, 0.617716), (-18.208565, 0.636526), (-20.712126, 0.636525), (-20.712126, 0.617714), (-20.770592, 0.168532), (-18.168613, 0.242449), (-20.770592, 0.242447), (-20.770592, 0.168532), (-18.168613, 0.168534), (-18.168613, 0.242449), (-18.168652, 0.263895), (-20.770554, 0.189968), (-18.168652, 0.18997), (-18.168652, 0.263895), (-20.770554, 0.263893), (-20.770554, 0.189968), (-20.721394, -0.497451), (-20.770554, 1.401366), (-20.770554, -0.550933), (-20.721394, -0.497451), (-20.721394, 1.347883), (-20.770554, 1.401366), (-18.217812, 1.347883), (-18.168652, -0.550932), (-18.168652, 1.401366), (-18.217812, 1.347883), (-18.217812, -0.49745), (-18.168652, -0.550932), (-18.217812, -0.49745), (-20.770554, -0.550933), (-18.168652, -0.550932), (-18.217812, -0.49745), (-20.721394, -0.497451), (-20.770554, -0.550933), (-20.721394, 1.347883), (-18.168652, 1.401366), (-20.770554, 1.401366), (-20.721394, 1.347883), (-18.217812, 1.347883), (-18.168652, 1.401366), (-18.969456, 0.433438), (-20.815151, 0.41527), (-18.969461, 0.414624), (-18.969456, 0.433438), (-20.815145, 0.434084), (-20.815151, 0.41527), (-20.711739, 0.607981), (-18.208954, 0.626787), (-20.711739, 0.626786), (-20.711739, 0.607981), (-18.208954, 0.607983), (-18.208954, 0.626787), (-20.81515, 0.40481), (-18.96946, 0.424286), (-20.815153, 0.423624), (-20.81515, 0.40481), (-18.969454, 0.405472), (-18.96946, 0.424286), (-21.19094, -0.265751), (-21.20604, 1.569066), (-21.20604, -0.276224), (-21.19094, -0.265751), (-21.19094, 1.558592), (-21.20604, 1.569066), (-18.717615, 1.558592), (-18.702517, -0.276222), (-18.702517, 1.569065), (-18.717615, 1.558592), (-18.717615, -0.265749), (-18.702517, -0.276222), (-18.717615, -0.265749), (-21.20604, -0.276224), (-18.702517, -0.276222), (-18.717615, -0.265749), (-21.19094, -0.265751), (-21.20604, -0.276224), (-21.19094, 1.558592), (-18.702517, 1.569065), (-21.20604, 1.569066), (-21.19094, 1.558592), (-18.717615, 1.558592), (-18.702517, 1.569065), (-29.683226, -9.316775), (-29.683226, -9.683225), (-29.316845, -9.683225), (-29.316845, -9.316775)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_RobothorWallDecor_4_3_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2]
                rel material:binding = </root/_materials/M_RobothorWallDecor_4_3_0>
            }

            def GeomSubset "M_RobothorWallDecor_4_3_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]
                rel material:binding = </root/_materials/M_RobothorWallDecor_4_3_1>
            }

            def GeomSubset "M_RobothorWallDecor_4_3_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [38]
                rel material:binding = </root/_materials/M_RobothorWallDecor_4_3_2>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorWallDecor_4_3_0"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecor_4_3_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorWallDecor_4_3_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Wall_Decor_Photo_5_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecor_4_3_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_RobothorWallDecor_4_3_1"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecor_4_3_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorWallDecor_4_3_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorWallDecor_4_3_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/DarkWood2.tif@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecor_4_3_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecor_4_3_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_RobothorWallDecor_4_3_2"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecor_4_3_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (1, 0.97794116, 0.97794116)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorWallDecor_4_3_2/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecor_4_3_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

