#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "DrawermeshRobothorDresserDrawer_2_Birkeland_2_GeomSubset_0"
    {
        def Mesh "DrawermeshRobothorDresserDrawer_2_Birkeland_2_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 2, 3, 0, 4, 5, 3, 3, 2, 4, 5, 6, 0, 0, 3, 5, 6, 7, 1, 1, 0, 6, 7, 4, 2, 2, 1, 7, 5, 4, 7, 6, 149, 150, 151, 152, 141, 142, 144, 143, 143, 144, 138, 137, 138, 144, 142, 140, 143, 137, 139, 141, 140, 142, 147, 146, 142, 141, 148, 147, 141, 139, 145, 148, 146, 147, 151, 150, 147, 148, 152, 151, 148, 145, 149, 152]
            rel material:binding = </root/_materials/M_RobothorDresserDrawer_2_Birkeland_0>
            normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -0.99999994), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (0.99999994, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 0.99999994), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.156149, -0.267007, 0.424328), (-0.156149, -0.267007, 0.424328), (-0.156149, -0.267007, 0.207681), (0.156149, -0.267007, 0.207681), (-0.156149, -0.252004, 0.207681), (0.156149, -0.252004, 0.207681), (0.156149, -0.252004, 0.424328), (-0.156149, -0.252004, 0.424328), (0.009335, -0.266706, 0.319858), (0.007145, -0.266706, 0.323137), (0.003867, -0.266706, 0.325327), (0, -0.266706, 0.326096), (-0.003867, -0.266706, 0.325327), (-0.007145, -0.266706, 0.323137), (-0.009335, -0.266706, 0.319858), (-0.010105, -0.266706, 0.315992), (-0.009335, -0.266706, 0.312125), (-0.007145, -0.266706, 0.308847), (-0.003867, -0.266706, 0.306656), (-0, -0.266706, 0.305887), (0.003867, -0.266706, 0.306656), (0.007145, -0.266706, 0.308847), (0.009335, -0.266706, 0.312125), (0.010105, -0.266706, 0.315992), (0.009156, -0.268677, 0.319784), (0.007008, -0.268677, 0.322999), (0.003793, -0.268677, 0.325148), (0, -0.268677, 0.325902), (-0.003793, -0.268677, 0.325148), (-0.007008, -0.268677, 0.322999), (-0.009156, -0.268677, 0.319784), (-0.00991, -0.268677, 0.315992), (-0.009156, -0.268677, 0.312199), (-0.007008, -0.268677, 0.308984), (-0.003793, -0.268677, 0.306836), (-0, -0.268677, 0.306081), (0.003793, -0.268677, 0.306836), (0.007008, -0.268677, 0.308984), (0.009156, -0.268677, 0.312199), (0.00991, -0.268677, 0.315992), (0.008625, -0.270572, 0.319564), (0.006601, -0.270572, 0.322593), (0.003573, -0.270572, 0.324616), (0, -0.270572, 0.325327), (-0.003572, -0.270572, 0.324616), (-0.006601, -0.270572, 0.322593), (-0.008625, -0.270572, 0.319564), (-0.009335, -0.270572, 0.315992), (-0.008625, -0.270572, 0.312419), (-0.006601, -0.270572, 0.30939), (-0.003572, -0.270572, 0.307367), (-0, -0.270572, 0.306656), (0.003572, -0.270572, 0.307367), (0.006601, -0.270572, 0.30939), (0.008625, -0.270572, 0.312419), (0.009335, -0.270572, 0.315992), (0.007762, -0.27232, 0.319207), (0.005941, -0.27232, 0.321932), (0.003215, -0.27232, 0.323754), (0, -0.27232, 0.324393), (-0.003215, -0.27232, 0.323754), (-0.005941, -0.27232, 0.321932), (-0.007762, -0.27232, 0.319207), (-0.008402, -0.27232, 0.315992), (-0.007762, -0.27232, 0.312776), (-0.005941, -0.27232, 0.310051), (-0.003215, -0.27232, 0.30823), (-0, -0.27232, 0.30759), (0.003215, -0.27232, 0.30823), (0.005941, -0.27232, 0.310051), (0.007762, -0.27232, 0.312776), (0.008402, -0.27232, 0.315992), (0.006601, -0.27385, 0.318726), (0.005052, -0.27385, 0.321044), (0.002734, -0.27385, 0.322593), (0, -0.27385, 0.323137), (-0.002734, -0.27385, 0.322593), (-0.005052, -0.27385, 0.321044), (-0.006601, -0.27385, 0.318726), (-0.007145, -0.27385, 0.315992), (-0.006601, -0.27385, 0.313257), (-0.005052, -0.27385, 0.310939), (-0.002734, -0.27385, 0.30939), (-0, -0.27385, 0.308847), (0.002734, -0.27385, 0.30939), (0.005052, -0.27385, 0.310939), (0.006601, -0.27385, 0.313257), (0.007145, -0.27385, 0.315992), (0.005186, -0.275107, 0.31814), (0.00397, -0.275107, 0.319961), (0.002148, -0.275107, 0.321178), (0, -0.275107, 0.321605), (-0.002148, -0.275107, 0.321178), (-0.00397, -0.275107, 0.319961), (-0.005186, -0.275107, 0.31814), (-0.005614, -0.275107, 0.315992), (-0.005186, -0.275107, 0.313843), (-0.00397, -0.275107, 0.312022), (-0.002148, -0.275107, 0.310805), (-0, -0.275107, 0.310378), (0.002148, -0.275107, 0.310805), (0.00397, -0.275107, 0.312022), (0.005186, -0.275107, 0.313843), (0.005614, -0.275107, 0.315992), (0.003572, -0.276041, 0.317471), (0.002734, -0.276041, 0.318726), (0.00148, -0.276041, 0.319564), (0, -0.276041, 0.319858), (-0.00148, -0.276041, 0.319564), (-0.002734, -0.276041, 0.318726), (-0.003572, -0.276041, 0.317471), (-0.003867, -0.276041, 0.315992), (-0.003572, -0.276041, 0.314512), (-0.002734, -0.276041, 0.313257), (-0.00148, -0.276041, 0.312419), (-0, -0.276041, 0.312125), (0.00148, -0.276041, 0.312419), (0.002734, -0.276041, 0.313257), (0.003572, -0.276041, 0.314512), (0.003867, -0.276041, 0.315992), (0.001821, -0.276616, 0.316746), (0.001394, -0.276616, 0.317386), (0.000754, -0.276616, 0.317813), (0, -0.276616, 0.317963), (-0.000754, -0.276616, 0.317813), (-0.001394, -0.276616, 0.317386), (-0.001821, -0.276616, 0.316746), (-0.001971, -0.276616, 0.315992), (-0.001821, -0.276616, 0.315237), (-0.001394, -0.276616, 0.314598), (-0.000754, -0.276616, 0.31417), (-0, -0.276616, 0.31402), (0.000754, -0.276616, 0.31417), (0.001394, -0.276616, 0.314598), (0.001821, -0.276616, 0.315237), (0.001971, -0.276616, 0.315992), (0, -0.27681, 0.315992), (-0.147259, -0.252004, 0.218345), (0.147259, -0.252004, 0.218345), (-0.147259, -0.252004, 0.395163), (0.147259, -0.252004, 0.395163), (-0.147259, 0.128746, 0.395163), (0.147259, 0.128746, 0.395163), (-0.147259, 0.128746, 0.218345), (0.147259, 0.128746, 0.218345), (-0.135474, -0.252004, 0.395163), (0.135474, -0.252004, 0.395163), (0.135474, 0.1201, 0.395163), (-0.135474, 0.1201, 0.395163), (-0.135474, -0.252004, 0.227624), (0.135474, -0.252004, 0.227624), (0.135474, 0.1201, 0.227624), (-0.135474, 0.1201, 0.227624)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(0.912073, -0.49592), (0.302115, -0.49592), (0.302115, -0.91906), (0.302115, -0.91906), (0.912073, -0.91906), (0.912073, -0.49592), (0.302112, -1.034223), (0.912075, -1.034223), (0.912075, -1.004921), (0.912075, -1.004921), (0.302112, -1.004921), (0.302112, -1.034223), (0.576183, -0.676299), (0.153038, -0.676299), (0.153038, -0.705602), (0.153038, -0.705602), (0.576183, -0.705602), (0.576183, -0.676299), (0.626465, -1.019509), (0.016502, -1.019509), (0.016502, -1.048812), (0.016502, -1.048812), (0.626465, -1.048812), (0.626465, -1.019509), (0.153038, -0.684163), (0.576183, -0.684163), (0.576183, -0.65486), (0.576183, -0.65486), (0.153038, -0.65486), (0.153038, -0.684163), (0.912073, -0.69742), (0.302115, -0.69742), (0.302115, -1.12056), (0.912073, -1.12056), (0.877307, -0.630285), (0.877307, -0.101089), (0.150541, -0.101089), (0.150541, -0.630285), (-0.024318, -1.312803), (0.550911, -1.312803), (0.550911, -0.967455), (-0.024318, -0.967455), (1.22919, -1.394359), (1.22919, -0.819131), (0.485537, -0.819131), (0.485537, -1.394359), (0.485537, -1.059439), (1.22919, -1.059439), (1.22919, -0.714092), (0.485537, -0.714091), (0.485537, -0.893778), (1.229191, -0.893778), (1.22919, -0.54843), (0.485537, -0.54843), (1.229191, -0.21476), (0.485537, -0.21476), (0.502423, -0.237777), (1.22919, -0.237777), (0.485537, -0.21476), (0.485537, -0.789989), (0.502423, -0.766973), (0.502423, -0.237777), (0.485537, -0.789989), (1.229191, -0.78999), (1.22919, -0.766973), (0.502423, -0.766973), (0.877307, -0.405916), (0.150541, -0.405916), (0.150541, -0.73314), (0.877307, -0.733141), (0.538521, -0.81504), (0.009325, -0.81504), (0.009325, -1.142264), (0.538521, -1.142264), (0.877307, -0.563132), (0.150542, -0.563132), (0.150542, -0.890357), (0.877307, -0.890356)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorDresserDrawer_2_Birkeland_0"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorDresserDrawer_2_Birkeland_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorDresserDrawer_2_Birkeland_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/WoodGrains2.jpg@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDresserDrawer_2_Birkeland_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

