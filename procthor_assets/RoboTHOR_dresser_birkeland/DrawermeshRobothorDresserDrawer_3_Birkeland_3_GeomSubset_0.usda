#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "DrawermeshRobothorDresserDrawer_3_Birkeland_3_GeomSubset_0"
    {
        def Mesh "DrawermeshRobothorDresserDrawer_3_Birkeland_3_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 2, 3, 0, 4, 5, 1, 1, 0, 4, 5, 6, 2, 2, 1, 5, 6, 7, 3, 3, 2, 6, 7, 4, 0, 0, 3, 7, 6, 5, 4, 7, 149, 150, 151, 152, 141, 142, 144, 143, 143, 144, 138, 137, 138, 144, 142, 140, 143, 137, 139, 141, 140, 142, 147, 146, 142, 141, 148, 147, 141, 139, 145, 148, 146, 147, 151, 150, 147, 148, 152, 151, 148, 145, 149, 152]
            rel material:binding = </root/_materials/M_RobothorDresserDrawer_3_Birkeland_0>
            normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (0.99999994, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -0.99999994), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (-1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 0.99999994), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, -0.99999994, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.487602, -0.267007, 0.207681), (-0.487602, -0.267007, 0.424328), (-0.170036, -0.267007, 0.424328), (-0.170036, -0.267007, 0.207681), (-0.487602, -0.252004, 0.207681), (-0.487602, -0.252004, 0.424328), (-0.170036, -0.252004, 0.424328), (-0.170036, -0.252004, 0.207681), (-0.338154, -0.266706, 0.319858), (-0.335964, -0.266706, 0.323137), (-0.332686, -0.266706, 0.325327), (-0.328819, -0.266706, 0.326096), (-0.324952, -0.266706, 0.325327), (-0.321674, -0.266706, 0.323137), (-0.319483, -0.266706, 0.319858), (-0.318714, -0.266706, 0.315992), (-0.319483, -0.266706, 0.312125), (-0.321674, -0.266706, 0.308847), (-0.324952, -0.266706, 0.306656), (-0.328819, -0.266706, 0.305887), (-0.332686, -0.266706, 0.306656), (-0.335964, -0.266706, 0.308847), (-0.338154, -0.266706, 0.312125), (-0.338923, -0.266706, 0.315992), (-0.337975, -0.268677, 0.319784), (-0.335826, -0.268677, 0.322999), (-0.332611, -0.268677, 0.325148), (-0.328819, -0.268677, 0.325902), (-0.325026, -0.268677, 0.325148), (-0.321811, -0.268677, 0.322999), (-0.319663, -0.268677, 0.319784), (-0.318908, -0.268677, 0.315992), (-0.319663, -0.268677, 0.312199), (-0.321811, -0.268677, 0.308984), (-0.325026, -0.268677, 0.306836), (-0.328819, -0.268677, 0.306081), (-0.332611, -0.268677, 0.306836), (-0.335826, -0.268677, 0.308984), (-0.337975, -0.268677, 0.312199), (-0.338729, -0.268677, 0.315992), (-0.337444, -0.270572, 0.319564), (-0.33542, -0.270572, 0.322593), (-0.332391, -0.270572, 0.324616), (-0.328819, -0.270572, 0.325327), (-0.325246, -0.270572, 0.324616), (-0.322218, -0.270572, 0.322593), (-0.320194, -0.270572, 0.319564), (-0.319483, -0.270572, 0.315992), (-0.320194, -0.270572, 0.312419), (-0.322218, -0.270572, 0.30939), (-0.325246, -0.270572, 0.307367), (-0.328819, -0.270572, 0.306656), (-0.332391, -0.270572, 0.307367), (-0.33542, -0.270572, 0.30939), (-0.337444, -0.270572, 0.312419), (-0.338154, -0.270572, 0.315992), (-0.336581, -0.27232, 0.319207), (-0.33476, -0.27232, 0.321932), (-0.332034, -0.27232, 0.323754), (-0.328819, -0.27232, 0.324393), (-0.325604, -0.27232, 0.323754), (-0.322878, -0.27232, 0.321932), (-0.321057, -0.27232, 0.319207), (-0.320417, -0.27232, 0.315992), (-0.321057, -0.27232, 0.312776), (-0.322878, -0.27232, 0.310051), (-0.325604, -0.27232, 0.308229), (-0.328819, -0.27232, 0.30759), (-0.332034, -0.27232, 0.308229), (-0.33476, -0.27232, 0.310051), (-0.336581, -0.27232, 0.312776), (-0.33722, -0.27232, 0.315992), (-0.33542, -0.27385, 0.318726), (-0.333871, -0.27385, 0.321044), (-0.331553, -0.27385, 0.322593), (-0.328819, -0.27385, 0.323137), (-0.326084, -0.27385, 0.322593), (-0.323766, -0.27385, 0.321044), (-0.322218, -0.27385, 0.318726), (-0.321674, -0.27385, 0.315992), (-0.322218, -0.27385, 0.313257), (-0.323766, -0.27385, 0.310939), (-0.326084, -0.27385, 0.30939), (-0.328819, -0.27385, 0.308847), (-0.331553, -0.27385, 0.30939), (-0.333871, -0.27385, 0.310939), (-0.33542, -0.27385, 0.313257), (-0.335964, -0.27385, 0.315992), (-0.334005, -0.275107, 0.31814), (-0.332788, -0.275107, 0.319961), (-0.330967, -0.275107, 0.321178), (-0.328819, -0.275107, 0.321605), (-0.32667, -0.275107, 0.321178), (-0.324849, -0.275107, 0.319961), (-0.323632, -0.275107, 0.31814), (-0.323205, -0.275107, 0.315992), (-0.323632, -0.275107, 0.313843), (-0.324849, -0.275107, 0.312022), (-0.32667, -0.275107, 0.310805), (-0.328819, -0.275107, 0.310378), (-0.330967, -0.275107, 0.310805), (-0.332788, -0.275107, 0.312022), (-0.334005, -0.275107, 0.313843), (-0.334433, -0.275107, 0.315992), (-0.332391, -0.276041, 0.317471), (-0.331553, -0.276041, 0.318726), (-0.330298, -0.276041, 0.319564), (-0.328819, -0.276041, 0.319858), (-0.327339, -0.276041, 0.319564), (-0.326084, -0.276041, 0.318726), (-0.325246, -0.276041, 0.317471), (-0.324952, -0.276041, 0.315992), (-0.325246, -0.276041, 0.314512), (-0.326084, -0.276041, 0.313257), (-0.327339, -0.276041, 0.312419), (-0.328819, -0.276041, 0.312125), (-0.330298, -0.276041, 0.312419), (-0.331553, -0.276041, 0.313257), (-0.332391, -0.276041, 0.314512), (-0.332686, -0.276041, 0.315992), (-0.33064, -0.276616, 0.316746), (-0.330213, -0.276616, 0.317386), (-0.329573, -0.276616, 0.317813), (-0.328819, -0.276616, 0.317963), (-0.328064, -0.276616, 0.317813), (-0.327425, -0.276616, 0.317386), (-0.326997, -0.276616, 0.316746), (-0.326847, -0.276616, 0.315992), (-0.326997, -0.276616, 0.315237), (-0.327425, -0.276616, 0.314598), (-0.328064, -0.276616, 0.31417), (-0.328819, -0.276616, 0.31402), (-0.329573, -0.276616, 0.31417), (-0.330213, -0.276616, 0.314598), (-0.33064, -0.276616, 0.315237), (-0.33079, -0.276616, 0.315992), (-0.328819, -0.27681, 0.315992), (-0.180864, -0.252004, 0.218345), (-0.476774, -0.252004, 0.218345), (-0.180864, -0.252004, 0.395163), (-0.476774, -0.252004, 0.395163), (-0.180864, 0.128746, 0.395163), (-0.476774, 0.128746, 0.395163), (-0.180864, 0.128746, 0.218345), (-0.476774, 0.128746, 0.218345), (-0.192704, -0.252004, 0.395163), (-0.464934, -0.252004, 0.395163), (-0.464934, 0.1201, 0.395163), (-0.192704, 0.1201, 0.395163), (-0.192704, -0.252004, 0.227624), (-0.464934, -0.252004, 0.227624), (-0.464934, 0.1201, 0.227624), (-0.192704, 0.1201, 0.227624)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(1.611106, -0.656322), (1.611106, -0.233182), (0.99086, -0.233182), (0.99086, -0.233182), (0.99086, -0.656322), (1.611106, -0.656322), (1.268259, -0.212886), (0.845115, -0.212886), (0.845115, -0.242189), (0.845115, -0.242189), (1.268259, -0.242189), (1.268259, -0.212886), (1.611109, -0.540439), (0.990857, -0.540439), (0.990858, -0.569741), (0.990858, -0.569741), (1.611109, -0.569741), (1.611109, -0.540439), (0.845115, -0.22075), (1.268259, -0.22075), (1.268259, -0.191448), (1.268259, -0.191448), (0.845115, -0.191448), (0.845115, -0.22075), (0.701166, -0.5854), (1.321418, -0.585399), (1.321418, -0.556097), (1.321418, -0.556097), (0.701166, -0.556097), (0.701166, -0.5854), (0.990859, -0.455279), (1.611106, -0.455279), (1.611106, -0.032139), (0.990859, -0.032139), (0.977793, -0.367011), (0.977793, 0.164687), (0.251027, 0.164687), (0.251027, -0.367011), (0.070018, -1.048173), (0.647967, -1.048173), (0.647967, -0.702825), (0.070018, -0.702825), (1.328882, -1.130587), (1.328882, -0.552638), (0.58523, -0.552638), (0.58523, -1.130587), (0.58523, -0.794809), (1.328883, -0.794809), (1.328882, -0.449462), (0.58523, -0.449462), (0.58523, -0.629148), (1.328883, -0.629148), (1.328883, -0.283801), (0.58523, -0.283801), (1.328881, 0.051731), (0.585231, 0.051731), (0.602117, 0.028606), (1.328881, 0.028606), (0.585231, 0.051731), (0.585231, -0.526216), (0.602117, -0.503091), (0.602117, 0.028606), (0.585231, -0.526216), (1.328881, -0.526216), (1.328881, -0.503091), (0.602117, -0.503091), (0.977792, -0.141505), (0.251027, -0.141505), (0.251027, -0.468729), (0.977792, -0.468729), (0.635493, -0.5504), (0.103795, -0.5504), (0.103795, -0.877624), (0.635493, -0.877624), (0.977792, -0.298367), (0.251027, -0.298367), (0.251027, -0.625592), (0.977792, -0.625592)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorDresserDrawer_3_Birkeland_0"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorDresserDrawer_3_Birkeland_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorDresserDrawer_3_Birkeland_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/WoodGrains2.jpg@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDresserDrawer_3_Birkeland_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

