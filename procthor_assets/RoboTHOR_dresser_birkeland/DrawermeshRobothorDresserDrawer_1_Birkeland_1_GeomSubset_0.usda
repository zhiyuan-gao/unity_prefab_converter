#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "DrawermeshRobothorDresserDrawer_1_Birkeland_1_GeomSubset_0"
    {
        def Mesh "DrawermeshRobothorDresserDrawer_1_Birkeland_1_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 2, 3, 0, 4, 5, 0, 0, 3, 4, 5, 6, 1, 1, 0, 5, 6, 7, 2, 2, 1, 6, 7, 4, 3, 3, 2, 7, 5, 4, 7, 6, 149, 150, 151, 152, 141, 142, 144, 143, 143, 144, 138, 137, 138, 144, 142, 140, 143, 137, 139, 141, 140, 142, 147, 146, 142, 141, 148, 147, 141, 139, 145, 148, 146, 147, 151, 150, 147, 148, 152, 151, 148, 145, 149, 152]
            rel material:binding = </root/_materials/M_RobothorDresserDrawer_1_Birkeland_0>
            normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 0.99999994), (0, 0, 1), (1, 0, 0), (0.99999994, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -0.99999994), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-0.99999994, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.170036, -0.267007, 0.207681), (0.170036, -0.267007, 0.424328), (0.487602, -0.267007, 0.424328), (0.487602, -0.267007, 0.207681), (0.487602, -0.252004, 0.207681), (0.170036, -0.252004, 0.207681), (0.170036, -0.252004, 0.424328), (0.487602, -0.252004, 0.424328), (0.319483, -0.266706, 0.319858), (0.321674, -0.266706, 0.323137), (0.324952, -0.266706, 0.325327), (0.328819, -0.266706, 0.326096), (0.332685, -0.266706, 0.325327), (0.335963, -0.266706, 0.323137), (0.338154, -0.266706, 0.319858), (0.338923, -0.266706, 0.315992), (0.338154, -0.266706, 0.312125), (0.335964, -0.266706, 0.308847), (0.332685, -0.266706, 0.306656), (0.328819, -0.266706, 0.305887), (0.324952, -0.266706, 0.306656), (0.321674, -0.266706, 0.308847), (0.319483, -0.266706, 0.312125), (0.318714, -0.266706, 0.315992), (0.319662, -0.268677, 0.319784), (0.321811, -0.268677, 0.322999), (0.325026, -0.268677, 0.325148), (0.328819, -0.268677, 0.325902), (0.332611, -0.268677, 0.325148), (0.335826, -0.268677, 0.322999), (0.337974, -0.268677, 0.319784), (0.338729, -0.268677, 0.315992), (0.337974, -0.268677, 0.312199), (0.335826, -0.268677, 0.308984), (0.332611, -0.268677, 0.306836), (0.328819, -0.268677, 0.306081), (0.325026, -0.268677, 0.306836), (0.321811, -0.268677, 0.308984), (0.319662, -0.268677, 0.312199), (0.318908, -0.268677, 0.315992), (0.320194, -0.270572, 0.319564), (0.322217, -0.270572, 0.322593), (0.325246, -0.270572, 0.324616), (0.328819, -0.270572, 0.325327), (0.332391, -0.270572, 0.324616), (0.33542, -0.270572, 0.322593), (0.337443, -0.270572, 0.319564), (0.338154, -0.270572, 0.315992), (0.337443, -0.270572, 0.312419), (0.33542, -0.270572, 0.30939), (0.332391, -0.270572, 0.307367), (0.328819, -0.270572, 0.306656), (0.325246, -0.270572, 0.307367), (0.322217, -0.270572, 0.30939), (0.320194, -0.270572, 0.312419), (0.319483, -0.270572, 0.315992), (0.321056, -0.27232, 0.319207), (0.322878, -0.27232, 0.321932), (0.325603, -0.27232, 0.323754), (0.328819, -0.27232, 0.324393), (0.332034, -0.27232, 0.323754), (0.334759, -0.27232, 0.321932), (0.336581, -0.27232, 0.319207), (0.33722, -0.27232, 0.315992), (0.336581, -0.27232, 0.312776), (0.334759, -0.27232, 0.310051), (0.332034, -0.27232, 0.308229), (0.328819, -0.27232, 0.30759), (0.325603, -0.27232, 0.308229), (0.322878, -0.27232, 0.310051), (0.321056, -0.27232, 0.312776), (0.320417, -0.27232, 0.315992), (0.322217, -0.27385, 0.318726), (0.323766, -0.27385, 0.321044), (0.326084, -0.27385, 0.322593), (0.328819, -0.27385, 0.323137), (0.331553, -0.27385, 0.322593), (0.333871, -0.27385, 0.321044), (0.33542, -0.27385, 0.318726), (0.335964, -0.27385, 0.315992), (0.33542, -0.27385, 0.313257), (0.333871, -0.27385, 0.310939), (0.331553, -0.27385, 0.30939), (0.328819, -0.27385, 0.308847), (0.326084, -0.27385, 0.30939), (0.323766, -0.27385, 0.310939), (0.322217, -0.27385, 0.313257), (0.321674, -0.27385, 0.315992), (0.323632, -0.275107, 0.31814), (0.324849, -0.275107, 0.319961), (0.32667, -0.275107, 0.321178), (0.328819, -0.275107, 0.321605), (0.330967, -0.275107, 0.321178), (0.332788, -0.275107, 0.319961), (0.334005, -0.275107, 0.31814), (0.334432, -0.275107, 0.315992), (0.334005, -0.275107, 0.313843), (0.332788, -0.275107, 0.312022), (0.330967, -0.275107, 0.310805), (0.328819, -0.275107, 0.310378), (0.32667, -0.275107, 0.310805), (0.324849, -0.275107, 0.312022), (0.323632, -0.275107, 0.313843), (0.323205, -0.275107, 0.315992), (0.325246, -0.276041, 0.317471), (0.326084, -0.276041, 0.318726), (0.327339, -0.276041, 0.319564), (0.328819, -0.276041, 0.319858), (0.330298, -0.276041, 0.319564), (0.331553, -0.276041, 0.318726), (0.332391, -0.276041, 0.317471), (0.332685, -0.276041, 0.315992), (0.332391, -0.276041, 0.314512), (0.331553, -0.276041, 0.313257), (0.330298, -0.276041, 0.312419), (0.328819, -0.276041, 0.312125), (0.327339, -0.276041, 0.312419), (0.326084, -0.276041, 0.313257), (0.325246, -0.276041, 0.314512), (0.324952, -0.276041, 0.315992), (0.326997, -0.276616, 0.316746), (0.327425, -0.276616, 0.317386), (0.328064, -0.276616, 0.317813), (0.328819, -0.276616, 0.317963), (0.329573, -0.276616, 0.317813), (0.330212, -0.276616, 0.317386), (0.33064, -0.276616, 0.316746), (0.33079, -0.276616, 0.315992), (0.33064, -0.276616, 0.315237), (0.330212, -0.276616, 0.314598), (0.329573, -0.276616, 0.31417), (0.328819, -0.276616, 0.31402), (0.328064, -0.276616, 0.31417), (0.327425, -0.276616, 0.314598), (0.326997, -0.276616, 0.315237), (0.326847, -0.276616, 0.315992), (0.328819, -0.27681, 0.315992), (0.476838, -0.252004, 0.218345), (0.178245, -0.252004, 0.218345), (0.476838, -0.252004, 0.395163), (0.178245, -0.252004, 0.395163), (0.476838, 0.128746, 0.395163), (0.178245, 0.128746, 0.395163), (0.476838, 0.128746, 0.218345), (0.178245, 0.128746, 0.218345), (0.464891, -0.252004, 0.395163), (0.190192, -0.252004, 0.395163), (0.190192, 0.1201, 0.395163), (0.464891, 0.1201, 0.395163), (0.464891, -0.252004, 0.227624), (0.190192, -0.252004, 0.227624), (0.190192, 0.1201, 0.227624), (0.464891, 0.1201, 0.227624)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(1.11607, -0.587926), (1.11607, -0.164786), (0.495823, -0.164786), (0.495823, -0.164786), (0.495823, -0.587926), (1.11607, -0.587926), (0.495822, -0.701471), (1.116073, -0.701471), (1.116073, -0.672169), (1.116073, -0.672169), (0.495822, -0.672169), (0.495822, -0.701471), (0.773959, -0.345315), (0.350816, -0.345315), (0.350816, -0.374618), (0.350816, -0.374618), (0.77396, -0.374618), (0.773959, -0.345315), (0.827258, -0.688526), (0.207007, -0.688526), (0.207007, -0.717828), (0.207007, -0.717828), (0.827258, -0.717828), (0.827258, -0.688526), (0.350816, -0.353179), (0.77396, -0.353179), (0.77396, -0.323877), (0.77396, -0.323877), (0.350816, -0.323877), (0.350816, -0.353179), (1.116071, -0.365232), (0.495824, -0.365232), (0.495824, -0.788372), (1.116071, -0.788371), (0.681445, -0.701174), (0.681445, -0.164653), (-0.045322, -0.164653), (-0.045322, -0.701174), (-0.229384, -1.379437), (0.353807, -1.379437), (0.353807, -1.034089), (-0.229384, -1.034089), (1.031495, -1.463433), (1.031495, -0.880243), (0.287842, -0.880242), (0.287842, -1.463433), (0.287842, -1.124124), (1.031495, -1.124124), (1.031495, -0.778777), (0.287842, -0.778777), (0.287842, -0.958464), (1.031495, -0.958464), (1.031495, -0.613116), (0.287842, -0.613116), (1.031495, -0.273923), (0.287842, -0.273923), (0.304729, -0.297258), (1.031495, -0.297258), (0.287842, -0.273923), (0.287842, -0.857114), (0.304729, -0.833779), (0.304729, -0.297258), (0.287842, -0.857114), (1.031495, -0.857114), (1.031495, -0.833779), (0.304729, -0.833779), (0.681444, -0.473757), (-0.045322, -0.473757), (-0.045322, -0.800982), (0.681444, -0.800982), (0.341187, -0.881651), (-0.195333, -0.881651), (-0.195333, -1.208876), (0.341187, -1.208876), (0.681444, -0.630157), (-0.045322, -0.630157), (-0.045322, -0.957382), (0.681444, -0.957382)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorDresserDrawer_1_Birkeland_0"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorDresserDrawer_1_Birkeland_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorDresserDrawer_1_Birkeland_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/WoodGrains2.jpg@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDresserDrawer_1_Birkeland_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

