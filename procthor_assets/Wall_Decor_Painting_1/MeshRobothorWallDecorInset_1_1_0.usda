#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "RobothorWallDecorInset_1_1"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "RobothorWallDecorInset_1_1" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.352703, -0.014911, -0.803442), (0.349526, 0.01519, 0.404585)]
            int[] faceVertexCounts = [4, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [0, 1, 3, 2, 28, 30, 29, 28, 31, 30, 4, 5, 7, 6, 12, 14, 13, 12, 15, 14, 13, 17, 16, 13, 14, 17, 16, 19, 18, 16, 17, 19, 20, 22, 21, 20, 23, 22, 13, 18, 12, 13, 16, 18, 17, 15, 19, 17, 14, 15, 24, 15, 12, 24, 23, 15, 20, 18, 19, 20, 25, 18, 25, 12, 18, 25, 24, 12, 23, 19, 15, 23, 20, 19, 25, 21, 26, 25, 20, 21, 24, 26, 27, 24, 25, 26, 23, 27, 22, 23, 24, 27, 8, 9, 11, 10, 29, 22, 27, 29, 30, 22, 31, 26, 21, 31, 28, 26, 28, 27, 26, 28, 29, 27, 30, 21, 22, 30, 31, 21]
            rel material:binding = </root/_materials/M_RobothorWallDecorInset_1_1_0>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0.000004296997, 1, 0.0000034724915), (-5.246552e-7, 1, -3.01188e-7), (-0.000001166227, 1, -5.842278e-7), (0.000004296997, 1, 0.0000034724915), (0.0000036554527, 1, -0.0000043524146), (-5.246552e-7, 1, -3.01188e-7), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0.0000014243813, -1, 0), (0.0000014243813, -1, 0), (0.0000014243813, -1, 0), (0.0000014243813, -1, 0), (0.0000014243814, -1, 0), (0.0000014243813, -1, 0), (1, -0.00003246191, 0), (1, -0.000034837518, 0), (1, -0.00003240343, 0), (1, -0.00003246191, 0), (1, -0.000034895995, 0), (1, -0.000034837518, 0), (0, 0, 1), (0, 0, 1), (0, 0, 0.99999994), (0, 0, 1), (0, 0, 1), (0, 0, 1), (9.381077e-9, 0, 1), (2.5933616e-10, 0, 1), (9.640391e-9, 0, 1), (9.381077e-9, 0, 1), (0, 0, 1), (2.5933616e-10, 0, 1), (-1.0405541e-8, 0, -1), (-2.876325e-10, 0, -1), (-1.0693187e-8, 0, -1), (-1.0405541e-8, 0, -1), (0, 0, -0.99999994), (-2.876325e-10, 0, -1), (0.00006560176, 1, -0.000034478828), (0.000044065622, 1, 0.000048216265), (0.0000431723, 1, -0.000047806607), (0.00006560176, 1, -0.000034478828), (0.00006624064, 1, 0.00003382574), (0.000044065622, 1, 0.000048216265), (0, 1, -1.0250638e-8), (9.112018e-7, 1, -6.4633025e-7), (1.7147947e-8, 1, 8.9316626e-7), (0, 1, -1.0250638e-8), (6.3925063e-7, 1, -7.589978e-7), (9.112018e-7, 1, -6.4633025e-7), (6.3925063e-7, 1, -7.589978e-7), (0.0000431723, 1, -0.000047806607), (9.112018e-7, 1, -6.4633025e-7), (6.3925063e-7, 1, -7.589978e-7), (0.00006560176, 1, -0.000034478828), (0.0000431723, 1, -0.000047806607), (0.00006624064, 1, 0.00003382574), (1.7147947e-8, 1, 8.9316626e-7), (0.000044065622, 1, 0.000048216265), (0.00006624064, 1, 0.00003382574), (0, 1, -1.0250638e-8), (1.7147947e-8, 1, 8.9316626e-7), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -0.99999994), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (-0.000001166227, 1, -5.842278e-7), (0, 1, 0), (-8.6750777e-7, 1, 3.093744e-7), (-0.000001166227, 1, -5.842278e-7), (-5.246552e-7, 1, -3.01188e-7), (0, 1, 0), (0.0000036554527, 1, -0.0000043524146), (0.000005523174, 1, 0.000005794929), (0.0000046559894, 1, -0.000005477773), (0.0000036554527, 1, -0.0000043524146), (0.000004296997, 1, 0.0000034724915), (0.000005523174, 1, 0.000005794929), (0.000004296997, 1, 0.0000034724915), (-8.6750777e-7, 1, 3.093744e-7), (0.000005523174, 1, 0.000005794929), (0.000004296997, 1, 0.0000034724915), (-0.000001166227, 1, -5.842278e-7), (-8.6750777e-7, 1, 3.093744e-7), (-5.246552e-7, 1, -3.01188e-7), (0.0000046559894, 1, -0.000005477773), (0, 1, 0), (-5.246552e-7, 1, -3.01188e-7), (0.0000036554527, 1, -0.0000043524146), (0.0000046559894, 1, -0.000005477773)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.003673, 0.014384, -0.803442), (-0.004375, 0.014384, -0.803442), (-0.003673, 0.01519, -0.803442), (-0.004375, 0.01519, -0.803442), (-0.003673, 0.014384, -0.803442), (-0.004375, 0.014384, -0.803442), (-0.003673, 0.01519, -0.803442), (-0.004375, 0.01519, -0.803442), (-0.003673, 0.014384, -0.803442), (-0.004375, 0.014384, -0.803442), (-0.003673, 0.01519, -0.803442), (-0.004375, 0.01519, -0.803442), (0.349526, -0.014911, -0.400645), (0.349526, 0.014788, -0.400645), (0.349526, 0.014788, 0.404585), (0.349526, -0.014911, 0.404585), (-0.352702, 0.014787, -0.400645), (-0.352702, 0.014787, 0.404585), (-0.352703, -0.01491, -0.400645), (-0.352703, -0.01491, 0.404585), (-0.344374, -0.01491, 0.391446), (-0.344374, -0.007353, 0.391446), (0.341197, -0.007353, 0.391446), (0.341197, -0.01491, 0.391446), (0.341197, -0.01491, -0.387506), (-0.344374, -0.01491, -0.387506), (-0.344374, -0.007353, -0.387506), (0.341197, -0.007353, -0.387506), (-0.263743, -0.007354, -0.291659), (0.260566, -0.007353, -0.291659), (0.260566, -0.007353, 0.295599), (-0.263743, -0.007354, 0.295599)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-9.257482, -9.755256), (-9.257482, -9.75594), (-9.256798, -9.75594), (-9.256798, -9.755256), (-9, 0), (-10, 1), (-10, 0), (-9, 0), (-9, 1), (-10, 1), (-19.470932, -9.603984), (-19.470932, -9.604188), (-19.470728, -9.604188), (-19.470728, -9.603984), (-18.996435, 0.272553), (-20.947891, 0.200571), (-18.996435, 0.200573), (-18.996435, 0.272553), (-20.947891, 0.272551), (-20.947891, 0.200571), (-18.094519, -0.875413), (-20.049786, 1.076181), (-20.049786, -0.875411), (-18.094519, -0.875413), (-18.094519, 1.076183), (-20.049786, 1.076181), (-18.996405, 0.248606), (-20.947922, 0.176628), (-18.996405, 0.17663), (-18.996405, 0.248606), (-20.947922, 0.248604), (-20.947922, 0.176628), (-19.01238, 0.204634), (-20.921108, 0.186322), (-19.01238, 0.186323), (-19.01238, 0.204634), (-20.921108, 0.204632), (-20.921108, 0.186322), (-20.450426, 0.299197), (-18.49512, 0.371178), (-20.450426, 0.371176), (-20.450426, 0.299197), (-18.49512, 0.299198), (-18.49512, 0.371178), (-18.49509, 0.396454), (-20.450455, 0.324469), (-18.49509, 0.324471), (-18.49509, 0.396454), (-20.450455, 0.396452), (-20.450455, 0.324469), (-20.427193, -0.872322), (-20.450382, 1.047388), (-20.450382, -0.904167), (-20.427193, -0.872322), (-20.427193, 1.015541), (-20.450382, 1.047388), (-18.518353, 1.015543), (-18.495163, -0.904167), (-18.495163, 1.04739), (-18.518353, 1.015543), (-18.518353, -0.872322), (-18.495163, -0.904167), (-18.518353, -0.872322), (-20.450382, -0.904167), (-18.495163, -0.904167), (-18.518353, -0.872322), (-20.427193, -0.872322), (-20.450382, -0.904167), (-20.427193, 1.015541), (-18.495163, 1.04739), (-20.450382, 1.047388), (-20.427193, 1.015541), (-18.518353, 1.015543), (-18.495163, 1.04739), (-19.020008, 0.183975), (-20.90816, 0.165654), (-19.020006, 0.165654), (-19.020008, 0.183975), (-20.90816, 0.183974), (-20.90816, 0.165654), (-20.920906, 0.175988), (-19.012583, 0.1943), (-20.920906, 0.194298), (-20.920906, 0.175988), (-19.012583, 0.175989), (-19.012583, 0.1943), (-20.907768, 0.155327), (-19.0204, 0.173641), (-20.907768, 0.17364), (-20.907768, 0.155327), (-19.0204, 0.155327), (-19.0204, 0.173641), (-29.321661, -9.316775), (-29.321661, -9.317148), (-29.321287, -9.317148), (-29.321287, -9.316775), (-29.724878, 0.286931), (-29.79223, 0.783613), (-29.79223, 0.217242), (-29.724878, 0.286931), (-29.724878, 0.713923), (-29.79223, 0.783613), (-29.286917, 0.713923), (-29.219564, 0.217242), (-29.219564, 0.783613), (-29.286917, 0.713923), (-29.286917, 0.286931), (-29.219564, 0.217242), (-29.286917, 0.286931), (-29.79223, 0.217242), (-29.219564, 0.217242), (-29.286917, 0.286931), (-29.724878, 0.286931), (-29.79223, 0.217242), (-29.724878, 0.713923), (-29.219564, 0.783613), (-29.79223, 0.783613), (-29.724878, 0.713923), (-29.286917, 0.713923), (-29.219564, 0.783613)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_RobothorWallDecorInset_1_1_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2]
                rel material:binding = </root/_materials/M_RobothorWallDecorInset_1_1_0>
            }

            def GeomSubset "M_RobothorWallDecorInset_1_1_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
                rel material:binding = </root/_materials/M_RobothorWallDecorInset_1_1_1>
            }

            def GeomSubset "M_RobothorWallDecorInset_1_1_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [30, 31, 32, 33, 34, 35, 36, 37, 38]
                rel material:binding = </root/_materials/M_RobothorWallDecorInset_1_1_2>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorWallDecorInset_1_1_0"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecorInset_1_1_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorWallDecorInset_1_1_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/WH_EdHop.jpg@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecorInset_1_1_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_RobothorWallDecorInset_1_1_1"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecorInset_1_1_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.14705884, 0.14705884, 0.14705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }
        }

        def Material "M_RobothorWallDecorInset_1_1_2"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecorInset_1_1_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (1, 0.97794116, 0.97794116)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorWallDecorInset_1_1_2/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecorInset_1_1_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

