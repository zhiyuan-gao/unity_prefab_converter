#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "DrawermeshRobothorSideTableDrawer_2_Hopen_2_GeomSubset_2"
    {
        def Mesh "DrawermeshRobothorSideTableDrawer_2_Hopen_2_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [76, 77, 78, 79, 79, 78, 80, 81, 82, 76, 79, 83, 83, 79, 81, 84, 84, 81, 80, 85, 85, 80, 78, 86, 86, 78, 77, 87, 87, 77, 76, 82, 87, 82, 83, 86, 86, 83, 84, 85]
            rel material:binding = </root/_materials/M_RobothorSideTableDrawer_2_Hopen_2>
            normal3f[] normals = [(-0.99999905, -0.0013443308, 0.0000841984), (-0.99999905, -0.0013443308, 0.0000841984), (-0.999999, -0.0013904395, 0.00004634969), (-0.999999, -0.001411152, 0.000029347697), (-0.999999, -0.001411152, 0.000029347697), (-0.999999, -0.0013904395, 0.00004634969), (-0.999999, -0.0014469044, 0), (-0.999999, -0.0014469044, 0), (5.7389893e-9, 0, 1), (5.7389893e-9, 0, 1), (5.7389893e-9, 0, 1), (5.7389893e-9, 0, 1), (0.002239773, -0.99999744, 0), (0.002239773, -0.99999744, 0), (0.002239773, -0.99999744, 0), (0.002239773, -0.99999744, 0), (-7.7664644e-8, 0, -1), (-7.7664644e-8, 0, -1), (-7.7664644e-8, 0, -1), (-7.7664644e-8, 0, -1), (-0.0022399514, 0.99999744, 0), (-0.0022399514, 0.99999744, 0), (-0.0022399514, 0.99999744, 0), (-0.0022399514, 0.99999744, 0), (1.1977125e-8, 0, -1), (1.1977125e-8, 0, -1), (1.1977125e-8, 0, -1), (1.1977125e-8, 0, -1), (-0.0022399803, 0.99999744, 0), (-0.0022399803, 0.99999744, 0), (-0.0022399803, 0.99999744, 0), (-0.0022399803, 0.99999744, 0), (0.999999, 0.0014147761, -0.00002685841), (0.999999, 0.0014147761, -0.00002685841), (0.9999989, 0.0014357042, -0.0000093615945), (0.999999, 0.001429217, -0.000014785072), (0.999999, 0.001429217, -0.000014785072), (0.9999989, 0.0014357042, -0.0000093615945), (0.99999887, 0.0014469015, 0), (0.99999887, 0.0014469015, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.469899, 0.200234, -0.209326), (-0.027772, 0.201226, -0.209326), (-0.027772, 0.201226, -0.216285), (-0.469899, 0.200234, -0.216285), (-0.469328, -0.212652, -0.216285), (-0.0272, -0.21166, -0.216285), (-0.0272, -0.21166, -0.209326), (-0.469328, -0.212652, -0.209326), (-0.469343, -0.201576, -0.216285), (-0.027757, 0.190266, -0.216285), (-0.027216, -0.200585, -0.216285), (-0.0188, -0.200566, -0.216285), (0.001749, -0.20052, -0.216285), (0.001749, -0.20052, -0.209326), (0.001764, -0.211596, -0.209326), (0.001764, -0.211596, -0.216285), (-0.027215, -0.200585, -0.032533), (-0.469343, -0.201576, -0.032533), (-0.469328, -0.212652, -0.032533), (-0.0272, -0.21166, -0.032533), (-0.498307, -0.201641, -0.032533), (-0.498307, -0.201641, -0.044229), (-0.498292, -0.212717, -0.044232), (-0.498292, -0.212717, -0.032533), (-0.027215, -0.200585, -0.044229), (-0.469343, -0.201576, -0.044229), (-0.469328, -0.212652, -0.044232), (-0.0272, -0.21166, -0.044232), (0.001749, -0.20052, -0.044229), (0.001764, -0.211596, -0.044232), (-0.498307, -0.201641, -0.209326), (-0.498307, -0.201641, -0.216285), (-0.498292, -0.212717, -0.216285), (-0.498292, -0.212717, -0.209326), (-0.027772, 0.201226, -0.044151), (-0.019356, 0.201245, -0.209326), (-0.019356, 0.201245, -0.216285), (-0.478315, 0.200216, -0.216285), (-0.478315, 0.200216, -0.209326), (-0.018785, -0.211642, -0.216285), (-0.018785, -0.211642, -0.209326), (-0.477744, -0.212671, -0.209326), (-0.477744, -0.212671, -0.216285), (-0.477759, -0.201596, -0.216285), (-0.477759, -0.201596, -0.032533), (-0.477744, -0.212671, -0.032533), (-0.018784, -0.211642, -0.032533), (-0.0188, -0.200566, -0.032533), (-0.478315, 0.200216, -0.044151), (-0.469899, 0.200234, -0.044151), (-0.477744, -0.212671, -0.044232), (-0.018784, -0.211642, -0.044232), (-0.477759, -0.201596, -0.209326), (-0.4783, 0.189256, -0.209326), (-0.4783, 0.189256, -0.216285), (-0.477759, -0.201596, -0.044229), (-0.4783, 0.189256, -0.04419), (-0.469343, -0.201576, -0.209326), (-0.027216, -0.200585, -0.209326), (-0.469884, 0.189275, -0.209326), (-0.027757, 0.190266, -0.209326), (-0.027757, 0.190266, -0.04419), (-0.0188, -0.200566, -0.209326), (-0.019341, 0.190285, -0.216285), (-0.019341, 0.190285, -0.209326), (-0.469884, 0.189275, -0.216285), (0.001749, -0.20052, -0.032533), (0.001764, -0.211596, -0.032533), (-0.019356, 0.201245, -0.044151), (-0.469884, 0.189275, -0.04419), (-0.0188, -0.200566, -0.044229), (-0.019341, 0.190285, -0.04419), (-0.287191, 0.189686, -0.04419), (-0.287206, 0.200645, -0.209326), (-0.287206, 0.200645, -0.044151), (-0.287191, 0.189686, -0.209326), (-0.290101, -0.21227, -0.044368), (-0.290101, -0.21227, -0.049841), (-0.290088, -0.222275, -0.049841), (-0.290075, -0.231252, -0.044368), (-0.290088, -0.222275, -0.071734), (-0.290075, -0.231252, -0.071734), (-0.206614, -0.212083, -0.044368), (-0.206587, -0.231065, -0.044368), (-0.206587, -0.231065, -0.071734), (-0.2066, -0.222088, -0.071734), (-0.2066, -0.222088, -0.049841), (-0.206614, -0.212083, -0.049841), (-0.46933, -0.211289, -0.044232), (-0.46933, -0.211289, -0.209326), (-0.027202, -0.210298, -0.209326), (-0.027202, -0.210298, -0.044232), (-0.469341, -0.202845, -0.044232), (-0.027214, -0.201853, -0.044232), (-0.027214, -0.201853, -0.209326), (-0.469341, -0.202845, -0.209326), (-0.45133, -0.211249, -0.057449), (-0.45133, -0.211249, -0.196108), (-0.045202, -0.210338, -0.196108), (-0.045202, -0.210338, -0.057449), (-0.45133, -0.208167, -0.057449), (-0.45133, -0.208167, -0.196108), (-0.045202, -0.207256, -0.196108), (-0.045202, -0.207256, -0.057449)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-29.916227, 0.846002), (-29.905539, 0.846002), (-29.905539, 0.865541), (-29.916227, 0.883076), (-29.916227, 0.883076), (-29.905539, 0.865541), (-29.862778, 0.865541), (-29.862778, 0.883076), (-29.308268, 0.136412), (-29.47133, 0.136047), (-29.47128, 0.098972), (-29.308216, 0.099339), (-29.308125, 0.543981), (-29.471186, 0.543981), (-29.471188, 0.490533), (-29.308125, 0.490534), (-29.30817, 0.259433), (-29.47123, 0.2598), (-29.471256, 0.242265), (-29.308193, 0.2419), (-29.308125, 0.765512), (-29.471188, 0.765512), (-29.471188, 0.722753), (-29.308125, 0.722753), (-29.308174, 0.353014), (-29.471237, 0.35338), (-29.471264, 0.333842), (-29.308203, 0.333475), (-29.308126, 0.878881), (-29.471186, 0.878881), (-29.471186, 0.86819), (-29.308126, 0.868191), (-29.905539, 0.707501), (-29.916227, 0.7075), (-29.91623, 0.670423), (-29.905539, 0.687959), (-29.905539, 0.687959), (-29.91623, 0.670423), (-29.862778, 0.670423), (-29.862778, 0.687959)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorSideTableDrawer_2_Hopen_2"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorSideTableDrawer_2_Hopen_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorSideTableDrawer_2_Hopen_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorSideTableDrawer_2_Hopen_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

