#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshSideTableDrawer_216_2_1_GeomSubset_1"
    {
        def Mesh "MeshSideTableDrawer_216_2_1_GeomSubset_1"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [12, 14, 13, 12, 15, 14, 9, 15, 12, 9, 8, 15, 8, 14, 15, 8, 10, 14, 10, 13, 14, 10, 11, 13, 11, 12, 13, 11, 9, 12]
            rel material:binding = </root/_materials/M_SideTableDrawer_216_2_1>
            normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.520907, -0.265, 0.067173), (0.520907, -0.265, 0.226373), (-0.486293, -0.265, 0.226373), (-0.486293, -0.265, 0.067173), (0.503707, -0.27, 0.084373), (0.503707, -0.27, 0.209173), (-0.469093, -0.27, 0.209173), (-0.469093, -0.27, 0.084373), (0.073007, -0.27, 0.156277), (0.073007, -0.27, 0.137269), (-0.038393, -0.27, 0.156277), (-0.038393, -0.27, 0.137269), (0.073007, -0.283799, 0.137269), (-0.038393, -0.283799, 0.137269), (-0.038393, -0.283799, 0.156277), (0.073007, -0.283799, 0.156277), (0.520907, 0.166418, 0.067173), (0.520907, 0.166418, 0.226373), (-0.486293, 0.166418, 0.226373), (-0.486293, 0.166418, 0.067173), (-0.478293, -0.257, 0.226373), (0.512907, -0.257, 0.226373), (0.512907, 0.158418, 0.226373), (-0.478293, 0.158418, 0.226373), (-0.478293, -0.257, 0.077509), (0.512907, -0.257, 0.077509), (0.512907, 0.158418, 0.077509), (-0.478293, 0.158418, 0.077509)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(0.404804, 0.051283), (0.30155, 0.081877), (0.30155, 0.051283), (0.404804, 0.051283), (0.404804, 0.081877), (0.30155, 0.081877), (1.579994, 0.344985), (1.5494, 0.375579), (1.5494, 0.344985), (1.579994, 0.344985), (1.579994, 0.375579), (1.5494, 0.375579), (1.469473, 0.375579), (1.366219, 0.344985), (1.469473, 0.344985), (1.469473, 0.375579), (1.366219, 0.375579), (1.366219, 0.344985), (1.512687, 0.375579), (1.543281, 0.344985), (1.543281, 0.375579), (1.512687, 0.375579), (1.512687, 0.344985), (1.543281, 0.344985), (0.404804, 0.045164), (0.30155, 0.01457), (0.404804, 0.01457), (0.404804, 0.045164), (0.30155, 0.045164), (0.30155, 0.01457)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_SideTableDrawer_216_2_1"
        {
            token outputs:surface.connect = </root/_materials/M_SideTableDrawer_216_2_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.75735295, 0.63906455, 0.14478807)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_SideTableDrawer_216_2_1/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Copper_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_SideTableDrawer_216_2_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

