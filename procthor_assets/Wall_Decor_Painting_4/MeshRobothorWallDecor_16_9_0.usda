#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.0"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "RobothorWallDecor_16_9"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "RobothorWallDecor_16_9" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.405463, -0.085673, -0.505168), (0.413029, -0.06633, 0.251588)]
            int[] faceVertexCounts = [4, 3, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 28, 30, 29, 28, 31, 30, 4, 5, 7, 6, 12, 14, 13, 12, 15, 14, 13, 17, 16, 13, 14, 17, 16, 19, 18, 16, 17, 19, 20, 22, 21, 20, 23, 22, 13, 18, 12, 13, 16, 18, 17, 15, 19, 17, 14, 15, 24, 15, 12, 24, 23, 15, 20, 18, 19, 20, 25, 18, 25, 12, 18, 25, 24, 12, 23, 19, 15, 23, 20, 19, 25, 21, 26, 25, 20, 21, 24, 26, 27, 24, 25, 26, 23, 27, 22, 23, 24, 27, 29, 22, 27, 29, 30, 22, 31, 26, 21, 31, 28, 26, 28, 27, 26, 28, 29, 27, 30, 21, 22, 30, 31, 21, 8, 9, 11, 10]
            rel material:binding = </root/_materials/M_RobothorWallDecor_16_9_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.0000053154035, -1, -0.00036103575), (0.000004609869, -0.99999994, -0.00035834505), (-0.0000052256855, -1, -0.00035861484), (0.0000053154035, -1, -0.00036103575), (-0.0000045202505, -0.99999994, -0.0003623757), (0.000004609869, -0.99999994, -0.00035834505), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, -9.272052e-8, 0), (-1, -0.0000037567831, 0), (-1, 0, 0), (-1, -9.272052e-8, 0), (-0.99999994, -0.000003849503, 0), (-1, -0.0000037567831, 0), (0, 1, 0.0003451052), (0, 1, 0.0003451052), (0, 0.99999994, 0.00034510516), (0, 1, 0.0003451052), (0, 0.99999994, 0.00034510516), (0, 1, 0.0003451052), (1, -0.0000029993887, 0), (1, 8.245304e-7, 0), (1, -0.0000030961555, 0), (1, -0.0000029993887, 0), (0.99999994, 9.212975e-7, 0), (1, 8.245304e-7, 0), (0, 0.0002085793, -1), (0, 0.0002085793, -1), (0, 0.00020857927, -0.99999994), (0, 0.0002085793, -1), (0, 0.00020857927, -0.99999994), (0, 0.0002085793, -1), (0, 0.00036685058, -1), (0, 0.00036685079, -1), (0, 0.00036685055, -1), (0, 0.00036685058, -1), (0, 0.00036685076, -1), (0, 0.00036685079, -1), (0, -0.00036528986, 1), (0, -0.00036528963, 1), (0, -0.00036528986, 1), (0, -0.00036528986, 1), (0, -0.00036528966, 1), (0, -0.00036528963, 1), (0.00007772409, -1, -0.00028332233), (-0.00006714196, -1, -0.00027663683), (0.00006794424, -0.99999994, -0.000273756), (0.00007772409, -1, -0.00028332233), (-0.000083881045, -1, -0.00028687023), (-0.00006714196, -1, -0.00027663683), (0.00007770761, -1, -0.00028305248), (-0.00006715207, -1, -0.00027737647), (0.000067934394, -1, -0.00027344577), (0.00007770761, -1, -0.00028305248), (-0.0000838982, -1, -0.00028751892), (-0.00006715207, -1, -0.00027737647), (-0.0000838982, -1, -0.00028751892), (0.00006794424, -0.99999994, -0.000273756), (-0.00006715207, -1, -0.00027737647), (-0.0000838982, -1, -0.00028751892), (0.00007772409, -1, -0.00028332233), (0.00006794424, -0.99999994, -0.000273756), (-0.000083881045, -1, -0.00028687023), (0.000067934394, -1, -0.00027344577), (-0.00006714196, -1, -0.00027663683), (-0.000083881045, -1, -0.00028687023), (0.00007770761, -1, -0.00028305248), (0.000067934394, -1, -0.00027344577), (-1, -2.4891325e-8, 0), (-1, -0.000003813598, 0), (-1, 0, 0), (-1, -2.4891325e-8, 0), (-1, -0.000003838489, 0), (-1, -0.000003813598, 0), (0, -0.00020551195, 1), (0, -0.00020551195, 1), (0, -0.00020551194, 0.99999994), (0, -0.00020551195, 1), (0, -0.00020551194, 0.99999994), (0, -0.00020551195, 1), (1, -5.097224e-8, 0), (1, -0.000007803521, 0), (1, 0, 0), (1, -5.097224e-8, 0), (1, -0.000007854493, 0), (1, -0.000007803521, 0), (-0.0000052256855, -1, -0.00035861484), (0.000007517762, -0.99999994, -0.0003586004), (-0.000008726426, -0.99999994, -0.00035894822), (-0.0000052256855, -1, -0.00035861484), (0.000004609869, -0.99999994, -0.00035834505), (0.000007517762, -0.99999994, -0.0003586004), (-0.0000045202505, -0.99999994, -0.0003623757), (0.000008686304, -1, -0.00036141553), (-0.0000075579, -0.99999994, -0.00036282119), (-0.0000045202505, -0.99999994, -0.0003623757), (0.0000053154035, -1, -0.00036103575), (0.000008686304, -1, -0.00036141553), (0.0000053154035, -1, -0.00036103575), (-0.000008726426, -0.99999994, -0.00035894822), (0.000008686304, -1, -0.00036141553), (0.0000053154035, -1, -0.00036103575), (-0.0000052256855, -1, -0.00035861484), (-0.000008726426, -0.99999994, -0.00035894822), (0.000004609869, -0.99999994, -0.00035834505), (-0.0000075579, -0.99999994, -0.00036282119), (0.000007517762, -0.99999994, -0.0003586004), (0.000004609869, -0.99999994, -0.00035834505), (-0.0000045202505, -0.99999994, -0.0003623757), (-0.0000075579, -0.99999994, -0.00036282119), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.004038, -0.066834, -0.505168), (0.004498, -0.066834, -0.505168), (0.004038, -0.06633, -0.505168), (0.004498, -0.06633, -0.505168), (0.004038, -0.066834, -0.505168), (0.004498, -0.066834, -0.505168), (0.004038, -0.06633, -0.505168), (0.004498, -0.06633, -0.505168), (0.004038, -0.066834, -0.505168), (0.004498, -0.066834, -0.505168), (0.004038, -0.06633, -0.505168), (0.004498, -0.06633, -0.505168), (-0.405463, -0.085499, -0.252614), (-0.405463, -0.066408, -0.252607), (-0.405463, -0.066582, 0.251588), (-0.405463, -0.085673, 0.251581), (0.413029, -0.066408, -0.252607), (0.413029, -0.066582, 0.251588), (0.413029, -0.085499, -0.252614), (0.413029, -0.085673, 0.251581), (0.401444, -0.08567, 0.237769), (0.401444, -0.080812, 0.23777), (-0.393878, -0.080812, 0.23777), (-0.393878, -0.08567, 0.237769), (-0.393878, -0.085502, -0.238801), (0.401444, -0.085502, -0.238801), (0.401444, -0.080644, -0.2388), (-0.393878, -0.080644, -0.2388), (0.397886, -0.080645, -0.236097), (-0.39032, -0.080645, -0.236097), (-0.39032, -0.080811, 0.235068), (0.397886, -0.080811, 0.235068)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-9.477952, -9.755642), (-9.477952, -9.75594), (-9.477654, -9.75594), (-9.477654, -9.755642), (-9, 0), (-10, 1), (-10, 0), (-9, 0), (-9, 1), (-10, 1), (-19.344551, -9.578681), (-19.344551, -9.57881), (-19.344421, -9.57881), (-19.344421, -9.578681), (-18.950922, 0.548352), (-20.90325, 0.475108), (-18.950947, 0.474432), (-18.950922, 0.548352), (-20.903223, 0.549027), (-20.90325, 0.475108), (-17.8049, -0.357648), (-21.278072, 1.594646), (-21.278072, -0.35765), (-17.8049, -0.357648), (-17.8049, 1.594646), (-21.278072, 1.594646), (-18.966734, 0.530915), (-20.91901, 0.456316), (-18.96671, 0.456995), (-18.966734, 0.530915), (-20.919037, 0.530236), (-20.91901, 0.456316), (-17.807972, 0.513489), (-21.18283, 0.494673), (-17.807972, 0.494675), (-17.807972, 0.513489), (-21.18283, 0.513487), (-21.18283, 0.494673), (-21.240007, 0.13242), (-17.766582, 0.206347), (-21.240007, 0.206345), (-21.240007, 0.13242), (-17.766582, 0.132422), (-17.766582, 0.206347), (-17.766596, 0.186857), (-21.239994, 0.112931), (-17.766596, 0.112932), (-17.766596, 0.186857), (-21.239994, 0.186856), (-21.239994, 0.112931), (-21.190773, -0.583004), (-21.239933, 1.315856), (-21.239933, -0.636484), (-21.190773, -0.583004), (-21.190773, 1.262377), (-21.239933, 1.315856), (-17.815819, 1.262379), (-17.766657, -0.636482), (-17.766657, 1.315857), (-17.815819, 1.262379), (-17.815819, -0.583002), (-17.766657, -0.636482), (-17.815819, -0.583002), (-21.239933, -0.636484), (-17.766657, -0.636482), (-17.815819, -0.583002), (-21.190773, -0.583004), (-21.239933, -0.636484), (-21.190773, 1.262377), (-17.766657, 1.315857), (-21.239933, 1.315856), (-21.190773, 1.262377), (-17.815819, 1.262379), (-17.766657, 1.315857), (-19.011917, 0.489012), (-20.85665, 0.470854), (-19.011925, 0.470202), (-19.011917, 0.489012), (-20.856644, 0.489664), (-20.85665, 0.470854), (-21.182943, 0.504416), (-17.807861, 0.523236), (-21.182943, 0.523234), (-21.182943, 0.504416), (-17.807861, 0.504418), (-17.807861, 0.523236), (-20.856392, 0.460934), (-19.012177, 0.480393), (-20.856398, 0.479739), (-20.856392, 0.460934), (-19.01217, 0.461588), (-19.012177, 0.480393), (-21.167818, -0.240247), (-21.182919, 1.594712), (-21.182919, -0.250713), (-21.167818, -0.240247), (-21.167818, 1.584246), (-21.182919, 1.594712), (-17.822985, 1.584248), (-17.807884, -0.250711), (-17.807884, 1.594713), (-17.822985, 1.584248), (-17.822985, -0.240246), (-17.807884, -0.250711), (-17.822985, -0.240246), (-21.182919, -0.250713), (-17.807884, -0.250711), (-17.822985, -0.240246), (-21.167818, -0.240247), (-21.182919, -0.250713), (-21.167818, 1.584246), (-17.807884, 1.594713), (-21.182919, 1.594712), (-21.167818, 1.584246), (-17.822985, 1.584248), (-17.807884, 1.594713), (-29.683226, -9.316775), (-29.683226, -9.683225), (-29.317196, -9.683225), (-29.317196, -9.316775)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_RobothorWallDecor_16_9_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2]
                rel material:binding = </root/_materials/M_RobothorWallDecor_16_9_0>
            }

            def GeomSubset "M_RobothorWallDecor_16_9_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37]
                rel material:binding = </root/_materials/M_RobothorWallDecor_16_9_1>
            }

            def GeomSubset "M_RobothorWallDecor_16_9_2" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [38]
                rel material:binding = </root/_materials/M_RobothorWallDecor_16_9_2>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorWallDecor_16_9_0"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecor_16_9_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorWallDecor_16_9_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Kielland-Fra_jaeren.jpg@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecor_16_9_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_RobothorWallDecor_16_9_1"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecor_16_9_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorWallDecor_16_9_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorWallDecor_16_9_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/WoodGrains1.jpg@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecor_16_9_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecor_16_9_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }

        def Material "M_RobothorWallDecor_16_9_2"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorWallDecor_16_9_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (1, 0.97794116, 0.97794116)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorWallDecor_16_9_2/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorWallDecor_16_9_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

