#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer1_26_FridgeDrawer1E2_2_GeomSubset_6"
    {
        def Mesh "FridgeDrawer1_26_FridgeDrawer1E2_2_GeomSubset_6"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [24, 25, 27, 26]
            rel material:binding = </root/_materials/M_FridgeDrawer1E2_6>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.006235, 0.309733, -0.940399), (-0.006227, 0.309733, -0.940399), (-0.006235, 0.309741, -0.940399), (-0.006227, 0.309741, -0.940399), (-0.006235, 0.309733, -0.940399), (-0.006227, 0.309733, -0.940399), (-0.006235, 0.309741, -0.940399), (-0.006227, 0.309741, -0.940399), (-0.006235, 0.309733, -0.940399), (-0.006227, 0.309733, -0.940399), (-0.006235, 0.309741, -0.940399), (-0.006227, 0.309741, -0.940399), (-0.006235, 0.309733, -0.940399), (-0.006227, 0.309733, -0.940399), (-0.006235, 0.309741, -0.940399), (-0.006227, 0.309741, -0.940399), (-0.006235, 0.309733, -0.940399), (-0.006227, 0.309733, -0.940399), (-0.006235, 0.309741, -0.940399), (-0.006227, 0.309741, -0.940399), (-0.006235, 0.309733, -0.940399), (-0.006227, 0.309733, -0.940399), (-0.006235, 0.309741, -0.940399), (-0.006227, 0.309741, -0.940399), (-0.006235, 0.309733, -0.940399), (-0.006227, 0.309733, -0.940399), (-0.006235, 0.309741, -0.940399), (-0.006227, 0.309741, -0.940399), (0.331131, 0.127187, -0.436458), (-0.332589, 0.127187, -0.436458), (0.331131, 0.127187, -0.134745), (-0.332589, 0.127187, -0.134745), (0.331131, 0.141723, -0.134745), (-0.332589, 0.141723, -0.134745), (0.331131, 0.141723, -0.436458), (-0.332589, 0.141723, -0.436458), (-0.340622, 0.121242, -0.174242), (-0.340205, 0.118424, -0.174324), (-0.337999, 0.120213, -0.176484), (-0.26932, 0.100178, -0.176484), (-0.26991, 0.098129, -0.17416), (-0.337999, 0.120213, -0.145869), (-0.340087, 0.11839, -0.14811), (-0.340622, 0.121242, -0.14811), (-0.26932, 0.100178, -0.145869), (-0.26991, 0.098129, -0.148193), (-0.333483, 0.124682, -0.148253), (-0.33476, 0.122889, -0.145869), (-0.336669, 0.124073, -0.148253), (-0.267843, 0.106644, -0.145869), (-0.267357, 0.108718, -0.148193), (-0.33476, 0.122889, -0.176484), (-0.333505, 0.124687, -0.17413), (-0.336651, 0.124086, -0.17413), (-0.267357, 0.108718, -0.17416), (-0.267843, 0.106644, -0.176484), (-0.006231, 0.064704, -0.148193), (-0.006231, 0.066833, -0.145869), (-0.127083, 0.071469, -0.145869), (-0.127364, 0.069359, -0.148193), (-0.006231, 0.082496, -0.145869), (-0.006231, 0.084622, -0.148193), (-0.127364, 0.087819, -0.148193), (-0.127557, 0.085702, -0.145869), (-0.006231, 0.084622, -0.17416), (-0.006231, 0.082496, -0.176484), (-0.127557, 0.085702, -0.176484), (-0.127364, 0.087819, -0.17416), (-0.006231, 0.066833, -0.176484), (-0.006231, 0.064704, -0.17416), (-0.127364, 0.069359, -0.17416), (-0.127083, 0.071469, -0.176484), (-0.197533, 0.083676, -0.145869), (-0.197999, 0.081598, -0.148193), (-0.197999, 0.096245, -0.148193), (-0.198347, 0.094147, -0.145869), (-0.198347, 0.094147, -0.176484), (-0.197999, 0.096245, -0.17416), (-0.197999, 0.081598, -0.17416), (-0.197533, 0.083676, -0.176484), (0.336541, 0.120213, -0.176484), (0.338629, 0.11839, -0.174242), (0.339164, 0.121242, -0.174242), (0.267862, 0.100178, -0.176484), (0.268452, 0.098129, -0.17416), (0.339164, 0.121242, -0.14811), (0.338747, 0.118424, -0.148028), (0.336541, 0.120213, -0.145869), (0.267862, 0.100178, -0.145869), (0.268452, 0.098129, -0.148193), (0.335211, 0.124073, -0.148253), (0.333302, 0.122889, -0.145869), (0.332026, 0.124682, -0.148253), (0.266384, 0.106644, -0.145869), (0.265899, 0.108718, -0.148193), (0.335193, 0.124086, -0.17413), (0.332026, 0.124682, -0.1741), (0.333302, 0.122889, -0.176484), (0.265899, 0.108718, -0.17416), (0.266384, 0.106644, -0.176484), (0.125905, 0.069359, -0.148193), (0.125626, 0.071469, -0.145869), (0.126098, 0.085702, -0.145869), (0.125905, 0.087819, -0.148193), (0.125905, 0.087819, -0.17416), (0.126098, 0.085702, -0.176484), (0.125626, 0.071469, -0.176484), (0.125905, 0.069359, -0.17416), (0.196541, 0.081598, -0.148193), (0.196075, 0.083676, -0.145869), (0.196889, 0.094147, -0.145869), (0.196541, 0.096245, -0.148193), (0.196541, 0.096245, -0.17416), (0.196889, 0.094147, -0.176484), (0.196075, 0.083676, -0.176484), (0.196541, 0.081598, -0.17416), (0.346788, 0.119844, -0.4477), (0.351281, 0.123866, -0.453179), (0.347124, 0.123784, -0.45758), (0.342792, 0.119844, -0.452921), (-0.34425, 0.119844, -0.452921), (-0.348495, 0.123867, -0.45758), (-0.352738, 0.123784, -0.453269), (-0.348246, 0.119844, -0.4477), (0.341355, 0.314735, -0.127221), (0.347037, 0.318994, -0.131622), (0.351281, 0.315053, -0.131533), (0.346789, 0.311244, -0.127221), (-0.348247, 0.311244, -0.127221), (-0.352738, 0.31497, -0.131623), (-0.348583, 0.318994, -0.131531), (-0.342814, 0.314735, -0.127221), (0.351281, 0.314888, -0.453088), (0.34695, 0.318994, -0.453088), (0.34695, 0.314888, -0.45758), (-0.348408, 0.314888, -0.45758), (-0.348408, 0.318994, -0.453088), (-0.352738, 0.314888, -0.453088), (0.34695, 0.123949, -0.127221), (0.351281, 0.123949, -0.131713), (0.34695, 0.119844, -0.131713), (-0.348408, 0.119844, -0.131713), (-0.352738, 0.123949, -0.131713), (-0.348408, 0.123949, -0.127221), (0.330661, 0.119844, -0.439269), (0.326545, 0.123904, -0.434673), (0.330828, 0.123876, -0.430262), (0.335225, 0.119844, -0.434852), (-0.336683, 0.119844, -0.434852), (-0.332286, 0.123913, -0.430222), (-0.328051, 0.123859, -0.434673), (-0.332119, 0.119844, -0.439269), (-0.332286, 0.123949, -0.131713), (-0.336617, 0.119844, -0.131713), (-0.336617, 0.123949, -0.127221), (0.335159, 0.123949, -0.127221), (0.335159, 0.119844, -0.131713), (0.330828, 0.123949, -0.131713), (0.330828, 0.297898, -0.131661), (0.326568, 0.301956, -0.131639), (0.331118, 0.306066, -0.127221), (0.335236, 0.301694, -0.127221), (-0.336694, 0.301694, -0.127221), (-0.332579, 0.306113, -0.127221), (-0.327991, 0.301956, -0.131677), (-0.332286, 0.297898, -0.131661), (-0.332286, 0.29785, -0.430181), (-0.327955, 0.301956, -0.430181), (-0.327955, 0.29785, -0.434673), (0.326497, 0.29785, -0.434673), (0.326497, 0.301956, -0.430181), (0.330828, 0.29785, -0.430181)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-5.253075, -117.71076), (-3.54152, -117.71076), (-3.54152, -115.99921), (-5.253075, -115.99921)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer1E2_6"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1E2_6/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer1E2_6/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1E2_6/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge_Readout_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1E2_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1E2_6/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

