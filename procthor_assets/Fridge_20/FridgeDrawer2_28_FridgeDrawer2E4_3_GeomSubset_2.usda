#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer2_28_FridgeDrawer2E4_3_GeomSubset_2"
    {
        def Mesh "FridgeDrawer2_28_FridgeDrawer2E4_3_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer2E4_2>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.006927, 0.096495, -0.819268), (-0.006918, 0.096495, -0.819268), (-0.006927, 0.096502, -0.819268), (-0.006918, 0.096502, -0.819268), (-0.006927, 0.096495, -0.819268), (-0.006918, 0.096495, -0.819268), (-0.006927, 0.096502, -0.819268), (-0.006918, 0.096502, -0.819268), (-0.006927, 0.096495, -0.819268), (-0.006918, 0.096495, -0.819268), (-0.006927, 0.096502, -0.819268), (-0.006918, 0.096502, -0.819268), (-0.006927, 0.096495, -0.819268), (-0.006918, 0.096495, -0.819268), (-0.006927, 0.096502, -0.819268), (-0.006918, 0.096502, -0.819268), (-0.006927, 0.096495, -0.819268), (-0.006918, 0.096495, -0.819268), (-0.006927, 0.096502, -0.819268), (-0.006918, 0.096502, -0.819268), (-0.006927, 0.096495, -0.819268), (-0.006918, 0.096495, -0.819268), (-0.006927, 0.096502, -0.819268), (-0.006918, 0.096502, -0.819268), (-0.006927, 0.096495, -0.819268), (-0.006918, 0.096495, -0.819268), (-0.006927, 0.096502, -0.819268), (-0.006918, 0.096502, -0.819268), (-0.384346, -0.090098, -0.682446), (-0.389304, -0.086145, -0.687213), (-0.384717, -0.086226, -0.691042), (-0.379936, -0.090098, -0.686989), (0.378235, -0.090096, -0.686989), (0.38292, -0.086142, -0.691042), (0.387603, -0.086224, -0.687292), (0.382646, -0.090096, -0.682446), (-0.378351, 0.101408, -0.446129), (-0.384622, 0.105593, -0.449958), (-0.389304, 0.101721, -0.44988), (-0.384348, 0.097978, -0.446129), (0.382646, 0.09798, -0.446129), (0.387603, 0.101642, -0.449958), (0.383016, 0.105595, -0.449879), (0.37665, 0.10141, -0.446129), (-0.389304, 0.101559, -0.687134), (-0.384525, 0.105593, -0.687134), (-0.384525, 0.101559, -0.691042), (0.382824, 0.101561, -0.691042), (0.382824, 0.105595, -0.687134), (0.387603, 0.101561, -0.687134), (-0.384525, -0.086064, -0.446129), (-0.389304, -0.086064, -0.450036), (-0.384525, -0.090098, -0.450036), (0.382825, -0.090096, -0.450036), (0.387603, -0.086061, -0.450036), (0.382825, -0.086061, -0.446129), (-0.36655, -0.090098, -0.675112), (-0.362008, -0.086108, -0.671114), (-0.366734, -0.086136, -0.667276), (-0.371586, -0.090098, -0.671269), (0.369885, -0.090096, -0.671269), (0.365033, -0.086097, -0.667241), (0.36036, -0.08615, -0.671114), (0.364849, -0.090096, -0.675112), (0.365033, -0.086061, -0.450036), (0.369812, -0.090096, -0.450036), (0.369812, -0.086061, -0.446129), (-0.371513, -0.086063, -0.446129), (-0.371513, -0.090098, -0.450036), (-0.366734, -0.086063, -0.450036), (-0.366734, 0.084864, -0.449991), (-0.362033, 0.088852, -0.449973), (-0.367054, 0.09289, -0.446129), (-0.371599, 0.088594, -0.446129), (0.369897, 0.088597, -0.446129), (0.365356, 0.092938, -0.446129), (0.360292, 0.088854, -0.450005), (0.365032, 0.084866, -0.449991), (0.365032, 0.084819, -0.667206), (0.360254, 0.088854, -0.667206), (0.360254, 0.084819, -0.671114), (-0.361955, 0.084817, -0.671114), (-0.361955, 0.088852, -0.667206), (-0.366734, 0.084817, -0.667206), (-0.367068, -0.082882, -0.672667), (0.365367, -0.08288, -0.672667), (-0.367068, -0.082882, -0.452674), (0.365367, -0.08288, -0.452674), (-0.367068, -0.068598, -0.452674), (0.365367, -0.068596, -0.452674), (-0.367068, -0.068598, -0.672667), (0.365367, -0.068596, -0.672667), (0.374232, -0.088721, -0.487035), (0.373773, -0.091491, -0.487107), (0.371337, -0.089733, -0.488985), (0.295548, -0.10942, -0.488985), (0.2962, -0.111434, -0.486964), (0.371337, -0.089733, -0.462352), (0.373642, -0.091524, -0.464302), (0.374232, -0.088721, -0.464302), (0.295548, -0.10942, -0.462352), (0.2962, -0.111434, -0.464373), (0.366355, -0.085341, -0.464425), (0.367763, -0.087104, -0.462352), (0.36987, -0.085939, -0.464425), (0.293918, -0.103066, -0.462352), (0.293382, -0.101028, -0.464373), (0.367763, -0.087104, -0.488985), (0.366379, -0.085336, -0.486938), (0.36985, -0.085927, -0.486938), (0.293382, -0.101028, -0.486964), (0.293918, -0.103066, -0.488985), (-0.006922, -0.144278, -0.464373), (-0.006922, -0.142187, -0.462352), (0.138586, -0.13763, -0.462352), (0.138895, -0.139704, -0.464373), (-0.006922, -0.126796, -0.462352), (-0.006922, -0.124707, -0.464373), (0.138895, -0.121565, -0.464373), (0.139108, -0.123645, -0.462352), (-0.006922, -0.124707, -0.486964), (-0.006922, -0.126796, -0.488985), (0.139108, -0.123645, -0.488985), (0.138895, -0.121565, -0.486964), (-0.006922, -0.142187, -0.488985), (-0.006922, -0.144278, -0.486964), (0.138895, -0.139704, -0.486964), (0.138586, -0.13763, -0.488985), (0.216329, -0.125636, -0.462352), (0.216843, -0.127678, -0.464373), (0.216843, -0.113285, -0.464373), (0.217228, -0.115347, -0.462352), (0.217228, -0.115347, -0.488985), (0.216843, -0.113285, -0.486964), (0.216843, -0.127678, -0.486964), (0.216329, -0.125636, -0.488985), (-0.373038, -0.089735, -0.488985), (-0.375343, -0.091527, -0.487035), (-0.375933, -0.088724, -0.487035), (-0.297248, -0.109422, -0.488985), (-0.2979, -0.111436, -0.486964), (-0.375933, -0.088724, -0.464302), (-0.375473, -0.091493, -0.46423), (-0.373038, -0.089735, -0.462352), (-0.297248, -0.109422, -0.462352), (-0.2979, -0.111436, -0.464373), (-0.371571, -0.085942, -0.464425), (-0.369464, -0.087106, -0.462352), (-0.368055, -0.085344, -0.464425), (-0.295618, -0.103068, -0.462352), (-0.295082, -0.10103, -0.464373), (-0.371551, -0.085929, -0.486938), (-0.368055, -0.085344, -0.486912), (-0.369464, -0.087106, -0.488985), (-0.295082, -0.10103, -0.486964), (-0.295618, -0.103068, -0.488985), (-0.140595, -0.139705, -0.464373), (-0.140286, -0.137631, -0.462352), (-0.140809, -0.123646, -0.462352), (-0.140595, -0.121565, -0.464373), (-0.140595, -0.121565, -0.486964), (-0.140809, -0.123646, -0.488985), (-0.140286, -0.137631, -0.488985), (-0.140595, -0.139705, -0.486964), (-0.218543, -0.127679, -0.464373), (-0.218029, -0.125637, -0.462352), (-0.218928, -0.115348, -0.462352), (-0.218543, -0.113286, -0.464373), (-0.218543, -0.113286, -0.486964), (-0.218928, -0.115348, -0.488985), (-0.218029, -0.125637, -0.488985), (-0.218543, -0.127679, -0.486964)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-118.539665, -109.61047), (-118.539665, -113.51364), (-115.17295, -113.51364), (-115.17295, -109.61047)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer2E4_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2E4_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2E4_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2E4_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2E4_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2E4_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

