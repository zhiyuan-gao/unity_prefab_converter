#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer2_20_FridgeDrawer2D2_2_GeomSubset_2"
    {
        def Mesh "FridgeDrawer2_20_FridgeDrawer2D2_2_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer2D2_2>
            normal3f[] normals = [(0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.010542, 0.035822, -0.778103), (0.010533, 0.035822, -0.778103), (0.010542, 0.03583, -0.778103), (0.010533, 0.03583, -0.778103), (0.010542, 0.035822, -0.778103), (0.010533, 0.035822, -0.778103), (0.010542, 0.03583, -0.778103), (0.010533, 0.03583, -0.778103), (0.010542, 0.035822, -0.778103), (0.010533, 0.035822, -0.778103), (0.010542, 0.03583, -0.778103), (0.010533, 0.03583, -0.778103), (0.010542, 0.035822, -0.778103), (0.010533, 0.035822, -0.778103), (0.010542, 0.03583, -0.778103), (0.010533, 0.03583, -0.778103), (0.010542, 0.035822, -0.778103), (0.010533, 0.035822, -0.778103), (0.010542, 0.03583, -0.778103), (0.010533, 0.03583, -0.778103), (0.010542, 0.035822, -0.778103), (0.010533, 0.035822, -0.778103), (0.010542, 0.03583, -0.778103), (0.010533, 0.03583, -0.778103), (0.010542, 0.035822, -0.778103), (0.010533, 0.035822, -0.778103), (0.010542, 0.03583, -0.778103), (0.010533, 0.03583, -0.778103), (0.022663, 0.194876, -0.427369), (-0.469414, 0.194876, -0.427369), (0.022663, -0.225531, -0.427369), (-0.469414, -0.225531, -0.427369), (-0.176528, 0.194876, -0.427369), (-0.106197, 0.194876, -0.427369), (-0.340553, 0.194876, -0.427369), (-0.270223, 0.194876, -0.427369), (-0.176528, -0.245046, -0.427369), (-0.106473, -0.240895, -0.427369), (-0.340278, -0.240895, -0.427369), (-0.270223, -0.245046, -0.427369), (-0.106197, 0.194876, -0.623633), (0.022663, 0.194876, -0.623633), (-0.340553, 0.194876, -0.623633), (-0.469414, 0.194876, -0.623633), (-0.270223, 0.194876, -0.623633), (-0.176528, 0.194876, -0.623633), (0.014049, 0.186735, -0.427369), (-0.4608, 0.186735, -0.427369), (0.014049, -0.218351, -0.427369), (-0.4608, -0.218351, -0.427369), (-0.176528, 0.186735, -0.427369), (-0.106197, 0.186735, -0.427369), (-0.340553, 0.186735, -0.427369), (-0.270223, 0.186735, -0.427369), (-0.176797, -0.236906, -0.427369), (-0.107281, -0.232787, -0.427369), (-0.33947, -0.232787, -0.427369), (-0.269953, -0.236906, -0.427369), (0.014049, 0.186735, -0.615938), (-0.4608, 0.186735, -0.615938), (-0.176528, 0.186735, -0.615938), (-0.106197, 0.186735, -0.615938), (-0.340553, 0.186735, -0.615938), (-0.270223, 0.186735, -0.615938), (0.022663, 0.194876, -0.434617), (-0.106197, 0.194876, -0.434617), (0.022663, -0.225531, -0.434617), (-0.106473, -0.240895, -0.434617), (-0.469414, -0.225531, -0.434617), (-0.340278, -0.240895, -0.434617), (-0.469414, 0.194876, -0.434617), (-0.340553, 0.194876, -0.434617), (-0.270223, -0.245046, -0.434617), (-0.176528, -0.245046, -0.434617), (-0.176528, 0.194876, -0.434617), (-0.270223, 0.194876, -0.434617), (-0.269953, -0.236906, -0.434617), (-0.33947, -0.232787, -0.434617), (-0.4608, -0.218351, -0.434617), (-0.4608, 0.186735, -0.434617), (-0.340553, 0.186735, -0.434617), (-0.270223, 0.186735, -0.434617), (-0.176528, 0.186735, -0.434617), (-0.106197, 0.186735, -0.434617), (0.014049, 0.186735, -0.434617), (0.014049, -0.218351, -0.434617), (-0.107281, -0.232787, -0.434617), (-0.176797, -0.236906, -0.434617), (0.023843, 0.195991, -0.428852), (-0.470594, 0.195991, -0.428852), (0.023843, -0.226515, -0.428852), (-0.470594, -0.226515, -0.428852), (-0.176528, 0.195991, -0.428852), (-0.106197, 0.195991, -0.428852), (-0.340553, 0.195991, -0.428852), (-0.270223, 0.195991, -0.428852), (-0.176491, -0.246161, -0.428852), (-0.106362, -0.242006, -0.428852), (-0.340389, -0.242006, -0.428852), (-0.27026, -0.246161, -0.428852), (0.023843, 0.195991, -0.433134), (-0.106197, 0.195991, -0.433134), (0.023843, -0.226515, -0.433134), (-0.106362, -0.242006, -0.433134), (-0.470594, -0.226515, -0.433134), (-0.340389, -0.242006, -0.433134), (-0.470594, 0.195991, -0.433134), (-0.340553, 0.195991, -0.433134), (-0.27026, -0.246161, -0.433134), (-0.176491, -0.246161, -0.433134), (-0.176528, 0.195991, -0.433134), (-0.270223, 0.195991, -0.433134), (-0.106473, -0.240895, -0.592966), (-0.106453, -0.210229, -0.623633), (0.022663, -0.225531, -0.592966), (0.022663, -0.194865, -0.623633), (-0.340297, -0.210229, -0.623633), (-0.340278, -0.240895, -0.592966), (-0.469414, -0.194865, -0.623633), (-0.469414, -0.225531, -0.592966), (-0.176528, -0.21438, -0.623633), (-0.176528, -0.245046, -0.592966), (-0.270223, -0.245046, -0.592966), (-0.270223, -0.21438, -0.623633), (0.014049, -0.187685, -0.615938), (0.014049, -0.218351, -0.585272), (-0.4608, -0.218351, -0.585272), (-0.4608, -0.187685, -0.615938), (-0.176778, -0.206239, -0.615938), (-0.176797, -0.236906, -0.585272), (-0.107281, -0.232787, -0.585272), (-0.107202, -0.20212, -0.615938), (-0.339549, -0.20212, -0.615938), (-0.33947, -0.232787, -0.585272), (-0.269973, -0.206239, -0.615938), (-0.269953, -0.236906, -0.585272), (-0.34029, -0.221964, -0.621299), (-0.270223, -0.226115, -0.621299), (-0.340284, -0.231913, -0.614651), (-0.270223, -0.236064, -0.614651), (-0.34028, -0.238561, -0.604702), (-0.270223, -0.242712, -0.604702), (-0.176528, -0.226115, -0.621299), (-0.106461, -0.221964, -0.621299), (-0.176528, -0.236064, -0.614651), (-0.106467, -0.231913, -0.614651), (-0.176528, -0.242712, -0.604702), (-0.106471, -0.238561, -0.604702), (-0.469414, -0.2066, -0.621299), (-0.469414, -0.216549, -0.614651), (-0.469414, -0.223197, -0.604702), (0.022663, -0.2066, -0.621299), (0.022663, -0.216549, -0.614651), (0.022663, -0.223197, -0.604702), (0.014049, -0.199421, -0.613604), (-0.107232, -0.213856, -0.613604), (0.014049, -0.209369, -0.606956), (-0.107258, -0.223805, -0.606956), (0.014049, -0.216017, -0.597008), (-0.107275, -0.230452, -0.597008), (-0.339519, -0.213856, -0.613604), (-0.4608, -0.199421, -0.613604), (-0.339493, -0.223805, -0.606956), (-0.4608, -0.209369, -0.606956), (-0.339476, -0.230452, -0.597008), (-0.4608, -0.216017, -0.597008), (-0.176785, -0.217975, -0.613604), (-0.269965, -0.217975, -0.613604), (-0.176792, -0.227924, -0.606956), (-0.269959, -0.227924, -0.606956), (-0.176796, -0.234571, -0.597008), (-0.269955, -0.234571, -0.597008)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-118.53901, -109.61047), (-118.53901, -113.51364), (-114.839676, -113.51364), (-114.839676, -109.61047)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer2D2_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2D2_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2D2_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2D2_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2D2_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2D2_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

