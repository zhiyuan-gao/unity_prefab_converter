#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshRobothorDiningTableMella_0_GeomSubset_1"
    {
        def Mesh "MeshRobothorDiningTableMella_0_GeomSubset_1"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [24, 25, 26, 27, 28, 24, 27, 29, 30, 28, 29, 31, 25, 30, 31, 26, 29, 27, 26, 31, 25, 24, 28, 30, 32, 33, 34, 35, 36, 32, 35, 37, 38, 36, 37, 39, 33, 38, 39, 34, 37, 35, 34, 39, 33, 32, 36, 38, 40, 41, 42, 43, 44, 45, 41, 40, 44, 46, 47, 45, 43, 42, 47, 46, 48, 49, 50, 51, 52, 48, 51, 53, 54, 52, 53, 55, 49, 54, 55, 50, 49, 48, 56, 57, 52, 58, 56, 48, 54, 59, 58, 52, 49, 57, 59, 54, 44, 40, 43, 46, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 65, 64, 68, 70, 71, 69, 67, 66, 71, 70, 72, 73, 74, 75, 76, 72, 75, 77, 78, 76, 77, 79, 73, 78, 79, 74, 73, 72, 80, 81, 76, 82, 80, 72, 78, 83, 82, 76, 73, 81, 83, 78, 68, 64, 67, 70, 84, 85, 86, 87, 41, 51, 50, 42, 53, 51, 41, 45, 55, 53, 45, 47, 50, 55, 47, 42, 61, 60, 57, 56, 62, 61, 56, 58, 59, 63, 62, 58, 60, 63, 59, 57, 65, 75, 74, 66, 77, 75, 65, 69, 79, 77, 69, 71, 74, 79, 71, 66, 85, 84, 81, 80, 86, 85, 80, 82, 83, 87, 86, 82, 84, 87, 83, 81]
            rel material:binding = </root/_materials/M_RobothorDiningTableMella_1>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0.000002036603, 0), (-1, 0.000002036603, 0), (-1, 0.0000021602793, 0), (-1, 0.0000021619057, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (1, -2.7864962e-7, 5.159099e-13), (1, -2.7864775e-7, 5.159091e-13), (1, -7.319086e-7, 5.159149e-13), (1, -7.318783e-7, 5.1589353e-13), (0, -0.70710677, 0.70710677), (0, -0.7071065, 0.7071071), (0, 0.70710707, 0.7071065), (0, 0.70710677, 0.70710677), (-1, -0.0000010554422, 0), (-1, -0.0000010554405, 0), (-1, 0.0000011428261, 0), (-1, 0.000001142779, 0), (0, 0.707107, -0.70710665), (0, 0.7071073, -0.70710623), (0, -0.70710623, -0.7071073), (0, -0.70710665, -0.707107), (1, -2.7864775e-7, 5.159091e-13), (1, -2.7864962e-7, 5.159099e-13), (1, -2.4070584e-7, 0), (1, -2.5579087e-7, 0), (0, -0.70710677, 0.70710677), (0, -1, 0), (0, -1, 0), (0, -0.7071065, 0.7071071), (-1, -0.0000010554422, 0), (-1, -0.0000025062668, 0), (-1, -0.000002501135, 0), (-1, -0.0000010554405, 0), (0, 0.707107, -0.70710665), (0, 1, 0), (0, 1, 0), (0, 0.7071073, -0.70710623), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, -5.431225e-7, 0), (-1, -5.431225e-7, 0), (-1, -7.7817583e-7, 0), (-1, -7.8126675e-7, 0), (0, -0.99999994, 0), (0, -1, 0), (0, -1, 0), (0, -0.99999994, 0), (1, -1.424972e-7, 0), (1, -1.4250311e-7, 0), (1, 0, 0), (1, 0, 0), (0, -0.70710677, 0.70710677), (0, -0.70710677, 0.70710677), (0, 0.70710677, 0.70710677), (0, 0.70710677, 0.70710677), (-1, 0, 0), (-1, 0, 0), (-1, -5.0816044e-7, 0), (-1, -5.0815976e-7, 0), (0, 0.7071073, -0.70710623), (0, 0.7071073, -0.70710623), (0, -0.70710623, -0.7071073), (0, -0.70710623, -0.7071073), (1, -1.4250311e-7, 0), (1, -1.424972e-7, 0), (1, -6.6052496e-7, 0), (1, -6.6546295e-7, 0), (0, -0.70710677, 0.70710677), (0, -1, 0), (0, -1, 0), (0, -0.70710677, 0.70710677), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0.7071073, -0.70710623), (0, 1, 0), (0, 1, 0), (0, 0.7071073, -0.70710623), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (0, 0, -0.99999994), (1, 0, 0), (1, -7.318783e-7, 5.1589353e-13), (1, -7.319086e-7, 5.159149e-13), (1, 0, 0), (0, 0.70710677, 0.70710677), (0, 0.70710707, 0.7071065), (0, 1, 0), (0, 1, 0), (-1, 0.000001142779, 0), (-1, 0.0000011428261, 0), (-1, 0.0000021619057, 0), (-1, 0.0000021602793, 0), (0, -0.70710665, -0.707107), (0, -0.70710623, -0.7071073), (0, -1, 0), (0, -1, 0), (1, -0.0000014030013, 0), (1, -0.0000014030013, 0), (1, -2.5579087e-7, 0), (1, -2.4070584e-7, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, -0.0000025062668, 0), (-1, -0.000002896519, 0), (-1, -0.000002896519, 0), (-1, -0.000002501135, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0.70710677, 0.70710677), (0, 0.70710677, 0.70710677), (0, 1, 0), (0, 1, 0), (-1, -5.0815976e-7, 0), (-1, -5.0816044e-7, 0), (-1, -7.8126675e-7, 0), (-1, -7.7817583e-7, 0), (0, -0.70710623, -0.7071073), (0, -0.70710623, -0.7071073), (0, -1, 0), (0, -1, 0), (1, -0.0000010409848, 0), (1, -0.0000010409848, 0), (1, -6.6546295e-7, 0), (1, -6.6052496e-7, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0.99999994, 0), (0, 0.99999994, 0), (0, 1, 0), (0, 1, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.562988, -0.363714, 0.296052), (-0.565072, -0.363714, 0.293967), (-0.562988, -0.365798, 0.293967), (-0.562988, 0.362002, 0.293967), (-0.565072, 0.359917, 0.293967), (-0.562988, 0.359917, 0.296052), (-0.562988, 0.359917, 0.282153), (-0.565072, 0.359917, 0.284238), (-0.562988, 0.362002, 0.284238), (-0.562988, -0.365798, 0.284238), (-0.565072, -0.363714, 0.284238), (-0.562988, -0.363714, 0.282153), (0.568407, -0.363714, 0.296052), (0.568407, -0.365799, 0.293967), (0.570491, -0.363714, 0.293967), (0.570491, -0.363714, 0.284238), (0.568407, -0.365799, 0.284238), (0.568407, -0.363714, 0.282153), (0.568407, 0.359917, 0.296052), (0.570491, 0.359917, 0.293967), (0.568407, 0.362001, 0.293967), (0.568407, 0.362001, 0.284238), (0.570491, 0.359917, 0.284238), (0.568407, 0.359917, 0.282153), (0.549093, -0.361473, 0.272237), (0.549093, -0.340544, 0.272237), (-0.545453, -0.340544, 0.272237), (-0.545453, -0.361473, 0.272237), (0.549093, -0.361473, 0.256525), (-0.545453, -0.361473, 0.256525), (0.549093, -0.340544, 0.256525), (-0.545453, -0.340544, 0.256525), (0.549093, 0.336695, 0.272237), (0.549093, 0.357624, 0.272237), (-0.545453, 0.357624, 0.272237), (-0.545453, 0.336695, 0.272237), (0.549093, 0.336695, 0.256525), (-0.545453, 0.336695, 0.256525), (0.549093, 0.357624, 0.256525), (-0.545453, 0.357624, 0.256525), (0.565073, 0.358137, -0.410165), (0.565073, 0.358137, -0.402376), (0.565073, 0.337208, -0.402591), (0.565073, 0.337208, -0.410165), (0.54936, 0.358137, -0.410165), (0.54936, 0.358137, -0.402376), (0.54936, 0.337208, -0.410165), (0.54936, 0.337208, -0.402591), (0.565072, -0.362002, 0.282568), (0.565072, -0.341073, 0.261639), (0.565073, 0.337208, 0.26164), (0.565073, 0.358137, 0.282568), (0.54936, -0.362002, 0.282568), (0.54936, 0.358137, 0.282568), (0.54936, -0.341073, 0.261639), (0.54936, 0.337208, 0.26164), (0.565072, -0.362002, -0.402376), (0.565072, -0.341073, -0.402591), (0.54936, -0.362002, -0.402376), (0.54936, -0.341073, -0.402591), (0.565072, -0.341073, -0.410165), (0.565072, -0.362002, -0.410165), (0.54936, -0.362002, -0.410165), (0.54936, -0.341073, -0.410165), (-0.54507, 0.358137, -0.410165), (-0.54507, 0.358137, -0.402376), (-0.54507, 0.337209, -0.402591), (-0.54507, 0.337209, -0.410165), (-0.560782, 0.358137, -0.410165), (-0.560782, 0.358137, -0.402376), (-0.560782, 0.337209, -0.410165), (-0.560782, 0.337209, -0.402591), (-0.54507, -0.362001, 0.282568), (-0.54507, -0.341073, 0.261639), (-0.54507, 0.337209, 0.26164), (-0.54507, 0.358137, 0.282568), (-0.560782, -0.362001, 0.282568), (-0.560782, 0.358137, 0.282568), (-0.560782, -0.341073, 0.261639), (-0.560782, 0.337209, 0.26164), (-0.54507, -0.362001, -0.402376), (-0.54507, -0.341073, -0.402591), (-0.560782, -0.362001, -0.402376), (-0.560782, -0.341073, -0.402591), (-0.54507, -0.341073, -0.410165), (-0.54507, -0.362001, -0.410165), (-0.560782, -0.362001, -0.410165), (-0.560782, -0.341073, -0.410165)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-19.420967, -0.856314), (-19.38009, -0.856314), (-19.38009, 1.281488), (-19.420967, 1.281488), (-19.40227, -0.856317), (-19.371582, -0.856317), (-19.371582, 1.281491), (-19.40227, 1.281491), (-19.39358, -0.856307), (-19.352703, -0.856307), (-19.352703, 1.281481), (-19.39358, 1.281481), (-19.374882, -0.856323), (-19.344194, -0.856323), (-19.344194, 1.281497), (-19.374882, 1.281497), (-19.595812, 0.704476), (-19.565115, 0.704476), (-19.565115, 0.745363), (-19.595812, 0.745363), (-19.552347, 0.704489), (-19.552347, 0.74535), (-19.58302, 0.74535), (-19.58302, 0.704489), (-19.366192, -0.856316), (-19.325315, -0.856316), (-19.325315, 1.281489), (-19.366192, 1.281489), (-19.347496, -0.856303), (-19.316807, -0.856303), (-19.316807, 1.281477), (-19.347496, 1.281477), (-19.338804, -0.856313), (-19.297928, -0.856313), (-19.297928, 1.281487), (-19.338804, 1.281487), (-19.320108, -0.856322), (-19.28942, -0.856322), (-19.28942, 1.281495), (-19.320108, 1.281495), (-19.570248, 0.704482), (-19.539558, 0.704482), (-19.539558, 0.745356), (-19.570248, 0.745356), (-19.526773, 0.704476), (-19.526773, 0.745363), (-19.55747, 0.745363), (-19.55747, 0.704476), (-19.874817, -0.13778), (-19.859606, -0.13778), (-19.860027, -0.096902), (-19.874817, -0.096902), (-19.723618, 1.530676), (-19.723618, 1.515465), (-19.692928, 1.515465), (-19.692928, 1.530676), (-20.14714, 1.281861), (-20.14714, 1.240983), (-20.132347, 1.240983), (-20.131926, 1.281861), (-19.616243, 0.194092), (-19.616243, 0.208885), (-19.646933, 0.208885), (-19.646933, 0.194092), (-18.52183, 1.268737), (-18.562706, 1.227862), (-18.562704, -0.096902), (-18.52183, -0.13778), (-19.628038, -0.124661), (-19.59735, -0.124661), (-19.59735, 1.281854), (-19.628038, 1.281854), (-18.835014, -0.083793), (-18.794138, -0.124669), (-18.794138, 1.281861), (-18.835012, 1.240983), (-19.641804, 1.51378), (-19.672493, 1.51378), (-19.672493, 0.189013), (-19.641804, 0.189013), (-18.562706, 1.227862), (-18.52183, 1.268737), (-19.859606, 1.268737), (-19.860027, 1.227862), (-19.710836, 1.530673), (-19.710836, 0.192896), (-19.680147, 0.192896), (-19.680147, 1.530673), (-18.835014, -0.083793), (-20.132347, -0.083793), (-20.131926, -0.124669), (-18.794138, -0.124669), (-19.603462, 0.194086), (-19.603462, 1.491423), (-19.634151, 1.491423), (-19.634151, 0.194086), (-19.544685, 0.704481), (-19.513996, 0.704481), (-19.513996, 0.745358), (-19.544685, 0.745358), (-19.501215, 0.704482), (-19.501215, 0.745357), (-19.531904, 0.745357), (-19.531904, 0.704482), (-20.43124, -0.124657), (-20.416027, -0.124657), (-20.416447, -0.083779), (-20.43124, -0.083779), (-19.698055, 1.530676), (-19.698055, 1.515464), (-19.667366, 1.515464), (-19.667366, 1.530676), (-20.541344, 1.562707), (-20.541344, 1.52183), (-20.52655, 1.52183), (-20.526129, 1.562707), (-19.590681, 0.194086), (-19.590681, 0.208879), (-19.62137, 0.208879), (-19.62137, 0.194086), (-19.07826, 1.281849), (-19.119139, 1.240974), (-19.119135, -0.083779), (-19.07826, -0.124657), (-19.736397, 0.156188), (-19.705708, 0.156188), (-19.705708, 1.562713), (-19.736397, 1.562713), (-19.229233, 0.197072), (-19.188356, 0.156195), (-19.188356, 1.562707), (-19.22923, 1.52183), (-19.629023, 1.513783), (-19.659712, 1.513783), (-19.659712, 0.189011), (-19.629023, 0.189011), (-19.119139, 1.240974), (-19.07826, 1.281849), (-20.416027, 1.281849), (-20.416447, 1.240974), (-19.685274, 1.53067), (-19.685274, 0.192898), (-19.654585, 0.192898), (-19.654585, 1.53067), (-19.229233, 0.197072), (-20.52655, 0.19707), (-20.526129, 0.156195), (-19.188356, 0.156195), (-19.5779, 0.194099), (-19.5779, 1.49141), (-19.60859, 1.49141), (-19.60859, 0.194099), (-19.519127, 0.704475), (-19.48843, 0.704475), (-19.48843, 0.745364), (-19.519127, 0.745364), (-19.475658, 0.704488), (-19.475658, 0.745352), (-19.506336, 0.745352), (-19.506336, 0.704488), (-19.859606, -0.13778), (-18.52183, -0.13778), (-18.562704, -0.096902), (-19.860027, -0.096902), (-19.723618, 0.177678), (-19.692928, 0.177678), (-19.692928, 1.515465), (-19.723618, 1.515465), (-18.835012, 1.240983), (-18.794138, 1.281861), (-20.131926, 1.281861), (-20.132347, 1.240983), (-19.616243, 1.506209), (-19.646933, 1.506209), (-19.646933, 0.208885), (-19.616243, 0.208885), (-19.874817, 1.268737), (-19.874817, 1.227862), (-19.860027, 1.227862), (-19.859606, 1.268737), (-19.710836, 0.177682), (-19.680147, 0.177682), (-19.680147, 0.192896), (-19.710836, 0.192896), (-20.132347, -0.083793), (-20.14714, -0.083793), (-20.14714, -0.124669), (-20.131926, -0.124669), (-19.603462, 1.506215), (-19.634151, 1.506215), (-19.634151, 1.491423), (-19.603462, 1.491423), (-20.416027, -0.124657), (-19.07826, -0.124657), (-19.119135, -0.083779), (-20.416447, -0.083779), (-19.698055, 0.177679), (-19.667366, 0.177679), (-19.667366, 1.515464), (-19.698055, 1.515464), (-19.22923, 1.52183), (-19.188356, 1.562707), (-20.526129, 1.562707), (-20.52655, 1.52183), (-19.590681, 1.506215), (-19.62137, 1.506215), (-19.62137, 0.208879), (-19.590681, 0.208879), (-20.43124, 1.281849), (-20.43124, 1.240974), (-20.416447, 1.240974), (-20.416027, 1.281849), (-19.685274, 0.177685), (-19.654585, 0.177685), (-19.654585, 0.192898), (-19.685274, 0.192898), (-20.52655, 0.19707), (-20.541344, 0.197072), (-20.541344, 0.156195), (-20.526129, 0.156195), (-19.5779, 1.506202), (-19.60859, 1.506202), (-19.60859, 1.49141), (-19.5779, 1.49141)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorDiningTableMella_1"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorDiningTableMella_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorDiningTableMella_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorDiningTableMella_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDiningTableMella_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDiningTableMella_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

