#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshRobothorDiningTableMella_0_GeomSubset_0"
    {
        def Mesh "MeshRobothorDiningTableMella_0_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [0, 2, 13, 12, 1, 0, 5, 4, 2, 1, 10, 9, 3, 5, 18, 20, 4, 3, 8, 7, 6, 8, 21, 23, 7, 6, 11, 10, 9, 11, 17, 16, 12, 14, 19, 18, 14, 13, 16, 15, 15, 17, 23, 22, 20, 19, 22, 21, 1, 4, 7, 10, 13, 2, 9, 16, 19, 14, 15, 22, 3, 20, 21, 8, 17, 11, 6, 23, 5, 0, 12, 18, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
            rel material:binding = </root/_materials/M_RobothorDiningTableMella_0>
            normal3f[] normals = [(-0.0018378198, -0.002790071, 0.9999944), (-0.0016557025, -0.9848152, 0.17359821), (0.0016306937, -0.9848071, 0.17364398), (0.0019116402, -0.0028071702, 0.9999943), (-0.9848205, -0.002530992, 0.17355737), (-0.0018378198, -0.002790071, 0.9999944), (-0.0018278956, 0.0028882176, 0.99999416), (-0.9848287, 0.0025371597, 0.17351146), (-0.0016557025, -0.9848152, 0.17359821), (-0.9848205, -0.002530992, 0.17355737), (-0.98482096, -0.0025298, -0.17355487), (-0.0016415417, -0.9848099, -0.17362778), (-0.001632005, 0.98480695, 0.17364496), (-0.0018278956, 0.0028882176, 0.99999416), (0.001813963, 0.002901271, 0.99999416), (0.0016339439, 0.98478836, 0.17375067), (-0.9848287, 0.0025371597, 0.17351146), (-0.001632005, 0.98480695, 0.17364496), (-0.0016054586, 0.9847978, -0.17369719), (-0.98483187, 0.0025449097, -0.17349268), (-0.0018290877, 0.0028050542, -0.99999446), (-0.0016054586, 0.9847978, -0.17369719), (0.0016480386, 0.98481375, -0.1736064), (0.0019474354, 0.0027691126, -0.9999943), (-0.98483187, 0.0025449097, -0.17349268), (-0.0018290877, 0.0028050542, -0.99999446), (-0.0018092021, -0.0029043704, -0.9999941), (-0.98482096, -0.0025298, -0.17355487), (-0.0016415417, -0.9848099, -0.17362778), (-0.0018092021, -0.0029043704, -0.9999941), (0.0018302351, -0.0028067604, -0.99999446), (0.0015898912, -0.9847935, -0.17372192), (0.0019116402, -0.0028071702, 0.9999943), (0.9848125, -0.002554773, 0.17360249), (0.9848206, 0.002535522, 0.17355695), (0.001813963, 0.002901271, 0.99999416), (0.9848125, -0.002554773, 0.17360249), (0.0016306937, -0.9848071, 0.17364398), (0.0015898912, -0.9847935, -0.17372192), (0.9848319, -0.0025458932, -0.17349191), (0.9848319, -0.0025458932, -0.17349191), (0.0018302351, -0.0028067604, -0.99999446), (0.0019474354, 0.0027691126, -0.9999943), (0.98481286, 0.002508521, -0.17360106), (0.0016339439, 0.98478836, 0.17375067), (0.9848206, 0.002535522, 0.17355695), (0.98481286, 0.002508521, -0.17360106), (0.0016480386, 0.98481375, -0.1736064), (-0.9848205, -0.002530992, 0.17355737), (-0.9848287, 0.0025371597, 0.17351146), (-0.98483187, 0.0025449097, -0.17349268), (-0.98482096, -0.0025298, -0.17355487), (0.0016306937, -0.9848071, 0.17364398), (-0.0016557025, -0.9848152, 0.17359821), (-0.0016415417, -0.9848099, -0.17362778), (0.0015898912, -0.9847935, -0.17372192), (0.9848206, 0.002535522, 0.17355695), (0.9848125, -0.002554773, 0.17360249), (0.9848319, -0.0025458932, -0.17349191), (0.98481286, 0.002508521, -0.17360106), (-0.001632005, 0.98480695, 0.17364496), (0.0016339439, 0.98478836, 0.17375067), (0.0016480386, 0.98481375, -0.1736064), (-0.0016054586, 0.9847978, -0.17369719), (0.0018302351, -0.0028067604, -0.99999446), (-0.0018092021, -0.0029043704, -0.9999941), (-0.0018290877, 0.0028050542, -0.99999446), (0.0019474354, 0.0027691126, -0.9999943), (-0.0018278956, 0.0028882176, 0.99999416), (-0.0018378198, -0.002790071, 0.9999944), (0.0019116402, -0.0028071702, 0.9999943), (0.001813963, 0.002901271, 0.99999416), (-0.0018378198, -0.002790071, 0.9999944), (-0.9848205, -0.002530992, 0.17355737), (-0.0016557025, -0.9848152, 0.17359821), (-0.001632005, 0.98480695, 0.17364496), (-0.9848287, 0.0025371597, 0.17351146), (-0.0018278956, 0.0028882176, 0.99999416), (-0.0018290877, 0.0028050542, -0.99999446), (-0.98483187, 0.0025449097, -0.17349268), (-0.0016054586, 0.9847978, -0.17369719), (-0.0016415417, -0.9848099, -0.17362778), (-0.98482096, -0.0025298, -0.17355487), (-0.0018092021, -0.0029043704, -0.9999941), (0.0019116402, -0.0028071702, 0.9999943), (0.0016306937, -0.9848071, 0.17364398), (0.9848125, -0.002554773, 0.17360249), (0.9848319, -0.0025458932, -0.17349191), (0.0015898912, -0.9847935, -0.17372192), (0.0018302351, -0.0028067604, -0.99999446), (0.001813963, 0.002901271, 0.99999416), (0.9848206, 0.002535522, 0.17355695), (0.0016339439, 0.98478836, 0.17375067), (0.0016480386, 0.98481375, -0.1736064), (0.98481286, 0.002508521, -0.17360106), (0.0019474354, 0.0027691126, -0.9999943)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.562988, -0.363714, 0.296052), (-0.565072, -0.363714, 0.293967), (-0.562988, -0.365798, 0.293967), (-0.562988, 0.362002, 0.293967), (-0.565072, 0.359917, 0.293967), (-0.562988, 0.359917, 0.296052), (-0.562988, 0.359917, 0.282153), (-0.565072, 0.359917, 0.284238), (-0.562988, 0.362002, 0.284238), (-0.562988, -0.365798, 0.284238), (-0.565072, -0.363714, 0.284238), (-0.562988, -0.363714, 0.282153), (0.568407, -0.363714, 0.296052), (0.568407, -0.365799, 0.293967), (0.570491, -0.363714, 0.293967), (0.570491, -0.363714, 0.284238), (0.568407, -0.365799, 0.284238), (0.568407, -0.363714, 0.282153), (0.568407, 0.359917, 0.296052), (0.570491, 0.359917, 0.293967), (0.568407, 0.362001, 0.293967), (0.568407, 0.362001, 0.284238), (0.570491, 0.359917, 0.284238), (0.568407, 0.359917, 0.282153), (0.549093, -0.361473, 0.272237), (0.549093, -0.340544, 0.272237), (-0.545453, -0.340544, 0.272237), (-0.545453, -0.361473, 0.272237), (0.549093, -0.361473, 0.256525), (-0.545453, -0.361473, 0.256525), (0.549093, -0.340544, 0.256525), (-0.545453, -0.340544, 0.256525), (0.549093, 0.336695, 0.272237), (0.549093, 0.357624, 0.272237), (-0.545453, 0.357624, 0.272237), (-0.545453, 0.336695, 0.272237), (0.549093, 0.336695, 0.256525), (-0.545453, 0.336695, 0.256525), (0.549093, 0.357624, 0.256525), (-0.545453, 0.357624, 0.256525), (0.565073, 0.358137, -0.410165), (0.565073, 0.358137, -0.402376), (0.565073, 0.337208, -0.402591), (0.565073, 0.337208, -0.410165), (0.54936, 0.358137, -0.410165), (0.54936, 0.358137, -0.402376), (0.54936, 0.337208, -0.410165), (0.54936, 0.337208, -0.402591), (0.565072, -0.362002, 0.282568), (0.565072, -0.341073, 0.261639), (0.565073, 0.337208, 0.26164), (0.565073, 0.358137, 0.282568), (0.54936, -0.362002, 0.282568), (0.54936, 0.358137, 0.282568), (0.54936, -0.341073, 0.261639), (0.54936, 0.337208, 0.26164), (0.565072, -0.362002, -0.402376), (0.565072, -0.341073, -0.402591), (0.54936, -0.362002, -0.402376), (0.54936, -0.341073, -0.402591), (0.565072, -0.341073, -0.410165), (0.565072, -0.362002, -0.410165), (0.54936, -0.362002, -0.410165), (0.54936, -0.341073, -0.410165), (-0.54507, 0.358137, -0.410165), (-0.54507, 0.358137, -0.402376), (-0.54507, 0.337209, -0.402591), (-0.54507, 0.337209, -0.410165), (-0.560782, 0.358137, -0.410165), (-0.560782, 0.358137, -0.402376), (-0.560782, 0.337209, -0.410165), (-0.560782, 0.337209, -0.402591), (-0.54507, -0.362001, 0.282568), (-0.54507, -0.341073, 0.261639), (-0.54507, 0.337209, 0.26164), (-0.54507, 0.358137, 0.282568), (-0.560782, -0.362001, 0.282568), (-0.560782, 0.358137, 0.282568), (-0.560782, -0.341073, 0.261639), (-0.560782, 0.337209, 0.26164), (-0.54507, -0.362001, -0.402376), (-0.54507, -0.341073, -0.402591), (-0.560782, -0.362001, -0.402376), (-0.560782, -0.341073, -0.402591), (-0.54507, -0.341073, -0.410165), (-0.54507, -0.362001, -0.410165), (-0.560782, -0.362001, -0.410165), (-0.560782, -0.341073, -0.410165)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-9.907942, 0.582658), (-9.908757, 0.582659), (-9.908757, 0.140183), (-9.907943, 0.140183), (-9.021488, 0.083023), (-9.020624, 0.083023), (-9.020624, 0.382992), (-9.021488, 0.382991), (-9.021488, 0.082158), (-9.021488, 0.083023), (-9.02552, 0.083023), (-9.02552, 0.082159), (-9.624124, 0.582659), (-9.624938, 0.582659), (-9.624938, 0.140183), (-9.624124, 0.140183), (-9.021488, 0.382991), (-9.021488, 0.383856), (-9.02552, 0.383856), (-9.02552, 0.382992), (-9.437748, 0.582659), (-9.438563, 0.582658), (-9.438563, 0.140183), (-9.437748, 0.140183), (-9.02552, 0.382992), (-9.026384, 0.382992), (-9.026384, 0.083023), (-9.02552, 0.083023), (-9.15393, 0.582658), (-9.154745, 0.582659), (-9.154745, 0.140183), (-9.15393, 0.140183), (-9.003534, 0.382993), (-9.004398, 0.382993), (-9.004398, 0.083022), (-9.003534, 0.083021), (-9.004398, 0.382993), (-9.004398, 0.383857), (-9.00843, 0.383857), (-9.00843, 0.382993), (-9.00843, 0.382993), (-9.009295, 0.382993), (-9.009295, 0.083022), (-9.00843, 0.083021), (-9.004398, 0.082157), (-9.004398, 0.083022), (-9.00843, 0.083021), (-9.00843, 0.082158), (-9.021488, 0.083023), (-9.021488, 0.382991), (-9.02552, 0.382992), (-9.02552, 0.083023), (-9.052838, 0.140486), (-9.052838, 0.582355), (-9.056641, 0.582355), (-9.05664, 0.140486), (-9.004398, 0.083022), (-9.004398, 0.382993), (-9.00843, 0.382993), (-9.00843, 0.083021), (-9.041685, 0.582386), (-9.041685, 0.140455), (-9.037884, 0.140456), (-9.037884, 0.582386), (-9.154745, 0.140183), (-9.154745, 0.582659), (-9.437748, 0.582659), (-9.437748, 0.140183), (-9.624938, 0.582659), (-9.907942, 0.582658), (-9.907943, 0.140183), (-9.624938, 0.140183), (-9.020624, 0.083023), (-9.021488, 0.083023), (-9.021488, 0.082158), (-9.021488, 0.383856), (-9.021488, 0.382991), (-9.020624, 0.382992), (-9.026384, 0.382992), (-9.02552, 0.382992), (-9.02552, 0.383856), (-9.02552, 0.082159), (-9.02552, 0.083023), (-9.026384, 0.083023), (-9.003534, 0.382993), (-9.004398, 0.383857), (-9.004398, 0.382993), (-9.00843, 0.382993), (-9.00843, 0.383857), (-9.009295, 0.382993), (-9.003534, 0.083021), (-9.004398, 0.083022), (-9.004398, 0.082157), (-9.00843, 0.082158), (-9.00843, 0.083021), (-9.009295, 0.083022)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorDiningTableMella_0"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorDiningTableMella_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorDiningTableMella_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0.052
                float3 inputs:normal.connect = </root/_materials/M_RobothorDiningTableMella_0/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDiningTableMella_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDiningTableMella_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

