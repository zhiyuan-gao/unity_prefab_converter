#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "ToasterLever_1_ToasterLever_1_1_GeomSubset_2"
    {
        def Mesh "ToasterLever_1_ToasterLever_1_1_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_ToasterLever_1_2>
            normal3f[] normals = [(0.84711933, -3.7028762e-8, -0.53140277), (-3.7028762e-8, -0.84711933, -0.53140277), (-0.84711933, 3.7028762e-8, -0.53140277), (3.7028762e-8, 0.84711933, -0.53140277)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.002318, -0.155591, 0.050242), (-0.002318, -0.151519, 0.050242), (0.001753, -0.155591, 0.050242), (0.001753, -0.151519, 0.050242), (-0.002318, -0.155591, 0.050242), (-0.002318, -0.151519, 0.050242), (0.001753, -0.155591, 0.050242), (0.001753, -0.151519, 0.050242), (-0.002318, -0.155591, 0.050242), (-0.002318, -0.151519, 0.050242), (0.001753, -0.155591, 0.050242), (0.001753, -0.151519, 0.050242), (-0.002318, -0.155591, 0.050242), (-0.002318, -0.151519, 0.050242), (0.001753, -0.155591, 0.050242), (0.001753, -0.151519, 0.050242), (-0.002318, -0.155591, 0.050242), (-0.002318, -0.151519, 0.050242), (0.001753, -0.155591, 0.050242), (0.001753, -0.151519, 0.050242), (-0.002318, -0.155591, 0.050242), (-0.002318, -0.151519, 0.050242), (0.001753, -0.155591, 0.050242), (0.001753, -0.151519, 0.050242), (0, -0.161111, 0.050242), (-0.001975, -0.146369, 0.05106), (-0.001511, -0.146369, 0.051753), (-0.000818, -0.146369, 0.052217), (0, -0.146369, 0.052379), (0.000818, -0.146369, 0.052217), (0.001512, -0.146369, 0.051753), (0.001975, -0.146369, 0.05106), (0.002138, -0.146369, 0.050242), (0.001975, -0.146369, 0.049424), (0.001512, -0.146369, 0.04873), (0.000818, -0.146369, 0.048267), (0, -0.146369, 0.048104), (-0.000818, -0.146369, 0.048267), (-0.001511, -0.146369, 0.04873), (-0.001975, -0.146369, 0.049424), (-0.002137, -0.146369, 0.050242), (-0.001975, -0.137179, 0.05106), (-0.001511, -0.137179, 0.051753), (-0.000818, -0.137179, 0.052217), (0, -0.137179, 0.052379), (0.000818, -0.137179, 0.052217), (0.001512, -0.137179, 0.051753), (0.001975, -0.137179, 0.05106), (0.002138, -0.137179, 0.050242), (0.001975, -0.137179, 0.049424), (0.001512, -0.137179, 0.04873), (0.000818, -0.137179, 0.048267), (0, -0.137179, 0.048104), (-0.000818, -0.137179, 0.048267), (-0.001511, -0.137179, 0.04873), (-0.001975, -0.137179, 0.049424), (-0.002137, -0.137179, 0.050242), (-0.00633, -0.146729, 0.052864), (-0.00593, -0.146369, 0.052698), (-0.004845, -0.146729, 0.055087), (-0.004539, -0.146369, 0.05478), (-0.002622, -0.146729, 0.056572), (-0.002456, -0.146369, 0.056172), (0, -0.146729, 0.057094), (0, -0.146369, 0.05666), (0.002622, -0.146729, 0.056572), (0.002456, -0.146369, 0.056172), (0.004845, -0.146729, 0.055087), (0.004539, -0.146369, 0.05478), (0.00633, -0.146729, 0.052864), (0.00593, -0.146369, 0.052698), (0.006852, -0.146729, 0.050242), (0.006419, -0.146369, 0.050242), (0.00633, -0.146729, 0.04762), (0.00593, -0.146369, 0.047785), (0.004845, -0.146729, 0.045397), (0.004539, -0.146369, 0.045703), (0.002622, -0.146729, 0.043911), (0.002456, -0.146369, 0.044312), (0, -0.146729, 0.04339), (0, -0.146369, 0.043823), (-0.002622, -0.146729, 0.043911), (-0.002456, -0.146369, 0.044312), (-0.004845, -0.146729, 0.045397), (-0.004539, -0.146369, 0.045703), (-0.00633, -0.146729, 0.04762), (-0.00593, -0.146369, 0.047785), (-0.006852, -0.146729, 0.050242), (-0.006419, -0.146369, 0.050242), (-0.00593, -0.161111, 0.052698), (-0.00633, -0.16075, 0.052864), (-0.004845, -0.16075, 0.055087), (-0.004539, -0.161111, 0.05478), (-0.002456, -0.161111, 0.056172), (-0.002622, -0.16075, 0.056572), (0, -0.16075, 0.057094), (0, -0.161111, 0.05666), (0.002456, -0.161111, 0.056172), (0.002622, -0.16075, 0.056572), (0.004845, -0.16075, 0.055087), (0.004539, -0.161111, 0.05478), (0.00593, -0.161111, 0.052698), (0.00633, -0.16075, 0.052864), (0.006852, -0.16075, 0.050242), (0.006419, -0.161111, 0.050242), (0.00593, -0.161111, 0.047785), (0.00633, -0.16075, 0.04762), (0.004845, -0.16075, 0.045397), (0.004539, -0.161111, 0.045703), (0.002456, -0.161111, 0.044312), (0.002622, -0.16075, 0.043911), (0, -0.16075, 0.04339), (0, -0.161111, 0.043823), (-0.002456, -0.161111, 0.044312), (-0.002622, -0.16075, 0.043911), (-0.004845, -0.16075, 0.045397), (-0.004539, -0.161111, 0.045703), (-0.00593, -0.161111, 0.047785), (-0.00633, -0.16075, 0.04762), (-0.006852, -0.16075, 0.050242), (-0.006419, -0.161111, 0.050242)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-47.005455, -17.922548), (-47.005455, -17.98636), (-46.941643, -17.98636), (-46.941643, -17.922548)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_ToasterLever_1_2"
        {
            token outputs:surface.connect = </root/_materials/M_ToasterLever_1_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_ToasterLever_1_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_ToasterLever_1_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_ToasterLever_1_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_ToasterLever_1_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

