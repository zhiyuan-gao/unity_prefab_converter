#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer2_25_FridgeDrawer2E1_3_GeomSubset_0"
    {
        def Mesh "FridgeDrawer2_25_FridgeDrawer2E1_3_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            rel material:binding = </root/_materials/M_FridgeDrawer2E1_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.007871, 0.098055, -0.846303), (-0.007863, 0.098055, -0.846303), (-0.007871, 0.098063, -0.846303), (-0.007863, 0.098063, -0.846303), (-0.007871, 0.098055, -0.846303), (-0.007863, 0.098055, -0.846303), (-0.007871, 0.098063, -0.846303), (-0.007863, 0.098063, -0.846303), (-0.007871, 0.098055, -0.846303), (-0.007863, 0.098055, -0.846303), (-0.007871, 0.098063, -0.846303), (-0.007863, 0.098063, -0.846303), (-0.007871, 0.098055, -0.846303), (-0.007863, 0.098055, -0.846303), (-0.007871, 0.098063, -0.846303), (-0.007863, 0.098063, -0.846303), (-0.007871, 0.098055, -0.846303), (-0.007863, 0.098055, -0.846303), (-0.007871, 0.098063, -0.846303), (-0.007863, 0.098063, -0.846303), (-0.007871, 0.098055, -0.846303), (-0.007863, 0.098055, -0.846303), (-0.007871, 0.098063, -0.846303), (-0.007863, 0.098063, -0.846303), (-0.007871, 0.098055, -0.846303), (-0.007863, 0.098055, -0.846303), (-0.007871, 0.098063, -0.846303), (-0.007863, 0.098063, -0.846303), (-0.343943, -0.088535, -0.705266), (-0.348357, -0.084582, -0.710187), (-0.344272, -0.084663, -0.71414), (-0.340016, -0.088535, -0.709956), (0.335093, -0.088537, -0.709956), (0.339265, -0.084584, -0.71414), (0.343435, -0.084665, -0.710268), (0.339021, -0.088537, -0.705266), (-0.338603, 0.102971, -0.461298), (-0.344186, 0.107156, -0.465251), (-0.348355, 0.103284, -0.46517), (-0.343942, 0.099541, -0.461298), (0.339022, 0.099539, -0.461298), (0.343436, 0.103201, -0.465251), (0.339352, 0.107154, -0.465169), (0.333682, 0.102969, -0.461298), (-0.348356, 0.103122, -0.710106), (-0.344101, 0.107156, -0.710106), (-0.344101, 0.103122, -0.71414), (0.33918, 0.10312, -0.71414), (0.33918, 0.107154, -0.710106), (0.343436, 0.10312, -0.710106), (-0.344101, -0.084501, -0.461298), (-0.348356, -0.084501, -0.465332), (-0.344101, -0.088535, -0.465332), (0.33918, -0.088537, -0.465332), (0.343435, -0.084503, -0.465332), (0.33918, -0.084503, -0.461298), (-0.328095, -0.088535, -0.697694), (-0.324051, -0.084545, -0.693567), (-0.32826, -0.084573, -0.689605), (-0.33258, -0.088535, -0.693727), (0.327658, -0.088537, -0.693727), (0.323337, -0.084539, -0.689569), (0.319177, -0.084591, -0.693567), (0.323174, -0.088537, -0.697694), (0.323337, -0.084502, -0.465332), (0.327593, -0.088537, -0.465332), (0.327593, -0.084502, -0.461298), (-0.332514, -0.0845, -0.461298), (-0.332514, -0.088535, -0.465332), (-0.328259, -0.0845, -0.465332), (-0.328259, 0.086427, -0.465285), (-0.324072, 0.090414, -0.465266), (-0.328543, 0.094453, -0.461298), (-0.33259, 0.090157, -0.461298), (0.32767, 0.090155, -0.461298), (0.323626, 0.094497, -0.461298), (0.319117, 0.090413, -0.465299), (0.323338, 0.086425, -0.465285), (0.323338, 0.086378, -0.689532), (0.319083, 0.090413, -0.689532), (0.319083, 0.086378, -0.693567), (-0.324003, 0.08638, -0.693567), (-0.324003, 0.090414, -0.689532), (-0.328259, 0.08638, -0.689532), (-0.328557, -0.081319, -0.69517), (0.323635, -0.081321, -0.69517), (-0.328557, -0.081319, -0.468055), (0.323635, -0.081321, -0.468055), (-0.328557, -0.067035, -0.468055), (0.323635, -0.067037, -0.468055), (-0.328557, -0.067035, -0.69517), (0.323635, -0.067037, -0.69517), (0.331529, -0.087163, -0.503529), (0.33112, -0.089932, -0.503603), (0.328951, -0.088174, -0.505542), (0.261465, -0.107861, -0.505542), (0.262045, -0.109875, -0.503455), (0.328951, -0.088174, -0.478046), (0.331003, -0.089966, -0.480059), (0.331529, -0.087163, -0.480059), (0.261465, -0.107861, -0.478046), (0.262045, -0.109875, -0.480133), (0.324514, -0.083783, -0.480187), (0.325769, -0.085545, -0.478046), (0.327645, -0.084381, -0.480187), (0.260013, -0.101507, -0.478046), (0.259536, -0.099469, -0.480133), (0.325769, -0.085545, -0.505542), (0.324536, -0.083777, -0.503428), (0.327627, -0.084368, -0.503428), (0.259536, -0.099469, -0.503455), (0.260013, -0.101507, -0.505542), (-0.007868, -0.142717, -0.480133), (-0.007868, -0.140626, -0.478046), (0.121699, -0.13607, -0.478046), (0.121974, -0.138144, -0.480133), (-0.007868, -0.125235, -0.478046), (-0.007868, -0.123146, -0.480133), (0.121974, -0.120004, -0.480133), (0.122164, -0.122085, -0.478046), (-0.007868, -0.123146, -0.503455), (-0.007868, -0.125235, -0.505542), (0.122164, -0.122085, -0.505542), (0.121974, -0.120004, -0.503455), (-0.007868, -0.140626, -0.505542), (-0.007868, -0.142717, -0.503455), (0.121974, -0.138144, -0.503455), (0.121699, -0.13607, -0.505542), (0.190925, -0.124076, -0.478046), (0.191382, -0.126118, -0.480133), (0.191382, -0.111725, -0.480133), (0.191725, -0.113787, -0.478046), (0.191725, -0.113787, -0.505542), (0.191382, -0.111725, -0.503455), (0.191382, -0.126118, -0.503455), (0.190925, -0.124076, -0.505542), (-0.333873, -0.088172, -0.505542), (-0.335926, -0.089964, -0.503529), (-0.33645, -0.087161, -0.503529), (-0.266387, -0.107859, -0.505542), (-0.266967, -0.109873, -0.503455), (-0.33645, -0.087161, -0.480059), (-0.336042, -0.08993, -0.479985), (-0.333873, -0.088172, -0.478046), (-0.266387, -0.107859, -0.478046), (-0.266967, -0.109873, -0.480133), (-0.332567, -0.084379, -0.480187), (-0.33069, -0.085543, -0.478046), (-0.329436, -0.083781, -0.480187), (-0.264935, -0.101506, -0.478046), (-0.264458, -0.099467, -0.480133), (-0.332549, -0.084366, -0.503428), (-0.329436, -0.083781, -0.503401), (-0.33069, -0.085543, -0.505542), (-0.264458, -0.099467, -0.503455), (-0.264935, -0.101506, -0.505542), (-0.126896, -0.138143, -0.480133), (-0.126621, -0.13607, -0.478046), (-0.127086, -0.122084, -0.478046), (-0.126896, -0.120004, -0.480133), (-0.126896, -0.120004, -0.503455), (-0.127086, -0.122084, -0.505542), (-0.126621, -0.13607, -0.505542), (-0.126896, -0.138143, -0.503455), (-0.196304, -0.126117, -0.480133), (-0.195847, -0.124075, -0.478046), (-0.196647, -0.113786, -0.478046), (-0.196304, -0.111724, -0.480133), (-0.196304, -0.111724, -0.503455), (-0.196647, -0.113786, -0.505542), (-0.195847, -0.124075, -0.505542), (-0.196304, -0.126117, -0.503455)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-172.18451, -111.27127), (-172.18451, -111.27127), (-172.18451, -111.27127), (-172.18451, -111.27127)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer2E1_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer2E1_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer2E1_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer2E1_0/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2E1_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Copper_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer2E1_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

