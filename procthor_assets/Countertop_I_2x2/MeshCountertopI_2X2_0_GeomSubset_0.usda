#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshCountertopI_2X2_0_GeomSubset_0"
    {
        def Mesh "MeshCountertopI_2X2_0_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 12, 13, 4, 1, 3, 6, 5, 2, 0, 4, 7, 13, 9, 7, 4, 8, 12, 0, 2, 6, 3, 8, 9, 12, 1, 5, 13, 5, 6, 9, 13, 1, 12, 8, 3]
            rel material:binding = </root/_materials/M_CountertopI_2X2_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (1, 0, 0), (1, -2.2586628e-9, 0), (1, 8.110887e-9, 0), (1, 0, 0), (-1, -2.3498372e-9, 0), (-1, 0, 0), (-1, 0, 0), (-1, -1.36415235e-8, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 0, 0), (1, 0, 0), (1, -2.2586628e-9, 0), (1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, -2.3498372e-9, 0), (-1, 0, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.304835, 0.306747, 0.417919), (-0.304835, -0.302853, 0.417919), (-0.304835, 0.306747, 0.387919), (-0.304835, -0.302853, 0.387919), (0.304765, 0.306747, 0.417919), (0.304765, -0.302853, 0.417919), (0.304765, -0.302853, 0.387919), (0.304765, 0.306747, 0.387919), (-0.304835, -0.282853, 0.387919), (0.304765, -0.282853, 0.387919), (-0.304835, 0.306747, -0.518111), (0.304765, 0.306747, -0.518111), (-0.304835, -0.282853, 0.417919), (0.304765, -0.282853, 0.417919), (-0.304835, -0.282853, -0.43811), (0.304765, -0.282853, -0.43811), (-0.304835, -0.262853, -0.438109), (0.304765, -0.262853, -0.438109), (-0.304835, -0.262853, -0.518111), (0.304765, -0.262853, -0.518111)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-10.101829, 1.088274), (-10.101829, 0.167022), (-9.149329, 0.167022), (-9.149329, 1.088274), (-10.10183, 1.049819), (-10.10183, 1.002943), (-9.149327, 1.002943), (-9.149327, 1.049819), (-10.10184, 1.097102), (-10.10184, 1.050229), (-9.149315, 1.050229), (-9.149315, 1.097102), (-10.070593, 1.144386), (-10.070593, 1.097512), (-9.149315, 1.097512), (-9.149315, 1.144386), (-9.180578, 1.144796), (-9.180577, 1.191671), (-10.10183, 1.191671), (-10.10183, 1.144796), (-9.149332, 1.224808), (-10.101826, 1.224808), (-10.101826, 1.193559), (-9.149332, 1.193559), (-10.101829, 0.167022), (-10.101829, 0.135775), (-9.149329, 0.135775), (-9.149329, 0.167022), (-10.101842, 1.144386), (-10.101842, 1.097512), (-10.070593, 1.097512), (-10.070593, 1.144386), (-9.149327, 1.191671), (-9.180577, 1.191671), (-9.180578, 1.144796), (-9.149327, 1.144796)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_CountertopI_2X2_0"
        {
            token outputs:surface.connect = </root/_materials/M_CountertopI_2X2_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_CountertopI_2X2_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/marbleBase2.jpg@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_CountertopI_2X2_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

