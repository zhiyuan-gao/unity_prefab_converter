#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer3_29_FridgeDrawer3E5_4_GeomSubset_2"
    {
        def Mesh "FridgeDrawer3_29_FridgeDrawer3E5_4_GeomSubset_2"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [8, 9, 11, 10]
            rel material:binding = </root/_materials/M_FridgeDrawer3E5_2>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.005623, 0.092349, -0.895671), (-0.005615, 0.092349, -0.895671), (-0.005623, 0.092357, -0.895671), (-0.005615, 0.092357, -0.895671), (-0.005623, 0.092349, -0.895671), (-0.005615, 0.092349, -0.895671), (-0.005623, 0.092357, -0.895671), (-0.005615, 0.092357, -0.895671), (-0.005623, 0.092349, -0.895671), (-0.005615, 0.092349, -0.895671), (-0.005623, 0.092357, -0.895671), (-0.005615, 0.092357, -0.895671), (-0.005623, 0.092349, -0.895671), (-0.005615, 0.092349, -0.895671), (-0.005623, 0.092357, -0.895671), (-0.005615, 0.092357, -0.895671), (-0.005623, 0.092349, -0.895671), (-0.005615, 0.092349, -0.895671), (-0.005623, 0.092357, -0.895671), (-0.005615, 0.092357, -0.895671), (-0.005623, 0.092349, -0.895671), (-0.005615, 0.092349, -0.895671), (-0.005623, 0.092357, -0.895671), (-0.005615, 0.092357, -0.895671), (-0.005623, 0.092349, -0.895671), (-0.005615, 0.092349, -0.895671), (-0.005623, 0.092357, -0.895671), (-0.005615, 0.092357, -0.895671), (-0.31721, -0.087486, -0.75078), (-0.321302, -0.083677, -0.756008), (-0.317515, -0.083755, -0.760207), (-0.313569, -0.087486, -0.755762), (0.312356, -0.087485, -0.755762), (0.316224, -0.083674, -0.760207), (0.32009, -0.083753, -0.756094), (0.315998, -0.087485, -0.75078), (-0.31226, 0.097085, -0.545844), (-0.317437, 0.101118, -0.550043), (-0.321302, 0.097386, -0.549958), (-0.317211, 0.093779, -0.545844), (0.315997, 0.093781, -0.545844), (0.32009, 0.09731, -0.550044), (0.316303, 0.10112, -0.549957), (0.311047, 0.097086, -0.545844), (-0.321302, 0.09723, -0.755921), (-0.317357, 0.101118, -0.755921), (-0.317357, 0.09723, -0.760207), (0.316145, 0.097232, -0.760207), (0.316145, 0.10112, -0.755921), (0.32009, 0.097232, -0.755921), (-0.317357, -0.083598, -0.545844), (-0.321302, -0.083598, -0.55013), (-0.317357, -0.087486, -0.55013), (0.316145, -0.087485, -0.55013), (0.32009, -0.083596, -0.55013), (0.316145, -0.083596, -0.545844), (-0.302517, -0.087486, -0.742736), (-0.298767, -0.083641, -0.738351), (-0.302669, -0.083668, -0.734143), (-0.306675, -0.087486, -0.738522), (0.305463, -0.087484, -0.738522), (0.301457, -0.083631, -0.734104), (0.297599, -0.083682, -0.738351), (0.301305, -0.087484, -0.742736), (0.301457, -0.083596, -0.55013), (0.305402, -0.087484, -0.55013), (0.305402, -0.083596, -0.545844), (-0.306614, -0.083598, -0.545844), (-0.306614, -0.087486, -0.55013), (-0.302669, -0.083598, -0.55013), (-0.30267, 0.08114, -0.55008), (-0.298788, 0.084983, -0.55006), (-0.302933, 0.088875, -0.545844), (-0.306685, 0.084735, -0.545844), (0.305473, 0.084737, -0.545844), (0.301723, 0.088921, -0.545844), (0.297543, 0.084985, -0.550095), (0.301456, 0.081142, -0.55008), (0.301456, 0.081096, -0.734066), (0.297511, 0.084985, -0.734066), (0.297511, 0.081096, -0.738351), (-0.298724, 0.081095, -0.738351), (-0.298724, 0.084983, -0.734066), (-0.30267, 0.081095, -0.734066), (-0.302945, -0.080532, -0.740055), (0.301733, -0.08053, -0.740055), (-0.302945, -0.080532, -0.553023), (0.301733, -0.08053, -0.553023), (-0.302945, -0.066765, -0.553023), (0.301733, -0.066764, -0.553023), (-0.302945, -0.066765, -0.740055), (0.301733, -0.066764, -0.740055), (0.309051, -0.08616, -0.590707), (0.308672, -0.088829, -0.590786), (0.306661, -0.087135, -0.592846), (0.244092, -0.106109, -0.592846), (0.24463, -0.10805, -0.590629), (0.306661, -0.087135, -0.563636), (0.308564, -0.088862, -0.565775), (0.309051, -0.08616, -0.565775), (0.244092, -0.106109, -0.563636), (0.24463, -0.10805, -0.565853), (0.302548, -0.082903, -0.56591), (0.303711, -0.084601, -0.563636), (0.30545, -0.083479, -0.56591), (0.242746, -0.099986, -0.563636), (0.242304, -0.098021, -0.565853), (0.303711, -0.084601, -0.592846), (0.302568, -0.082898, -0.5906), (0.305434, -0.083467, -0.5906), (0.242304, -0.098021, -0.590629), (0.242746, -0.099986, -0.592846), (-0.005619, -0.139705, -0.565853), (-0.005619, -0.137689, -0.563636), (0.114508, -0.133298, -0.563636), (0.114764, -0.135296, -0.565853), (-0.005619, -0.122856, -0.563636), (-0.005619, -0.120843, -0.565853), (0.114764, -0.117814, -0.565853), (0.11494, -0.119819, -0.563636), (-0.005619, -0.120843, -0.590629), (-0.005619, -0.122856, -0.592846), (0.11494, -0.119819, -0.592846), (0.114764, -0.117814, -0.590629), (-0.005619, -0.137689, -0.592846), (-0.005619, -0.139705, -0.590629), (0.114764, -0.135296, -0.590629), (0.114508, -0.133298, -0.592846), (0.178691, -0.121737, -0.563636), (0.179115, -0.123705, -0.565853), (0.179115, -0.109834, -0.565853), (0.179433, -0.111821, -0.563636), (0.179433, -0.111821, -0.592846), (0.179115, -0.109834, -0.590629), (0.179115, -0.123705, -0.590629), (0.178691, -0.121737, -0.592846), (-0.307874, -0.087137, -0.592846), (-0.309776, -0.088863, -0.590707), (-0.310263, -0.086162, -0.590707), (-0.245304, -0.106111, -0.592846), (-0.245842, -0.108051, -0.590629), (-0.310263, -0.086162, -0.565775), (-0.309884, -0.088831, -0.565696), (-0.307874, -0.087137, -0.563636), (-0.245304, -0.106111, -0.563636), (-0.245842, -0.108051, -0.565853), (-0.306662, -0.083481, -0.56591), (-0.304923, -0.084603, -0.563636), (-0.30376, -0.082904, -0.56591), (-0.243958, -0.099987, -0.563636), (-0.243516, -0.098023, -0.565853), (-0.306646, -0.083468, -0.5906), (-0.30376, -0.082904, -0.590571), (-0.304923, -0.084603, -0.592846), (-0.243516, -0.098023, -0.590629), (-0.243958, -0.099987, -0.592846), (-0.115975, -0.135297, -0.565853), (-0.11572, -0.133299, -0.563636), (-0.116152, -0.11982, -0.563636), (-0.115975, -0.117815, -0.565853), (-0.115975, -0.117815, -0.590629), (-0.116152, -0.11982, -0.592846), (-0.11572, -0.133299, -0.592846), (-0.115975, -0.135297, -0.590629), (-0.180327, -0.123706, -0.565853), (-0.179903, -0.121738, -0.563636), (-0.180645, -0.111822, -0.563636), (-0.180327, -0.109835, -0.565853), (-0.180327, -0.109835, -0.590629), (-0.180645, -0.111822, -0.592846), (-0.179903, -0.121738, -0.592846), (-0.180327, -0.123706, -0.590629)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-118.53865, -109.61047), (-118.53865, -113.51364), (-114.667404, -113.51364), (-114.667404, -109.61047)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer3E5_2"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer3E5_2/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_FridgeDrawer3E5_2/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 1
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer3E5_2/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedAluminum_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3E5_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/BrushedIron_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer3E5_2/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

