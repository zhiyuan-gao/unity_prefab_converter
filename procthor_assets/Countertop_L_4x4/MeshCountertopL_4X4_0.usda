#usda 1.0
(
    defaultPrim = "root"
    doc = "Blender v4.1.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "root" (
    customData = {
        dictionary Blender = {
            bool generated = 1
        }
    }
)
{
    def Xform "CountertopL_4X4"
    {
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]

        def Mesh "CountertopL_4X4" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform bool doubleSided = 1
            float3[] extent = [(-0.608251, -0.610429, -0.517404), (0.610951, 0.608772, 0.418626)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [5, 4, 17, 13, 8, 9, 14, 15, 1, 0, 4, 5, 0, 16, 17, 4, 2, 3, 7, 6, 0, 1, 9, 8, 3, 2, 11, 10, 15, 16, 0, 8, 7, 3, 12, 13, 3, 10, 14, 12, 15, 14, 10, 11, 2, 16, 15, 11, 17, 16, 2, 6, 13, 17, 6, 7, 13, 12, 18, 19, 12, 14, 20, 18, 20, 14, 9, 28, 5, 13, 19, 22, 22, 21, 23, 24, 25, 5, 22, 24, 1, 5, 25, 26, 9, 1, 26, 27, 28, 9, 27, 29, 21, 28, 29, 23, 19, 18, 21, 22, 18, 20, 28, 21, 24, 23, 26, 25, 23, 29, 27, 26]
            rel material:binding = </root/_materials/M_CountertopL_4X4_0>
            normal3f[] normals = [(1, 0.0000011156436, -0.0000075430935), (1, 9.477563e-7, -0.000016887976), (1, 4.7387812e-7, -0.000008443988), (1, -7.947117e-7, -0.000004452555), (0, 1, 0), (-3.2969112e-7, 1, 7.2883046e-7), (-0.0000010757051, 1, 7.8924796e-7), (0, 1, 0), (-5.8666e-7, -1, -8.001316e-7), (-7.822135e-7, -1, -0.000001060675), (-7.822135e-7, -1, -0.000001060675), (-5.866578e-7, -1, -8.001287e-7), (1.3670176e-8, 0, -1), (3.2025446e-7, 0, -1), (5.124125e-8, 0, -1), (2.7340468e-8, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, -8.1480533e-7, 0), (-1, -6.232379e-7, 2.7959305e-7), (-1, -6.2323795e-7, 2.79593e-7), (-1, -8.1480533e-7, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0.0000012024776, 0, -1), (3.2025446e-7, 0, -1), (1.3670176e-8, 0, -1), (0, 0, -1), (8.691055e-9, 0, 1), (-5.969125e-7, 0, 1), (-5.9683487e-7, 0, 1), (8.691055e-9, 0, 1), (-5.969125e-7, 0, 1), (-0.0000012024776, 0, 1), (-0.0000012024776, 0, 1), (-5.9683487e-7, 0, 1), (0, 1, 0), (-0.0000010757051, 1, 7.8924796e-7), (0, 1, 0), (0, 1, 0), (0.0000012400857, 0, -1), (3.2025446e-7, 0, -1), (0.0000012024776, 0, -1), (0.0000024049552, 0, -1), (5.124125e-8, 0, -1), (3.2025446e-7, 0, -1), (0.0000012400857, 0, -1), (7.514208e-8, 0, -1), (1, -7.947117e-7, -0.000004452555), (1, 4.7387812e-7, -0.000008443988), (1, 0, 0), (1, 0, 0), (0.0008297865, 0.9999994, -0.0006312516), (0.0008297865, 0.9999994, -0.0006312516), (0.0008297865, 0.9999994, -0.0006312516), (0.0008297865, 0.9999994, -0.0006312516), (0.99999946, 0.0008281905, -0.0006312503), (0.99999946, 0.0008281905, -0.0006312503), (0.99999946, 0.0008281905, -0.0006312503), (0.99999946, 0.0008281905, -0.0006312503), (-0.000003227115, 1, 0.0000023677437), (-0.0000010757051, 1, 7.8924796e-7), (-3.2969112e-7, 1, 7.2883046e-7), (3.6557898e-7, 1, 0.0000010943672), (1, 0.0000011156436, -0.0000075430935), (1, -7.947117e-7, -0.000004452555), (1, -0.0000033318913, 0.0000035303117), (1, 0.000003125829, 0.0000011115718), (0.0007990378, 0.9999784, 0.0065237517), (0.0007990378, 0.9999784, 0.0065237517), (0.0007990378, 0.9999784, 0.0065237517), (0.0007990378, 0.9999784, 0.0065237517), (1, 0.000008675841, -9.671857e-7), (1, 0.0000011156436, -0.0000075430935), (1, 0.000003125829, 0.0000011115718), (1, 0.000008675841, -9.671857e-7), (-5.8666e-7, -1, -8.001316e-7), (-5.866578e-7, -1, -8.001287e-7), (-3.9110643e-7, -0.99999994, -5.395881e-7), (-3.9110643e-7, -0.99999994, -5.395881e-7), (-1, -6.2323795e-7, 2.79593e-7), (-1, -6.232379e-7, 2.7959305e-7), (-0.99999994, -4.316705e-7, 5.5918593e-7), (-0.99999994, -4.316705e-7, 5.5918593e-7), (3.6557898e-7, 1, 0.0000010943672), (-3.2969112e-7, 1, 7.2883046e-7), (0.0000034532177, 1, 0), (0.0000034532177, 1, 0), (0.9999784, 0.0007928632, 0.006511268), (0.9999784, 0.0007928632, 0.006511268), (0.9999784, 0.0007928632, 0.006511268), (0.9999784, 0.0007928632, 0.006511268), (-0.000117631236, -0.009740187, 0.9999526), (-0.0049146493, -0.0049295505, 0.9999758), (-0.0049152332, -0.004928964, 0.99997574), (-0.000117631236, -0.009740187, 0.9999526), (-0.0049146493, -0.0049295505, 0.9999758), (-0.009711742, -0.00011838354, 0.99995285), (-0.009711742, -0.00011838354, 0.99995285), (-0.0049152332, -0.004928964, 0.99997574), (-0.00006954618, 0.0003789031, 1), (0.00015437762, 0.00015439892, 0.9999999), (0.00015437808, 0.0001543985, 1), (-0.00006954618, 0.0003789031, 1), (0.00015437762, 0.00015439892, 0.9999999), (0.00037830134, -0.00007010511, 1), (0.00037830134, -0.00007010511, 1), (0.00015437808, 0.0001543985, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.61095, 0.608771, 0.418626), (0.61095, 0.608771, 0.388626), (0.00135, -0.000828, 0.418626), (0.00135, -0.000828, 0.388626), (-0.608249, 0.608772, 0.418626), (-0.60825, 0.608772, 0.388626), (-0.608249, -0.000828, 0.418626), (-0.608249, -0.000828, 0.388626), (0.610951, -0.610429, 0.418626), (0.610951, -0.610429, 0.388626), (0.00135, -0.610429, 0.388626), (0.00135, -0.610429, 0.418626), (0.02135, 0.019175, 0.388626), (-0.608249, 0.019176, 0.388626), (0.02135, -0.610429, 0.388626), (0.02135, -0.610429, 0.418626), (0.02135, 0.019175, 0.418626), (-0.608249, 0.019176, 0.418626), (0.020308, 0.018133, -0.437404), (-0.608249, 0.019176, -0.437404), (0.02135, -0.610429, -0.437404), (0.040314, 0.038136, -0.437143), (-0.608246, 0.039177, -0.437273), (0.041355, 0.039179, -0.517143), (-0.608246, 0.039177, -0.517273), (-0.608251, 0.608772, -0.517404), (0.61095, 0.608772, -0.517404), (0.61095, -0.610429, -0.517404), (0.04135, -0.610427, -0.437274), (0.04135, -0.610427, -0.517274)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-9.440645, 0.347416), (-9.393771, 0.347416), (-9.393771, 1.268689), (-9.440645, 1.268689), (-9.415617, 1.299933), (-9.462491, 1.299933), (-9.462491, 0.378679), (-9.415617, 0.378679), (-9.966648, 1.281698), (-10.013521, 1.281698), (-10.013521, -0.623355), (-9.966648, -0.623355), (-10.601374, 1.281675), (-9.680122, 0.360428), (-8.696372, 0.360433), (-8.696372, 1.281675), (-9.437463, 1.299934), (-9.484338, 1.299934), (-9.484338, 0.34743), (-9.437463, 0.34743), (-9.283937, 1.281675), (-9.330812, 1.281675), (-9.330812, -0.62333), (-9.283937, -0.62333), (-9.506184, 0.347416), (-9.459311, 0.347416), (-9.459311, 1.299949), (-9.506184, 1.299949), (-9.680122, -0.623329), (-9.680122, 0.360428), (-10.601374, 1.281675), (-10.601374, -0.623329), (-8.742575, 0.368425), (-9.695086, 0.368425), (-9.726335, 0.337167), (-8.742575, 0.337167), (-9.695086, 0.368425), (-9.695086, 1.320934), (-9.726335, 1.320934), (-9.726335, 0.337167), (-9.415617, 0.378679), (-9.462491, 0.378679), (-9.462491, 0.34743), (-9.415617, 0.34743), (-9.648874, 0.329175), (-9.680122, 0.360428), (-9.680122, -0.623329), (-9.648874, -0.623329), (-8.696372, 0.360433), (-9.680122, 0.360428), (-9.648874, 0.329175), (-8.696372, 0.329175), (-9.440645, 1.268689), (-9.393771, 1.268689), (-9.393771, 1.299947), (-9.440645, 1.299947), (-20.147518, 0.312233), (-20.147518, -0.179642), (-19.502182, -0.178829), (-19.502182, 0.312233), (-20.147518, 0.521254), (-20.147518, 0.029375), (-19.502182, 0.029375), (-19.502182, 0.520439), (-19.252481, 0.625504), (-19.897818, 0.625504), (-19.897818, 0.164877), (-19.252583, 0.609879), (-19.897818, 0.431068), (-19.897818, -0.029552), (-19.252481, -0.029552), (-19.252584, -0.013924), (-19.542854, 0.427393), (-20.04955, 0.427496), (-20.050362, 0.364996), (-19.542854, 0.364893), (-19.189981, 0.431068), (-19.897818, 0.431068), (-19.252584, -0.013924), (-19.190083, -0.013924), (-19.67626, -0.24337), (-18.723759, -0.24337), (-18.723759, 0.464464), (-19.67626, 0.464464), (-18.72376, 0.7617), (-19.67626, 0.7617), (-19.67626, 0.053862), (-18.72376, 0.05386), (-19.252583, 0.609879), (-19.897818, 0.164877), (-19.189981, 0.164879), (-19.190083, 0.609879), (-19.543667, 0.459902), (-20.050365, 0.459799), (-20.050365, 0.397299), (-19.542852, 0.397402), (-19.658735, 0.805925), (-19.65955, 0.314846), (-19.643923, 0.299215), (-19.64311, 0.805923), (-19.65955, 0.314846), (-20.150633, 0.31403), (-20.150633, 0.298407), (-19.643923, 0.299215), (-19.117783, 0.659153), (-19.625284, 0.659149), (-20.07028, 0.214157), (-19.11778, 0.214157), (-19.625284, 0.659149), (-19.62528, 1.166655), (-20.07028, 1.166653), (-20.07028, 0.214157)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            uniform token subsetFamily:materialBind:familyType = "nonOverlapping"

            def GeomSubset "M_CountertopL_4X4_0" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
                rel material:binding = </root/_materials/M_CountertopL_4X4_0>
            }

            def GeomSubset "M_CountertopL_4X4_1" (
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                uniform token elementType = "face"
                uniform token familyName = "materialBind"
                int[] indices = [14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]
                rel material:binding = </root/_materials/M_CountertopL_4X4_1>
            }
        }
    }

    def Scope "_materials"
    {
        def Material "M_CountertopL_4X4_0"
        {
            token outputs:surface.connect = </root/_materials/M_CountertopL_4X4_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_CountertopL_4X4_0/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/marbleBase2.jpg@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_CountertopL_4X4_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }

        def Material "M_CountertopL_4X4_1"
        {
            token outputs:surface.connect = </root/_materials/M_CountertopL_4X4_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_CountertopL_4X4_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_CountertopL_4X4_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/DarkWood2.tif@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_CountertopL_4X4_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_CountertopL_4X4_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

