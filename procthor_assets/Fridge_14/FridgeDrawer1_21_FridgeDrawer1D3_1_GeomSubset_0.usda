#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "FridgeDrawer1_21_FridgeDrawer1D3_1_GeomSubset_0"
    {
        def Mesh "FridgeDrawer1_21_FridgeDrawer1D3_1_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [0, 1, 3, 2]
            rel material:binding = </root/_materials/M_FridgeDrawer1D3_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.020602, 0.024838, -0.763819), (0.020609, 0.024838, -0.763819), (0.020602, 0.024846, -0.763819), (0.020609, 0.024846, -0.763819), (0.020602, 0.024838, -0.763819), (0.020609, 0.024838, -0.763819), (0.020602, 0.024846, -0.763819), (0.020609, 0.024846, -0.763819), (0.020602, 0.024838, -0.763819), (0.020609, 0.024838, -0.763819), (0.020602, 0.024846, -0.763819), (0.020609, 0.024846, -0.763819), (0.020602, 0.024838, -0.763819), (0.020609, 0.024838, -0.763819), (0.020602, 0.024846, -0.763819), (0.020609, 0.024846, -0.763819), (0.020602, 0.024838, -0.763819), (0.020609, 0.024838, -0.763819), (0.020602, 0.024846, -0.763819), (0.020609, 0.024846, -0.763819), (0.020602, 0.024838, -0.763819), (0.020609, 0.024838, -0.763819), (0.020602, 0.024846, -0.763819), (0.020609, 0.024846, -0.763819), (0.020602, 0.024838, -0.763819), (0.020609, 0.024838, -0.763819), (0.020602, 0.024846, -0.763819), (0.020609, 0.024846, -0.763819), (0.010795, 0.182303, -0.423765), (0.408959, 0.182303, -0.423765), (0.010795, -0.233905, -0.423765), (0.408959, -0.233905, -0.423765), (0.17197, 0.182303, -0.423765), (0.115062, 0.182303, -0.423765), (0.304691, 0.182303, -0.423765), (0.247783, 0.182303, -0.423765), (0.17197, -0.253225, -0.423765), (0.115285, -0.249116, -0.423765), (0.304468, -0.249116, -0.423765), (0.247783, -0.253225, -0.423765), (0.115062, 0.182303, -0.617046), (0.010795, 0.182303, -0.617046), (0.304691, 0.182303, -0.617046), (0.408959, 0.182303, -0.617046), (0.247783, 0.182303, -0.617046), (0.17197, 0.182303, -0.617046), (0.017765, 0.174244, -0.423765), (0.401989, 0.174244, -0.423765), (0.017765, -0.226797, -0.423765), (0.401989, -0.226797, -0.423765), (0.17197, 0.174244, -0.423765), (0.115062, 0.174244, -0.423765), (0.304691, 0.174244, -0.423765), (0.247783, 0.174244, -0.423765), (0.172188, -0.245166, -0.423765), (0.115939, -0.241088, -0.423765), (0.303814, -0.241088, -0.423765), (0.247565, -0.245166, -0.423765), (0.017765, 0.174244, -0.609469), (0.401989, 0.174244, -0.609469), (0.17197, 0.174244, -0.609469), (0.115062, 0.174244, -0.609469), (0.304691, 0.174244, -0.609469), (0.247783, 0.174244, -0.609469), (0.010795, 0.182303, -0.430903), (0.115062, 0.182303, -0.430903), (0.010795, -0.233905, -0.430903), (0.115285, -0.249116, -0.430903), (0.408959, -0.233905, -0.430903), (0.304468, -0.249116, -0.430903), (0.408959, 0.182303, -0.430903), (0.304691, 0.182303, -0.430903), (0.247783, -0.253225, -0.430903), (0.17197, -0.253225, -0.430903), (0.17197, 0.182303, -0.430903), (0.247783, 0.182303, -0.430903), (0.247565, -0.245166, -0.430903), (0.303814, -0.241088, -0.430903), (0.401989, -0.226797, -0.430903), (0.401989, 0.174244, -0.430903), (0.304691, 0.174244, -0.430903), (0.247783, 0.174244, -0.430903), (0.17197, 0.174244, -0.430903), (0.115062, 0.174244, -0.430903), (0.017765, 0.174244, -0.430903), (0.017765, -0.226797, -0.430903), (0.115939, -0.241088, -0.430903), (0.172188, -0.245166, -0.430903), (0.00984, 0.183407, -0.425226), (0.409913, 0.183407, -0.425226), (0.00984, -0.234879, -0.425226), (0.409913, -0.234879, -0.425226), (0.17197, 0.183407, -0.425226), (0.115062, 0.183407, -0.425226), (0.304691, 0.183407, -0.425226), (0.247783, 0.183407, -0.425226), (0.17194, -0.254329, -0.425226), (0.115195, -0.250215, -0.425226), (0.304558, -0.250215, -0.425226), (0.247813, -0.254329, -0.425226), (0.00984, 0.183407, -0.429443), (0.115062, 0.183407, -0.429443), (0.00984, -0.234879, -0.429443), (0.115195, -0.250215, -0.429443), (0.409913, -0.234879, -0.429443), (0.304558, -0.250215, -0.429443), (0.409913, 0.183407, -0.429443), (0.304691, 0.183407, -0.429443), (0.247813, -0.254329, -0.429443), (0.17194, -0.254329, -0.429443), (0.17197, 0.183407, -0.429443), (0.247783, 0.183407, -0.429443), (0.115285, -0.249116, -0.586846), (0.115269, -0.218756, -0.617046), (0.010795, -0.233905, -0.586846), (0.010795, -0.203545, -0.617046), (0.304484, -0.218756, -0.617046), (0.304468, -0.249116, -0.586846), (0.408959, -0.203545, -0.617046), (0.408959, -0.233905, -0.586846), (0.17197, -0.222865, -0.617046), (0.17197, -0.253225, -0.586846), (0.247783, -0.253225, -0.586846), (0.247783, -0.222865, -0.617046), (0.017765, -0.196437, -0.609469), (0.017765, -0.226797, -0.579269), (0.401989, -0.226797, -0.579269), (0.401989, -0.196437, -0.609469), (0.172172, -0.214806, -0.609469), (0.172188, -0.245166, -0.579269), (0.115939, -0.241088, -0.579269), (0.115875, -0.210728, -0.609469), (0.303879, -0.210728, -0.609469), (0.303814, -0.241088, -0.579269), (0.247581, -0.214806, -0.609469), (0.247565, -0.245166, -0.579269), (0.304478, -0.230374, -0.614748), (0.247783, -0.234484, -0.614748), (0.304473, -0.240223, -0.608201), (0.247783, -0.244333, -0.608201), (0.30447, -0.246805, -0.598403), (0.247783, -0.250914, -0.598403), (0.17197, -0.234484, -0.614748), (0.115275, -0.230374, -0.614748), (0.17197, -0.244333, -0.608201), (0.11528, -0.240223, -0.608201), (0.17197, -0.250914, -0.598403), (0.115284, -0.246805, -0.598403), (0.408959, -0.215164, -0.614748), (0.408959, -0.225013, -0.608201), (0.408959, -0.231594, -0.598403), (0.010795, -0.215164, -0.614748), (0.010795, -0.225013, -0.608201), (0.010795, -0.231594, -0.598403), (0.017765, -0.208055, -0.60717), (0.115899, -0.222346, -0.60717), (0.017765, -0.217905, -0.600623), (0.11592, -0.232196, -0.600623), (0.017765, -0.224486, -0.590826), (0.115934, -0.238777, -0.590826), (0.303854, -0.222346, -0.60717), (0.401989, -0.208055, -0.60717), (0.303833, -0.232196, -0.600623), (0.401989, -0.217905, -0.600623), (0.303819, -0.238777, -0.590826), (0.401989, -0.224486, -0.590826), (0.172178, -0.226424, -0.60717), (0.247575, -0.226424, -0.60717), (0.172184, -0.236274, -0.600623), (0.24757, -0.236274, -0.600623), (0.172187, -0.242855, -0.590826), (0.247566, -0.242855, -0.590826)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-172.42319, -111.27127), (-172.42319, -111.27127), (-172.42319, -111.27127), (-172.42319, -111.27127)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_FridgeDrawer1D3_0"
        {
            token outputs:surface.connect = </root/_materials/M_FridgeDrawer1D3_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (1, 1, 1)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_FridgeDrawer1D3_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Fridge.tga@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_FridgeDrawer1D3_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

