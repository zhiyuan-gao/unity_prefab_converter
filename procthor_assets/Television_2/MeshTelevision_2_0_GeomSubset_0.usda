#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshTelevision_2_0_GeomSubset_0"
    {
        def Mesh "MeshTelevision_2_0_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 21, 20, 22, 23, 24, 25, 26, 27, 99, 100, 22, 20, 23, 22, 100, 101, 23, 101, 102, 32, 26, 25, 34, 33, 90, 21, 35, 89, 21, 23, 32, 35, 25, 90, 89, 34, 24, 27, 100, 99, 101, 100, 27, 26, 102, 101, 26, 33]
            rel material:binding = </root/_materials/M_Television_2_0>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0.97050506, 0.24108091, 0.0000059716403), (1, 0, 0), (1, 0, 0), (1, 0, 0), (-1, 0, 0), (-0.97050905, 0.24106428, -0.0000056933663), (-1, 0, 0), (-1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0.717307, -0.6967573), (0, 0.717307, -0.6967573), (0, 0.717307, -0.6967573), (0, 0.717307, -0.6967573), (-0.6340977, 0.7732529, 0), (-0.6340977, 0.7732529, 0), (-0.6340977, 0.7732529, 0), (-0.6340977, 0.7732529, 0), (0, 0.96264863, 0.2707537), (0, 0.96264875, 0.27075374), (0, 0.96264875, 0.27075374), (0, 0.96264863, 0.2707537), (0.6340977, 0.7732529, 0), (0.6340977, 0.7732529, 0), (0.6340977, 0.7732529, 0), (0.6340977, 0.7732529, 0), (0, 0.96264875, 0.27075374), (0, 0.96264863, 0.2707537), (0, 0.96264863, 0.2707537), (0, 0.96264875, 0.27075374), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0.717307, -0.6967573), (0, 0.717307, -0.6967573), (0, 0.717307, -0.6967573), (0, 0.717307, -0.6967573)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.000799, -0.000799, 0.027231), (-0.000799, -0.000799, 0.027231), (0.000799, 0.000799, 0.027231), (-0.000799, 0.000799, 0.027231), (0.000799, -0.000799, 0.027231), (-0.000799, -0.000799, 0.027231), (0.000799, 0.000799, 0.027231), (-0.000799, 0.000799, 0.027231), (0.000799, -0.000799, 0.027231), (-0.000799, -0.000799, 0.027231), (0.000799, 0.000799, 0.027231), (-0.000799, 0.000799, 0.027231), (0.000799, -0.000799, 0.027231), (-0.000799, -0.000799, 0.027231), (0.000799, 0.000799, 0.027231), (-0.000799, 0.000799, 0.027231), (0.000799, -0.000799, 0.027231), (-0.000799, -0.000799, 0.027231), (0.000799, 0.000799, 0.027231), (-0.000799, 0.000799, 0.027231), (-0.60383, 0.000001, -0.314935), (-0.60383, -0.046285, -0.314935), (-0.60383, 0.000001, 0.427852), (-0.60383, -0.046285, 0.427852), (0.60383, 0.000001, -0.314935), (0.60383, -0.046285, -0.314935), (0.60383, -0.046285, 0.427852), (0.60383, 0.000001, 0.427852), (-0.60383, 0.000001, -0.392553), (-0.60383, -0.046285, -0.392553), (0.60383, -0.046285, -0.392553), (0.60383, 0.000001, -0.392553), (-0.57683, -0.068426, 0.405058), (0.57683, -0.068426, 0.405058), (0.57683, -0.068426, -0.236214), (-0.57683, -0.068426, -0.236214), (-0.54683, -0.068426, 0.362283), (0.54683, -0.068426, 0.362283), (0.54683, -0.068426, -0.206214), (-0.54683, -0.068426, -0.206214), (-0.57683, -0.073008, 0.405058), (-0.574818, -0.077867, 0.403045), (-0.569959, -0.079879, 0.398187), (0.569958, -0.079879, 0.398187), (0.574817, -0.077867, 0.403045), (0.57683, -0.073008, 0.405058), (0.54683, -0.073008, 0.362283), (0.548842, -0.077867, 0.364296), (0.553701, -0.079879, 0.369155), (-0.553702, -0.079879, 0.369155), (-0.548843, -0.077867, 0.364296), (-0.54683, -0.073008, 0.362283), (0.569958, -0.079879, -0.229342), (0.574817, -0.077867, -0.234201), (0.57683, -0.073008, -0.236214), (0.54683, -0.073008, -0.206214), (0.548842, -0.077867, -0.208226), (0.553701, -0.079879, -0.213085), (-0.569959, -0.079879, -0.229342), (-0.574818, -0.077867, -0.234201), (-0.57683, -0.073008, -0.236214), (-0.54683, -0.073008, -0.206214), (-0.548843, -0.077867, -0.208226), (-0.553702, -0.079879, -0.213085), (-0.60023, -0.052593, -0.318536), (-0.59719, -0.055693, -0.321576), (-0.592989, -0.056797, -0.325776), (0.592988, -0.056797, -0.325776), (0.597189, -0.055693, -0.321576), (0.600229, -0.052593, -0.318536), (0.592988, -0.056797, -0.381712), (0.597189, -0.055693, -0.385912), (0.600229, -0.052593, -0.388953), (-0.592989, -0.056797, -0.381712), (-0.59719, -0.055693, -0.385912), (-0.60023, -0.052593, -0.388953), (-0.000001, -0.077867, 0.403045), (0, -0.079879, 0.398187), (-0.000001, -0.079879, 0.369155), (-0.000001, -0.077867, 0.364296), (-0, -0.073008, 0.362283), (-0, -0.068426, 0.362283), (-0, -0.068426, -0.206214), (-0, -0.073008, -0.206214), (-0.000001, -0.077867, -0.208226), (-0.000001, -0.079879, -0.213085), (0, -0.079879, -0.229342), (-0.000001, -0.077867, -0.234201), (-0, -0.073008, -0.236214), (-0, -0.068426, -0.236214), (-0, -0.046285, -0.314935), (-0, -0.052593, -0.318536), (-0.000001, -0.055693, -0.321576), (-0, -0.056797, -0.325776), (-0, -0.056797, -0.381712), (-0.000001, -0.055693, -0.385912), (-0, -0.052593, -0.388953), (-0, -0.046285, -0.392553), (-0, 0.000001, -0.392553), (-0, 0.000001, -0.314935), (-0, 0.000001, 0.427852), (-0, -0.046285, 0.427852), (-0, -0.068426, 0.405058), (-0, -0.073008, 0.405058)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-43.72327, -18.17474), (-43.72195, -18.17474), (-43.72195, -18.173422), (-43.72327, -18.173422), (-43.344368, 0.733951), (-43.344368, 0.832056), (-44.918873, 0.832057), (-44.918873, 0.733947), (-43.344357, 0.749805), (-43.344357, 0.847917), (-44.91889, 0.84792), (-44.91889, 0.749808), (-44.323322, 1.00929), (-44.323322, -0.441467), (-43.14397, -0.441468), (-43.14397, 1.009286), (-43.064873, 0.599555), (-43.064873, 0.69602), (-44.323322, 0.69602), (-44.323322, 0.599554), (-43.064873, 0.599555), (-44.323322, 0.599554), (-44.323326, 0.553411), (-43.121143, 0.553411), (-44.91889, 0.84792), (-43.344357, 0.847917), (-43.511227, 0.894854), (-44.87057, 0.894859), (-44.323322, 0.613398), (-43.121315, 0.613397), (-43.17506, 0.770105), (-44.323322, 0.770106), (-43.344368, 0.733951), (-44.918873, 0.733947), (-44.870556, 0.687015), (-43.51124, 0.687015), (-45.525337, 0.613402), (-44.323322, 0.613398), (-44.323322, 0.770106), (-45.471584, 0.770106), (-45.50268, 1.00929), (-45.502678, -0.441474), (-44.323322, -0.441467), (-44.323322, 1.00929), (-44.323322, 0.599554), (-44.323322, 0.69602), (-45.58177, 0.69602), (-45.58177, 0.599555), (-44.323326, 0.553411), (-44.323322, 0.599554), (-45.58177, 0.599555), (-45.52551, 0.553411)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_Television_2_0"
        {
            token outputs:surface.connect = </root/_materials/M_Television_2_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.5709343, 0.61240906, 0.64705884)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_Television_2_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_Television_2_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

