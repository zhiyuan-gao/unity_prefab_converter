#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "LidMeshLaptopLid_30_1_GeomSubset_4"
    {
        def Mesh "LidMeshLaptopLid_30_1_GeomSubset_4"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4]
            int[] faceVertexIndices = [16, 17, 19, 18, 20, 21, 23, 22, 96, 97, 99, 98]
            rel material:binding = </root/_materials/M_LaptopLid_30_4>
            normal3f[] normals = [(0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 0, 0.99999994), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000632, 0.152604, -0.139944), (0.000632, 0.152604, -0.139944), (-0.000632, 0.153869, -0.139944), (0.000632, 0.153869, -0.139944), (-0.000632, 0.152604, -0.139944), (0.000632, 0.152604, -0.139944), (-0.000632, 0.153869, -0.139944), (0.000632, 0.153869, -0.139944), (-0.000632, 0.152604, -0.139944), (0.000632, 0.152604, -0.139944), (-0.000632, 0.153869, -0.139944), (0.000632, 0.153869, -0.139944), (-0.000632, 0.152604, -0.139944), (0.000632, 0.152604, -0.139944), (-0.000632, 0.153869, -0.139944), (0.000632, 0.153869, -0.139944), (-0.000632, 0.152604, -0.139944), (0.000632, 0.152604, -0.139944), (-0.000632, 0.153869, -0.139944), (0.000632, 0.153869, -0.139944), (-0.000632, 0.152604, -0.139944), (0.000632, 0.152604, -0.139944), (-0.000632, 0.153869, -0.139944), (0.000632, 0.153869, -0.139944), (-0.214975, 0.160227, -0.129104), (0.214975, 0.160227, -0.129104), (-0.214975, 0.146104, -0.129104), (0.214975, 0.146104, -0.129104), (-0.154611, 0.146104, -0.129104), (-0.154611, 0.160227, -0.129104), (0.154611, 0.146104, -0.129104), (0.154611, 0.160227, -0.129104), (0.154611, 0.156151, -0.146059), (0.214975, 0.156151, -0.146059), (0.214975, 0.150318, -0.146059), (0.154611, 0.150318, -0.146059), (-0.214975, 0.156151, -0.146059), (-0.154611, 0.156151, -0.146059), (-0.154611, 0.150318, -0.146059), (-0.214975, 0.150318, -0.146059), (0.154611, 0.160227, -0.142022), (0.214975, 0.160227, -0.142022), (0.214975, 0.146104, -0.142021), (0.154611, 0.146104, -0.142022), (-0.214975, 0.160227, -0.142022), (-0.154611, 0.160227, -0.142022), (-0.154611, 0.146104, -0.142022), (-0.214975, 0.146104, -0.142021), (0.153728, 0.157727, 0.164694), (0.212475, 0.157727, 0.11723), (0.212475, 0.157727, -0.129104), (0.154611, 0.157727, -0.129104), (-0.212475, 0.146104, 0.11723), (-0.212475, 0.146104, -0.129104), (-0.212475, 0.157727, 0.11723), (-0.212475, 0.157727, -0.129104), (0.212475, 0.146104, -0.129104), (0.212475, 0.146104, 0.11723), (0.153728, 0.146104, 0.164694), (-0.153727, 0.146104, 0.164694), (-0.153727, 0.157727, 0.164694), (-0.154611, 0.157727, -0.129104), (-0.154611, 0.157727, -0.134675), (-0.154611, 0.148604, -0.134675), (0.154611, 0.157727, -0.134675), (0.154611, 0.148604, -0.134675), (0, 0.157727, -0.129104), (0, 0.146104, -0.129104), (0, 0.146104, 0.164694), (0, 0.157727, 0.164694), (0, 0.146104, 0.121018), (-0.183385, 0.146104, 0.121018), (-0.212475, 0.146104, 0.089309), (-0.212475, 0.157727, 0.089309), (-0.154169, 0.157727, 0.089309), (0, 0.157727, 0.089309), (0.154169, 0.157727, 0.089309), (0.212475, 0.157727, 0.089309), (0.212475, 0.146104, 0.089309), (0.183385, 0.146104, 0.121018), (0.212475, 0.146104, -0.089786), (0.183648, 0.146104, -0.089786), (0, 0.146104, -0.089786), (-0.183648, 0.146104, -0.089786), (-0.212475, 0.146104, -0.089786), (-0.212475, 0.157727, -0.089786), (-0.15439, 0.157727, -0.089786), (0, 0.157727, -0.089786), (0.15439, 0.157727, -0.089786), (0.212475, 0.157727, -0.089786), (0.183385, 0.149589, 0.121018), (0, 0.149589, 0.121018), (0, 0.149589, -0.089786), (0.183648, 0.149589, -0.089786), (-0.183385, 0.149589, 0.121018), (-0.183648, 0.149589, -0.089786), (0.043544, 0.159535, -0.033135), (-0.043544, 0.159535, -0.033135), (0.043544, 0.159535, 0.05819), (-0.043544, 0.159535, 0.05819), (0.183385, 0.149389, 0.121018), (0, 0.149389, 0.121018), (0, 0.149389, -0.089786), (0.183648, 0.149389, -0.089786), (-0.183385, 0.149389, 0.121018), (-0.183648, 0.149389, -0.089786)]
            bool[] primvars:sharp_face = [0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(0, -19.673967), (1, -19.673967), (1, -18.673967), (0, -18.673967), (0, -19.673967), (1, -19.673967), (1, -18.673967), (0, -18.673967), (-1.939276, 0.055384), (-1.710585, 0.055384), (-1.710585, 0.295205), (-1.939276, 0.295205)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_LaptopLid_30_4"
        {
            token outputs:surface.connect = </root/_materials/M_LaptopLid_30_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_LaptopLid_30_4/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Laptop_Detail_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_LaptopLid_30_4/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

