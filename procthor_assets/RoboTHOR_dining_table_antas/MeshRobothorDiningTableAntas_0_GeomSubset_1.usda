#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshRobothorDiningTableAntas_0_GeomSubset_1"
    {
        def Mesh "MeshRobothorDiningTableAntas_0_GeomSubset_1"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 5, 4, 1, 2, 6, 5, 2, 3, 7, 6, 3, 0, 4, 7, 4, 5, 9, 8, 5, 6, 10, 9, 6, 7, 11, 10, 7, 4, 8, 11, 8, 9, 13, 12, 9, 10, 14, 13, 10, 11, 15, 14, 11, 8, 12, 15, 21, 20, 16, 17, 22, 21, 17, 18, 23, 22, 18, 19, 20, 23, 19, 16, 20, 21, 22, 23, 29, 28, 24, 25, 30, 29, 25, 26, 31, 30, 26, 27, 28, 31, 27, 24, 28, 29, 30, 31, 37, 36, 32, 33, 38, 37, 33, 34, 39, 38, 34, 35, 36, 39, 35, 32, 36, 37, 38, 39, 45, 44, 40, 41, 46, 45, 41, 42, 47, 46, 42, 43, 44, 47, 43, 40, 44, 45, 46, 47]
            rel material:binding = </root/_materials/M_RobothorDiningTableAntas_1>
            normal3f[] normals = [(-0.0012859744, 0.9999991, -0.00048207457), (-0.0012859744, 0.9999991, -0.00048207457), (-0.0012859744, 0.9999991, -0.00048207457), (-0.0012859744, 0.9999991, -0.00048207457), (0.9999991, 0.001288095, 0.00046135872), (0.9999991, 0.001288095, 0.00046135872), (0.9999991, 0.001288095, 0.00046135872), (0.9999991, 0.001288095, 0.00046135872), (0.001286397, -0.99999905, 0.000500129), (0.001286397, -0.99999905, 0.000500129), (0.001286397, -0.99999905, 0.000500129), (0.001286397, -0.99999905, 0.000500129), (-0.99999905, -0.0012879367, -0.00046173114), (-0.99999905, -0.0012879367, -0.00046173114), (-0.99999905, -0.0012879367, -0.00046173114), (-0.99999905, -0.0012879367, -0.00046173114), (0.0004433802, -0.0004775407, -0.99999976), (0.00047258064, -0.00047705282, -0.99999976), (0.00047258066, -0.00047705288, -0.9999998), (0.0004433796, -0.00047754112, -0.9999998), (0.00047258064, -0.00047705282, -0.99999976), (0.0004723968, -0.0005070529, -0.99999976), (0.00047239638, -0.0005070534, -0.9999997), (0.00047258066, -0.00047705288, -0.9999998), (0.0004723968, -0.0005070529, -0.99999976), (0.0004431961, -0.0005075419, -0.99999976), (0.00044319537, -0.0005075413, -0.9999998), (0.00047239638, -0.0005070534, -0.9999997), (0.0004431961, -0.0005075419, -0.99999976), (0.0004433802, -0.0004775407, -0.99999976), (0.0004433796, -0.00047754112, -0.9999998), (0.00044319537, -0.0005075413, -0.9999998), (0.0012862921, -0.9999991, 0.00049158063), (0.0012862921, -0.9999991, 0.00049158063), (0.0012862921, -0.9999991, 0.00049158063), (0.0012862921, -0.9999991, 0.00049158063), (-0.99999905, -0.0012869026, -0.00045891383), (-0.99999905, -0.0012869026, -0.00045891383), (-0.99999905, -0.0012869026, -0.00045891383), (-0.99999905, -0.0012869026, -0.00045891383), (-0.0012863178, 0.9999991, -0.0004915803), (-0.0012863178, 0.9999991, -0.0004915803), (-0.0012863178, 0.9999991, -0.0004915803), (-0.0012863178, 0.9999991, -0.0004915803), (0.99999905, 0.0012851657, 0.00045965606), (0.99999905, 0.0012851657, 0.00045965606), (0.99999905, 0.0012851657, 0.00045965606), (0.99999905, 0.0012851657, 0.00045965606), (-0.9999991, -0.0012788462, -0.0004610075), (-0.9999991, -0.0012788462, -0.0004610075), (-0.9999991, -0.0012788462, -0.0004610075), (-0.9999991, -0.0012788462, -0.0004610075), (-0.0012864135, 0.99999905, -0.0004925244), (-0.0012864135, 0.99999905, -0.0004925244), (-0.0012864135, 0.99999905, -0.0004925244), (-0.0012864135, 0.99999905, -0.0004925244), (0.9999991, 0.0012791685, 0.0004624343), (0.9999991, 0.0012791685, 0.0004624343), (0.9999991, 0.0012791685, 0.0004624343), (0.9999991, 0.0012791685, 0.0004624343), (0.0012864275, -0.9999991, 0.00049248815), (0.0012864275, -0.9999991, 0.00049248815), (0.0012864275, -0.9999991, 0.00049248815), (0.0012864275, -0.9999991, 0.00049248815), (0.0004650153, -0.0004881233, -0.99999976), (0.0004650153, -0.0004881233, -0.99999976), (0.0004650153, -0.0004881233, -0.99999976), (0.0004650153, -0.0004881233, -0.99999976), (-0.99999905, -0.0012958371, -0.00046171123), (-0.99999905, -0.0012958371, -0.00046171123), (-0.99999905, -0.0012958371, -0.00046171123), (-0.99999905, -0.0012958371, -0.00046171123), (-0.0012864296, 0.99999905, -0.0004925249), (-0.0012864296, 0.99999905, -0.0004925249), (-0.0012864296, 0.99999905, -0.0004925249), (-0.0012864296, 0.99999905, -0.0004925249), (0.99999905, 0.0012966219, 0.00046171361), (0.99999905, 0.0012966219, 0.00046171361), (0.99999905, 0.0012966219, 0.00046171361), (0.99999905, 0.0012966219, 0.00046171361), (0.0012855859, -0.9999991, 0.00049252436), (0.0012855859, -0.9999991, 0.00049252436), (0.0012855859, -0.9999991, 0.00049252436), (0.0012855859, -0.9999991, 0.00049252436), (0.00046502028, -0.0004876057, -0.9999998), (0.00046502028, -0.0004876057, -0.9999998), (0.00046502028, -0.0004876057, -0.9999998), (0.00046502028, -0.0004876057, -0.9999998), (-0.99999917, -0.0012814195, -0.00046104973), (-0.99999917, -0.0012814195, -0.00046104973), (-0.99999917, -0.0012814195, -0.00046104973), (-0.99999917, -0.0012814195, -0.00046104973), (-0.0012847251, 0.9999991, -0.0004925428), (-0.0012847251, 0.9999991, -0.0004925428), (-0.0012847251, 0.9999991, -0.0004925428), (-0.0012847251, 0.9999991, -0.0004925428), (0.9999991, 0.0012765535, 0.00046105), (0.9999991, 0.0012765535, 0.00046105), (0.9999991, 0.0012765535, 0.00046105), (0.9999991, 0.0012765535, 0.00046105), (0.0012578442, -0.99999905, 0.0004918296), (0.0012578442, -0.99999905, 0.0004918296), (0.0012578442, -0.99999905, 0.0004918296), (0.0012578442, -0.99999905, 0.0004918296), (0.00049246225, -0.0004700165, -0.99999976), (0.00049246225, -0.0004700165, -0.99999976), (0.00049246225, -0.0004700165, -0.99999976), (0.00049246225, -0.0004700165, -0.99999976), (-0.9999991, -0.0012807011, -0.0004610486), (-0.9999991, -0.0012807011, -0.0004610486), (-0.9999991, -0.0012807011, -0.0004610486), (-0.9999991, -0.0012807011, -0.0004610486), (-0.0012856313, 0.99999905, -0.0004925361), (-0.0012856313, 0.99999905, -0.0004925361), (-0.0012856313, 0.99999905, -0.0004925361), (-0.0012856313, 0.99999905, -0.0004925361), (0.99999905, 0.001313337, 0.00046245987), (0.99999905, 0.001313337, 0.00046245987), (0.99999905, 0.001313337, 0.00046245987), (0.99999905, 0.001313337, 0.00046245987), (0.0012855488, -0.99999905, 0.0004925101), (0.0012855488, -0.99999905, 0.0004925101), (0.0012855488, -0.99999905, 0.0004925101), (0.0012855488, -0.99999905, 0.0004925101), (0.0004924537, -0.00050513, -0.99999976), (0.0004924537, -0.00050513, -0.99999976), (0.0004924537, -0.00050513, -0.99999976), (0.0004924537, -0.00050513, -0.99999976)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.575556, 0.292624, 0.26508), (0.564243, 0.29409, 0.265606), (0.565002, -0.295708, 0.265897), (-0.574796, -0.297175, 0.265371), (-0.575518, 0.292585, 0.183993), (0.56428, 0.294051, 0.18452), (0.56504, -0.295749, 0.18481), (-0.574759, -0.297215, 0.184284), (-0.550655, 0.267785, 0.184016), (0.539481, 0.269188, 0.18452), (0.540176, -0.27095, 0.184786), (-0.549961, -0.272352, 0.184282), (-0.550692, 0.267825, 0.264432), (0.539444, 0.269227, 0.264936), (0.540139, -0.27091, 0.265202), (-0.549998, -0.272313, 0.264698), (-0.580087, -0.301147, 0.262728), (-0.580125, -0.27145, 0.262713), (-0.56185, -0.271426, 0.262721), (-0.561812, -0.301124, 0.262736), (-0.579759, -0.301497, -0.447731), (-0.579797, -0.271799, -0.447746), (-0.561521, -0.271776, -0.447737), (-0.561483, -0.301473, -0.447723), (-0.580827, 0.274221, 0.262444), (-0.580866, 0.303919, 0.26243), (-0.56259, 0.303942, 0.262438), (-0.562552, 0.274244, 0.262453), (-0.580499, 0.273871, -0.448015), (-0.580537, 0.303569, -0.448029), (-0.562262, 0.303593, -0.448021), (-0.562223, 0.273895, -0.448006), (0.550296, -0.299693, 0.26325), (0.550258, -0.269995, 0.263235), (0.568534, -0.269971, 0.263244), (0.568572, -0.29967, 0.263258), (0.550624, -0.300042, -0.44721), (0.550586, -0.270344, -0.447224), (0.568862, -0.270321, -0.447215), (0.5689, -0.300019, -0.447201), (0.549556, 0.275675, 0.262966), (0.549518, 0.305373, 0.262952), (0.567792, 0.305397, 0.26296), (0.567832, 0.275698, 0.262975), (0.549884, 0.275325, -0.447493), (0.549846, 0.305024, -0.447508), (0.568122, 0.305047, -0.447499), (0.56816, 0.275349, -0.447484), (-0.655765, 0.370161, 0.287242), (-0.653296, 0.370166, 0.289714), (-0.653298, 0.372635, 0.287242), (-0.652334, -0.377364, 0.287611), (-0.652338, -0.374892, 0.29008), (-0.654808, -0.374897, 0.287609), (0.645191, -0.373224, 0.288209), (0.64272, -0.373226, 0.290678), (0.642724, -0.375698, 0.288209), (0.641759, 0.374302, 0.28784), (0.641761, 0.371833, 0.290312), (0.644233, 0.371834, 0.287843), (-0.655756, 0.370151, 0.267475), (-0.653289, 0.372625, 0.267475), (-0.653285, 0.370153, 0.265006), (-0.652325, -0.377374, 0.267845), (-0.654799, -0.374906, 0.267843), (-0.652327, -0.374904, 0.265373), (0.645201, -0.373234, 0.268443), (0.642733, -0.375708, 0.268443), (0.642731, -0.373239, 0.265971), (0.641768, 0.374292, 0.268073), (0.644242, 0.371825, 0.268075), (0.641773, 0.37182, 0.265604)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-10.446086, 0.78953), (-8.219913, 0.788504), (-8.21984, 0.946876), (-10.446012, 0.947903), (-9.178131, 0.410006), (-10.330081, 0.410575), (-10.330161, 0.252201), (-9.178209, 0.251634), (-8.219917, 0.988831), (-10.446084, 0.987804), (-10.446011, 0.829431), (-8.219842, 0.830459), (-9.178208, 0.371348), (-10.33016, 0.370781), (-10.330084, 0.212408), (-9.178131, 0.212975), (-10.446938, 0.149761), (-8.220768, 0.146899), (-8.269201, 0.195458), (-10.398376, 0.198198), (-8.220768, 0.146899), (-8.219283, 1.298852), (-8.267846, 1.250417), (-8.269201, 0.195458), (-8.219283, 1.298852), (-10.445456, 1.301716), (-10.39702, 1.253155), (-8.267846, 1.250417), (-10.445456, 1.301716), (-10.446938, 0.149761), (-10.398376, 0.198198), (-10.39702, 1.253155), (-10.8552, 0.619351), (-8.726021, 0.620334), (-8.726093, 0.777395), (-10.855271, 0.776412), (-10.27149, 0.174003), (-9.216531, 0.174522), (-9.216609, 0.331584), (-10.271566, 0.331064), (-8.72602, 0.737371), (-10.855197, 0.738356), (-10.85527, 0.581293), (-8.726089, 0.580311), (-10.271566, 0.13558), (-9.216607, 0.13506), (-9.216531, 0.292121), (-10.271488, 0.292641), (-9.373847, -0.014934), (-9.315845, -0.014905), (-9.316528, 1.372716), (-9.37453, 1.372688), (-9.521671, 1.373071), (-9.557365, 1.373091), (-9.558006, -0.014522), (-9.522314, -0.014535), (-9.392884, -0.014901), (-9.334882, -0.014929), (-9.334198, 1.372684), (-9.3922, 1.372714), (-9.397096, -0.014542), (-9.361401, -0.014525), (-9.362042, 1.373099), (-9.397737, 1.373083), (-9.786964, 0.569896), (-9.787039, 0.511893), (-9.751345, 0.511847), (-9.75127, 0.56985), (-9.424256, -0.014542), (-9.366252, -0.014514), (-9.366935, 1.373102), (-9.424939, 1.373073), (-9.393455, 1.373081), (-9.429147, 1.373097), (-9.42979, -0.014524), (-9.394095, -0.01454), (-9.456993, -0.014513), (-9.398988, -0.014541), (-9.398306, 1.373073), (-9.45631, 1.373101), (-9.461204, -0.014534), (-9.425508, -0.014517), (-9.426152, 1.373092), (-9.461844, 1.373075), (-9.81413, 0.569898), (-9.814205, 0.511892), (-9.778511, 0.511846), (-9.778434, 0.569852), (-9.488364, -0.014542), (-9.43036, -0.014514), (-9.431043, 1.373102), (-9.489047, 1.373073), (-9.457562, 1.37308), (-9.493258, 1.373097), (-9.493898, -0.014521), (-9.458203, -0.01454), (-9.521101, -0.014511), (-9.463098, -0.014539), (-9.462414, 1.373071), (-9.52042, 1.373099), (-9.525311, -0.014534), (-9.489617, -0.014517), (-9.490258, 1.373092), (-9.525952, 1.373075), (-9.841294, 0.569897), (-9.841369, 0.511893), (-9.805674, 0.511847), (-9.805599, 0.569851), (-9.552472, -0.014541), (-9.494469, -0.014513), (-9.495151, 1.373101), (-9.553155, 1.373074), (-9.535371, 1.373081), (-9.571066, 1.373097), (-9.571707, -0.014521), (-9.536014, -0.01454), (-9.598909, -0.014514), (-9.540905, -0.014542), (-9.540222, 1.373074), (-9.598227, 1.373102), (-9.60312, -0.014538), (-9.567425, -0.014521), (-9.568066, 1.373096), (-9.603761, 1.373078), (-9.86846, 0.569897), (-9.868533, 0.511893), (-9.832838, 0.511847), (-9.832764, 0.569851)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_RobothorDiningTableAntas_1"
        {
            token outputs:surface.connect = </root/_materials/M_RobothorDiningTableAntas_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_RobothorDiningTableAntas_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_RobothorDiningTableAntas_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDiningTableAntas_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_RobothorDiningTableAntas_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

