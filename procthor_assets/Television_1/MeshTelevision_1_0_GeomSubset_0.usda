#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshTelevision_1_0_GeomSubset_0"
    {
        def Mesh "MeshTelevision_1_0_GeomSubset_0"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 3, 2, 55, 54, 56, 57, 59, 58, 60, 61, 61, 60, 62, 63, 63, 62, 64, 65, 51, 53, 60, 58, 60, 53, 52, 62, 62, 52, 50, 64, 55, 68, 69, 54, 59, 70, 71, 58, 70, 72, 73, 71, 72, 65, 64, 73, 51, 58, 71, 66, 71, 73, 67, 66, 73, 64, 50, 67, 63, 65, 55, 57, 65, 72, 68, 55]
            rel material:binding = </root/_materials/M_Television_1_0>
            normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, -2.2948203e-8), (0, -1, -2.2948203e-8), (0, -1, -2.258064e-8), (0, -1, -2.4050818e-8), (0, -1, -2.4050818e-8), (0, -1, -2.258064e-8), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, -1, -2.2948203e-8), (0, -1, 0), (0, -1, 0), (0, -1, -2.2948203e-8), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0.000002122849, 0, 1), (0, 0, 1), (0, 0, 1), (-1.5994459e-7, 0, 1), (0, 0, 1), (-0.0000020142506, 0, 1), (0.0000014681583, 0, 1), (0, 0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.000743, -0.017617, 0.09051), (0.000743, -0.017617, 0.09051), (-0.000743, -0.01613, 0.09051), (0.000743, -0.01613, 0.09051), (-0.000743, -0.017617, 0.09051), (0.000743, -0.017617, 0.09051), (-0.000743, -0.01613, 0.09051), (0.000743, -0.01613, 0.09051), (-0.000743, -0.017617, 0.09051), (0.000743, -0.017617, 0.09051), (-0.000743, -0.01613, 0.09051), (0.000743, -0.01613, 0.09051), (-0.000743, -0.017617, 0.09051), (0.000743, -0.017617, 0.09051), (-0.000743, -0.01613, 0.09051), (0.000743, -0.01613, 0.09051), (-0.000743, -0.017617, 0.09051), (0.000743, -0.017617, 0.09051), (-0.000743, -0.01613, 0.09051), (0.000743, -0.01613, 0.09051), (-0.528617, -0.048407, -0.203823), (-0, -0.048407, -0.203823), (-0.528617, -0.025255, -0.203823), (-0, -0.025255, -0.203823), (-0.528617, -0.048407, 0.372387), (-0.528617, -0.025255, 0.372387), (0.528617, -0.048407, 0.372387), (0.528617, -0.048407, -0.203823), (0.528617, -0.025255, -0.203823), (0.528617, -0.025255, 0.372387), (-0.523093, -0.053325, 0.372387), (-0.523093, -0.053325, -0.198383), (-0, -0.053325, -0.198383), (0.523093, -0.053325, -0.198383), (0.523093, -0.053325, 0.372387), (0.523093, -0.020336, 0.372387), (0.523093, -0.020336, -0.198383), (-0, -0.020336, -0.198383), (-0.523093, -0.020336, -0.198383), (-0.523093, -0.020336, 0.372387), (-0.513724, -0.058492, 0.372387), (-0.513724, -0.058492, -0.184503), (-0, -0.058492, -0.184503), (0.513724, -0.058492, -0.184503), (0.513724, -0.058492, 0.372387), (0.513724, -0.01517, 0.372387), (0.513724, -0.01517, -0.184503), (-0, -0.01517, -0.184503), (-0.513724, -0.01517, -0.184503), (-0.513724, -0.01517, 0.372387), (-0, -0.04621, 0.362147), (-0, -0.04621, -0.138992), (-0.485345, -0.04621, 0.362147), (-0.485345, -0.04621, -0.138992), (-0, -0.016874, -0.159495), (-0, -0.016874, 0.372387), (-0.504356, -0.016874, -0.159495), (-0.504356, -0.016874, 0.372387), (-0, -0.053996, -0.138992), (-0, -0.053996, -0.159495), (-0.485345, -0.053996, -0.138992), (-0.504356, -0.053996, -0.159495), (-0.485345, -0.053996, 0.362147), (-0.504356, -0.053996, 0.372387), (-0, -0.053996, 0.362147), (-0, -0.053996, 0.372387), (0.485345, -0.04621, -0.138992), (0.485345, -0.04621, 0.362147), (0.504356, -0.016874, 0.372387), (0.504356, -0.016874, -0.159495), (0.504356, -0.053996, -0.159495), (0.485345, -0.053996, -0.138992), (0.504356, -0.053996, 0.372387), (0.485345, -0.053996, 0.362147), (0.508794, -0.053996, 0.372387), (0.508794, -0.021662, 0.372387), (-0.508567, -0.021662, 0.372387), (-0.508567, -0.053996, 0.372387), (-0.507128, -0.059256, -0.170185), (-0.504356, -0.056787, -0.159495), (-0, -0.059256, -0.170185), (-0, -0.056787, -0.159495), (-0.504356, -0.056787, 0.372387), (-0.507128, -0.059256, 0.372387), (-0.507128, -0.014405, 0.372387), (-0.507128, -0.014405, -0.170185), (-0, -0.014405, -0.170185), (0.507128, -0.059256, -0.170185), (0.504356, -0.056787, -0.159495), (0.504356, -0.056787, 0.372387), (0.507128, -0.059256, 0.372387), (0.507128, -0.014405, 0.372387), (0.507128, -0.014405, -0.170185), (-0, -0.04621, 0.338067), (-0, -0.04621, -0.114911), (-0.459001, -0.04621, 0.338067), (-0.459001, -0.04621, -0.114911), (0.459001, -0.04621, -0.114911), (0.459001, -0.04621, 0.338067), (-0, -0.035121, 0.338067), (-0, -0.035121, -0.114911), (-0.459001, -0.035121, 0.338067), (-0.459001, -0.035121, -0.114911), (0.459001, -0.035121, -0.114911), (0.459001, -0.035121, 0.338067)]
            bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-43.607567, -18.175053), (-43.606327, -18.175053), (-43.606327, -18.173815), (-43.607567, -18.173815), (-44.244965, -0.320143), (-44.244965, 0.71869), (-45.23004, 0.718696), (-45.230034, -0.320142), (-44.24497, 0.130692), (-44.24497, 0.170748), (-45.19291, 0.170748), (-45.23004, 0.130697), (-45.23004, 0.130697), (-45.19291, 0.170748), (-45.19291, 1.14953), (-45.23004, 1.169535), (-45.23004, 1.169535), (-45.19291, 1.14953), (-44.244965, 1.14953), (-44.24497, 1.169535), (-44.229134, 0.927875), (-45.17732, 0.927874), (-45.177315, 0.912665), (-44.229134, 0.912663), (-43.544098, 0.940463), (-43.5441, 0.955668), (-44.52319, 0.955665), (-44.523197, 0.940463), (-45.177296, 0.941766), (-45.177288, 0.926557), (-44.22914, 0.926561), (-44.229134, 0.941763), (-44.244965, -0.320143), (-43.25989, -0.320142), (-43.25989, 0.718691), (-44.244965, 0.71869), (-44.24497, 0.130692), (-43.259895, 0.130697), (-43.297028, 0.170743), (-44.24497, 0.170748), (-43.259895, 0.130697), (-43.259895, 1.169531), (-43.297028, 1.149533), (-43.297028, 0.170743), (-43.259895, 1.169531), (-44.24497, 1.169535), (-44.244965, 1.14953), (-43.297028, 1.149533), (-44.229134, 0.927875), (-44.229134, 0.912663), (-43.280956, 0.91267), (-43.28096, 0.927874), (-43.54421, 0.969566), (-44.523087, 0.969565), (-44.523087, 0.954352), (-43.54421, 0.954353), (-43.280987, 0.941766), (-44.229134, 0.941763), (-44.22914, 0.926561), (-43.28098, 0.926557), (-45.23007, 0.858514), (-44.244965, 0.858513), (-44.244965, 0.931019), (-45.23007, 0.93102), (-44.244965, 0.858513), (-43.259865, 0.858514), (-43.259865, 0.93102), (-44.244965, 0.931019)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_Television_1_0"
        {
            token outputs:surface.connect = </root/_materials/M_Television_1_0/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor = (0.19852942, 0.19852942, 0.19852942)
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_Television_1_0/Image_Texture.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/HammeredMetal_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_Television_1_0/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

