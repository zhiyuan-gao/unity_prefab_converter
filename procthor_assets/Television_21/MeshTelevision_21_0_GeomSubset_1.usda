#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "MeshTelevision_21_0_GeomSubset_1"
    {
        def Mesh "MeshTelevision_21_0_GeomSubset_1"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [4, 5, 7, 6]
            rel material:binding = </root/_materials/M_Television_21_1>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(0.0008, -0.017074, 0.059487), (-0.0008, -0.017074, 0.059487), (0.0008, -0.015476, 0.059487), (-0.0008, -0.015476, 0.059487), (0.0008, -0.017074, 0.059487), (-0.0008, -0.017074, 0.059487), (0.0008, -0.015476, 0.059487), (-0.0008, -0.015476, 0.059487), (0.0008, -0.017074, 0.059487), (-0.0008, -0.017074, 0.059487), (0.0008, -0.015476, 0.059487), (-0.0008, -0.015476, 0.059487), (0.0008, -0.017074, 0.059487), (-0.0008, -0.017074, 0.059487), (0.0008, -0.015476, 0.059487), (-0.0008, -0.015476, 0.059487), (0.0008, -0.017074, 0.059487), (-0.0008, -0.017074, 0.059487), (0.0008, -0.015476, 0.059487), (-0.0008, -0.015476, 0.059487), (0.537467, -0.016275, -0.243309), (-0.537467, -0.016275, -0.243309), (-0.537467, -0.06256, -0.243309), (0.537467, -0.06256, -0.243309), (-0.537467, -0.06256, -0.158248), (-0.537467, -0.06256, 0.391793), (-0.537467, -0.016275, -0.159396), (-0.537467, -0.016275, 0.391793), (0.537467, -0.06256, 0.391793), (0.537467, -0.016275, 0.391793), (0.537467, -0.016275, -0.158248), (0.537467, -0.06256, -0.158248), (0.522708, -0.072666, -0.226614), (0.522708, -0.072666, -0.170606), (-0.522708, -0.072666, -0.226614), (-0.522708, -0.072666, -0.170606), (0.351311, -0.06256, 0.391793), (0.351311, -0.06256, -0.185005), (0.351312, -0.072666, -0.197363), (0.351312, -0.072666, -0.250334), (0.351311, -0.06256, -0.267029), (0.351311, -0.016275, -0.267029), (0.351311, -0.016275, -0.185005), (0.351311, -0.016275, 0.391793), (0.175656, -0.06256, 0.391793), (0.175656, -0.06256, -0.19479), (0.175656, -0.072666, -0.207148), (0.175656, -0.072666, -0.260687), (0.175656, -0.06256, -0.277382), (0.175656, -0.016275, -0.277382), (0.175656, -0.016275, -0.19479), (0.175656, -0.016275, 0.391793), (0, -0.06256, 0.391793), (-0, -0.06256, -0.200167), (-0, -0.072666, -0.212525), (0, -0.072666, -0.266376), (0, -0.06256, -0.283071), (0, -0.016275, -0.283071), (-0, -0.016275, -0.200167), (0, -0.016275, 0.391793), (-0.175656, -0.06256, 0.391793), (-0.175656, -0.06256, -0.19479), (-0.175656, -0.072666, -0.207148), (-0.175656, -0.072666, -0.260687), (-0.175656, -0.06256, -0.277382), (-0.175656, -0.016275, -0.277382), (-0.175656, -0.016275, -0.19479), (-0.175656, -0.016275, 0.391793), (-0.351312, -0.06256, 0.391793), (-0.351311, -0.06256, -0.185005), (-0.351312, -0.072666, -0.197363), (-0.351312, -0.072666, -0.250334), (-0.351312, -0.06256, -0.267029), (-0.351312, -0.016275, -0.267029), (-0.351311, -0.016275, -0.185005), (-0.351312, -0.016275, 0.391793), (0.508467, -0.06256, -0.139795), (0.508467, -0.06256, 0.362793), (0.34696, -0.06256, -0.139796), (0.351311, -0.06256, 0.362793), (-0.508467, -0.06256, 0.362793), (-0.351312, -0.06256, 0.362793), (-0.346961, -0.06256, -0.139796), (-0.508467, -0.06256, -0.139795), (0.175656, -0.06256, 0.362793), (0.173752, -0.06256, -0.139796), (0, -0.06256, 0.362793), (-0, -0.06256, -0.139796), (-0.175656, -0.06256, 0.362793), (-0.173752, -0.06256, -0.139796), (0.50114, -0.048999, -0.136174), (0.50114, -0.048999, 0.359172), (0.34196, -0.048999, -0.136174), (0.346249, -0.048999, 0.359172), (-0.50114, -0.048999, 0.359172), (-0.346249, -0.048999, 0.359172), (-0.341962, -0.048999, -0.136174), (-0.50114, -0.048999, -0.136174), (0.173125, -0.048999, 0.359172), (0.171248, -0.048999, -0.136174), (0, -0.048999, 0.359172), (-0, -0.048999, -0.136174), (-0.173125, -0.048999, 0.359172), (-0.171248, -0.048999, -0.136174), (-0.351925, -0.016275, -0.274411), (-0.544467, -0.016275, -0.249878), (-0.544467, -0.06256, -0.249878), (-0.351925, -0.06256, -0.274411), (-0.544467, -0.06256, -0.158248), (-0.544467, -0.06256, 0.398793), (-0.544467, -0.016275, -0.159396), (-0.544467, -0.016275, 0.398793), (0.544467, -0.06256, 0.398793), (0.544467, -0.016275, 0.398793), (0.544467, -0.016275, -0.158248), (0.544467, -0.06256, -0.158248), (0.544467, -0.016275, -0.249878), (0.544467, -0.06256, -0.249878), (-0.351312, -0.016275, 0.398793), (-0.351312, -0.06256, 0.398793), (0.351924, -0.016275, -0.274411), (0.351925, -0.06256, -0.274411), (0.351311, -0.016275, 0.398793), (0.351311, -0.06256, 0.398793), (0.175869, -0.016275, -0.284786), (0.176045, -0.06256, -0.284778), (0.175656, -0.016275, 0.398793), (0.175656, -0.06256, 0.398793), (0, -0.016275, -0.290482), (0, -0.06256, -0.290482), (0, -0.016275, 0.398793), (0, -0.06256, 0.398793), (-0.176045, -0.016275, -0.284778), (-0.17587, -0.06256, -0.284786), (-0.175656, -0.016275, 0.398793), (-0.175656, -0.06256, 0.398793), (-0.351312, -0.066409, -0.267029), (-0.537467, -0.066409, -0.243309), (-0.351925, -0.066409, -0.274411), (-0.544467, -0.066409, -0.249878), (-0.537467, -0.066409, -0.158248), (-0.537467, -0.066409, 0.391793), (-0.544467, -0.066409, -0.158248), (-0.544467, -0.066409, 0.398793), (0.537467, -0.066409, -0.158248), (0.537467, -0.066409, 0.391793), (0.544467, -0.066409, 0.398793), (0.544467, -0.066409, -0.158248), (0.537467, -0.066409, -0.243309), (0.544467, -0.066409, -0.249878), (-0.351312, -0.066409, 0.391793), (-0.351312, -0.066409, 0.398793), (0.351311, -0.066409, -0.267029), (0.351925, -0.066409, -0.274411), (0.351311, -0.066409, 0.391793), (0.351311, -0.066409, 0.398793), (0.175656, -0.066409, -0.277382), (0.176045, -0.066409, -0.284778), (0.175656, -0.066409, 0.391793), (0.175656, -0.066409, 0.398793), (0, -0.066409, -0.283071), (0, -0.066409, -0.290482), (0, -0.066409, 0.391793), (0, -0.066409, 0.398793), (-0.175656, -0.066409, -0.277382), (-0.17587, -0.066409, -0.284786), (-0.175656, -0.066409, 0.391793), (-0.175656, -0.066409, 0.398793)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-31.553183, -17.178724), (-31.553183, -18.17474), (-30.557817, -18.17474), (-30.557817, -17.178724)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_Television_21_1"
        {
            token outputs:surface.connect = </root/_materials/M_Television_21_1/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_Television_21_1/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float3 inputs:normal.connect = </root/_materials/M_Television_21_1/Image_Texture_001.outputs:rgb>
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/MetalBumpy_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_Television_21_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }

            def Shader "Image_Texture_001"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/MetalBumpy_Normal.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_Television_21_1/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }
        }
    }
}

