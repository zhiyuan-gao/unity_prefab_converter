#usda 1.0
(
    defaultPrim = "root"
    upAxis = "Z"
)

def Xform "root"
{
    def Xform "ToasterLever_17_ToasterLever_17_1_GeomSubset_4"
    {
        def Mesh "ToasterLever_17_ToasterLever_17_1_GeomSubset_4"
        {
            uniform bool doubleSided = 1
            int[] faceVertexCounts = [4]
            int[] faceVertexIndices = [16, 17, 19, 18]
            rel material:binding = </root/_materials/M_ToasterLever_17_4>
            normal3f[] normals = [(0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.002036, -0.221886, 0.048381), (-0.002036, -0.217815, 0.048381), (0.002036, -0.221886, 0.048381), (0.002036, -0.217815, 0.048381), (-0.002036, -0.221886, 0.048381), (-0.002036, -0.217815, 0.048381), (0.002036, -0.221886, 0.048381), (0.002036, -0.217815, 0.048381), (-0.002036, -0.221886, 0.048381), (-0.002036, -0.217815, 0.048381), (0.002036, -0.221886, 0.048381), (0.002036, -0.217815, 0.048381), (-0.002036, -0.221886, 0.048381), (-0.002036, -0.217815, 0.048381), (0.002036, -0.221886, 0.048381), (0.002036, -0.217815, 0.048381), (-0.002036, -0.221886, 0.048381), (-0.002036, -0.217815, 0.048381), (0.002036, -0.221886, 0.048381), (0.002036, -0.217815, 0.048381), (-0.002036, -0.221886, 0.048381), (-0.002036, -0.217815, 0.048381), (0.002036, -0.221886, 0.048381), (0.002036, -0.217815, 0.048381), (0, -0.227173, 0.048381), (-0.001975, -0.212431, 0.049199), (-0.001511, -0.212431, 0.049893), (-0.000818, -0.212431, 0.050356), (0, -0.212431, 0.050519), (0.000818, -0.212431, 0.050356), (0.001512, -0.212431, 0.049893), (0.001975, -0.212431, 0.049199), (0.002138, -0.212431, 0.048381), (0.001975, -0.212431, 0.047563), (0.001512, -0.212431, 0.04687), (0.000818, -0.212431, 0.046406), (0, -0.212431, 0.046243), (-0.000818, -0.212431, 0.046406), (-0.001511, -0.212431, 0.04687), (-0.001975, -0.212431, 0.047563), (-0.002138, -0.212431, 0.048381), (-0.001975, -0.203241, 0.049199), (-0.001511, -0.203241, 0.049893), (-0.000818, -0.203241, 0.050356), (0, -0.203241, 0.050519), (0.000818, -0.203241, 0.050356), (0.001512, -0.203241, 0.049893), (0.001975, -0.203241, 0.049199), (0.002138, -0.203241, 0.048381), (0.001975, -0.203241, 0.047563), (0.001512, -0.203241, 0.04687), (0.000818, -0.203241, 0.046406), (0, -0.203241, 0.046243), (-0.000818, -0.203241, 0.046406), (-0.001511, -0.203241, 0.04687), (-0.001975, -0.203241, 0.047563), (-0.002138, -0.203241, 0.048381), (-0.00633, -0.212792, 0.051003), (-0.00593, -0.212431, 0.050837), (-0.004845, -0.212792, 0.053226), (-0.004539, -0.212431, 0.05292), (-0.002622, -0.212792, 0.054711), (-0.002456, -0.212431, 0.054311), (0, -0.212792, 0.055233), (0, -0.212431, 0.0548), (0.002622, -0.212792, 0.054711), (0.002456, -0.212431, 0.054311), (0.004845, -0.212792, 0.053226), (0.004539, -0.212431, 0.05292), (0.00633, -0.212792, 0.051003), (0.00593, -0.212431, 0.050837), (0.006852, -0.212792, 0.048381), (0.006419, -0.212431, 0.048381), (0.00633, -0.212792, 0.045759), (0.00593, -0.212431, 0.045925), (0.004845, -0.212792, 0.043536), (0.004539, -0.212431, 0.043842), (0.002622, -0.212792, 0.042051), (0.002456, -0.212431, 0.042451), (0, -0.212792, 0.041529), (0, -0.212431, 0.041962), (-0.002622, -0.212792, 0.042051), (-0.002456, -0.212431, 0.042451), (-0.004845, -0.212792, 0.043536), (-0.004539, -0.212431, 0.043842), (-0.00633, -0.212792, 0.045759), (-0.00593, -0.212431, 0.045925), (-0.006852, -0.212792, 0.048381), (-0.006419, -0.212431, 0.048381), (-0.00593, -0.227173, 0.050837), (-0.00633, -0.226813, 0.051003), (-0.004845, -0.226813, 0.053226), (-0.004539, -0.227173, 0.05292), (-0.002456, -0.227173, 0.054311), (-0.002622, -0.226813, 0.054711), (0, -0.226813, 0.055233), (0, -0.227173, 0.0548), (0.002456, -0.227173, 0.054311), (0.002622, -0.226813, 0.054711), (0.004845, -0.226813, 0.053226), (0.004539, -0.227173, 0.05292), (0.00593, -0.227173, 0.050837), (0.00633, -0.226813, 0.051003), (0.006852, -0.226813, 0.048381), (0.006419, -0.227173, 0.048381), (0.00593, -0.227173, 0.045925), (0.00633, -0.226813, 0.045759), (0.004845, -0.226813, 0.043536), (0.004539, -0.227173, 0.043842), (0.002456, -0.227173, 0.042451), (0.002622, -0.226813, 0.042051), (0, -0.226813, 0.041529), (0, -0.227173, 0.041962), (-0.002456, -0.227173, 0.042451), (-0.002622, -0.226813, 0.042051), (-0.004845, -0.226813, 0.043536), (-0.004539, -0.227173, 0.043842), (-0.00593, -0.227173, 0.045925), (-0.00633, -0.226813, 0.045759), (-0.006852, -0.226813, 0.048381), (-0.006419, -0.227173, 0.048381)]
            bool[] primvars:sharp_face = [0] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:UVMap = [(-0.024476, -18.597717), (0.766515, -18.597717), (0.766515, -17.806725), (-0.024476, -17.806725)] (
                interpolation = "faceVarying"
            )
        }
    }

    def Scope "_materials"
    {
        def Material "M_ToasterLever_17_4"
        {
            token outputs:surface.connect = </root/_materials/M_ToasterLever_17_4/Principled_BSDF.outputs:surface>

            def Shader "Principled_BSDF"
            {
                uniform token info:id = "UsdPreviewSurface"
                float inputs:clearcoat = 0
                float inputs:clearcoatRoughness = 0.03
                color3f inputs:diffuseColor.connect = </root/_materials/M_ToasterLever_17_4/Image_Texture.outputs:rgb>
                float inputs:ior = 1.5
                float inputs:metallic = 0
                float inputs:opacity = 1
                float inputs:roughness = 0.8585787
                float inputs:specular = 0.2
                token outputs:surface
            }

            def Shader "Image_Texture"
            {
                uniform token info:id = "UsdUVTexture"
                asset inputs:file = @./textures/Toaster_Decal_AlbedoTransparency.png@
                token inputs:sourceColorSpace = "sRGB"
                float2 inputs:st.connect = </root/_materials/M_ToasterLever_17_4/uvmap.outputs:result>
                token inputs:wrapS = "repeat"
                token inputs:wrapT = "repeat"
                float3 outputs:rgb
            }

            def Shader "uvmap"
            {
                uniform token info:id = "UsdPrimvarReader_float2"
                token inputs:varname = "UVMap"
                float2 outputs:result
            }
        }
    }
}

