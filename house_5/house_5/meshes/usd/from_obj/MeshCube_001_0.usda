#usda 1.0
(
    defaultPrim = "Cube_001"
    doc = "Blender v4.1.1"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "Cube_001"
{
    matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def Mesh "Cube_001" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        uniform bool doubleSided = 1
        float3[] extent = [(-0.042265, -0.026617, 0.002198), (0.042265, 0.026617, 0.002802)]
        int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
        int[] faceVertexIndices = [10, 0, 9, 14, 8, 13, 10, 11, 15, 2, 4, 1, 6, 12, 5, 3, 1, 0, 5, 7, 6, 13, 15, 14, 9, 11, 10, 0, 1, 5, 10, 3, 0, 14, 11, 8, 11, 14, 15, 15, 6, 3, 6, 7, 3, 7, 2, 3, 3, 10, 15, 2, 7, 4, 6, 15, 12, 3, 2, 1, 5, 4, 7, 13, 12, 15, 9, 8, 11, 1, 4, 5, 5, 12, 9, 12, 13, 9, 13, 8, 9, 9, 0, 5]
        rel material:binding = </_materials/M_Cube_001_0>
        normal3f[] normals = [(0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (6.249835e-8, 0, 1), (1.8126678e-7, 0, 1), (-1.5712208e-8, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0.7071065, 0.70710707, 0), (0.7071066, 0.70710695, 0), (0.7071064, 0.7071071, 0), (0.7071066, -0.70710695, 0), (0.7071065, -0.70710707, 0), (0.70710653, -0.7071069, 0), (-0.7071066, -0.70710695, 0), (-0.7071065, -0.70710707, 0), (-0.70710653, -0.7071069, 0), (-0.7071066, 0.70710695, 0), (-0.7071065, 0.70710707, 0), (-0.70710653, 0.7071069, 0), (0, 0, -1), (1.6161339e-10, 0, -1), (2.0317052e-9, 0, -1), (0, 1, 0), (0, 1, 0), (0, 1, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (1.8126678e-7, 0, 1), (-6.579849e-8, 0, 1), (-1.5712208e-8, 0, 1), (-1.5712208e-8, 0, 1), (-6.249835e-8, 0, 1), (1.5712208e-8, 0, 1), (-6.249835e-8, 0, 1), (-1.8126678e-7, 0, 1), (1.5712208e-8, 0, 1), (-1.8126678e-7, 0, 1), (6.579849e-8, 0, 1), (1.5712208e-8, 0, 1), (1.5712208e-8, 0, 1), (6.249835e-8, 0, 1), (-1.5712208e-8, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0.7071065, 0.70710707, 0), (0.70710653, 0.7071069, 0), (0.7071066, 0.70710695, 0), (0.7071066, -0.70710695, 0), (0.7071064, -0.7071071, 0), (0.7071065, -0.70710707, 0), (-0.7071066, -0.70710695, 0), (-0.7071064, -0.7071071, 0), (-0.7071065, -0.70710707, 0), (-0.7071066, 0.70710695, 0), (-0.7071064, 0.7071071, 0), (-0.7071065, 0.70710707, 0), (1.6161339e-10, 0, -1), (6.5798487e-9, 0, -1), (2.0317052e-9, 0, -1), (2.0317052e-9, 0, -1), (0, 0, -1), (-2.0317052e-9, 0, -1), (0, 0, -1), (-1.6161339e-10, 0, -1), (-2.0317052e-9, 0, -1), (-1.6161339e-10, 0, -1), (-6.5798487e-9, 0, -1), (-2.0317052e-9, 0, -1), (-2.0317052e-9, 0, -1), (0, 0, -1), (2.0317052e-9, 0, -1)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(0.039349, 0.026617, 0.002198), (0.042265, 0.023701, 0.002198), (0.042265, 0.023701, 0.002802), (0.039349, 0.026617, 0.002802), (0.042265, -0.023701, 0.002198), (0.039349, -0.026617, 0.002198), (0.039349, -0.026617, 0.002802), (0.042265, -0.023701, 0.002802), (-0.042265, 0.023701, 0.002198), (-0.039349, 0.026617, 0.002198), (-0.039349, 0.026617, 0.002802), (-0.042265, 0.023701, 0.002802), (-0.039349, -0.026617, 0.002198), (-0.042265, -0.023701, 0.002198), (-0.042265, -0.023701, 0.002802), (-0.039349, -0.026617, 0.002802)]
        texCoord2f[] primvars:UVMap = [(0.965501, 0), (0.038279, 0.004304), (0.961709, 0.004304), (1, 0.945219), (0.995927, 0.058639), (0.995927, 0.941835), (0.965501, 0), (1, 0.054781), (0.965501, 1), (0, 0.054781), (0.00406, 0.941835), (0.00406, 0.058639), (0.034499, 1), (0.961709, 0.996171), (0.038279, 0.996171), (0.034499, 0), (0.00406, 0.058639), (0.038279, 0.004304), (0.038279, 0.996171), (0, 0.945219), (0.034499, 1), (0.995927, 0.941835), (0.965501, 1), (1, 0.945219), (0.961709, 0.004304), (1, 0.054781), (0.965501, 0), (0.038279, 0.004304), (0.00406, 0.058639), (0.038279, 0.996171), (0.965501, 0), (0.034499, 0), (0.038279, 0.004304), (1, 0.945219), (1, 0.054781), (0.995927, 0.058639), (1, 0.054781), (1, 0.945219), (0.965501, 1), (0.965501, 1), (0.034499, 1), (0.034499, 0), (0.034499, 1), (0, 0.945219), (0.034499, 0), (0, 0.945219), (0, 0.054781), (0.034499, 0), (0.034499, 0), (0.965501, 0), (0.965501, 1), (0, 0.054781), (0, 0.945219), (0.00406, 0.941835), (0.034499, 1), (0.965501, 1), (0.961709, 0.996171), (0.034499, 0), (0, 0.054781), (0.00406, 0.058639), (0.038279, 0.996171), (0.00406, 0.941835), (0, 0.945219), (0.995927, 0.941835), (0.961709, 0.996171), (0.965501, 1), (0.961709, 0.004304), (0.995927, 0.058639), (1, 0.054781), (0.00406, 0.058639), (0.00406, 0.941835), (0.038279, 0.996171), (0.038279, 0.996171), (0.961709, 0.996171), (0.961709, 0.004304), (0.961709, 0.996171), (0.995927, 0.941835), (0.961709, 0.004304), (0.995927, 0.941835), (0.995927, 0.058639), (0.961709, 0.004304), (0.961709, 0.004304), (0.038279, 0.004304), (0.038279, 0.996171)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
    }
}

def Scope "_materials"
{
    def Material "M_Cube_001_0"
    {
        token outputs:surface.connect = </_materials/M_Cube_001_0/Principled_BSDF.outputs:surface>

        def Shader "Principled_BSDF"
        {
            uniform token info:id = "UsdPreviewSurface"
            float inputs:clearcoat = 0
            float inputs:clearcoatRoughness = 0.03
            color3f inputs:diffuseColor.connect = </_materials/M_Cube_001_0/Image_Texture.outputs:rgb>
            float inputs:ior = 1.5
            float inputs:metallic = 0
            float3 inputs:normal.connect = </_materials/M_Cube_001_0/Image_Texture_001.outputs:rgb>
            float inputs:opacity = 1
            float inputs:roughness = 0.8585787
            float inputs:specular = 0.2
            token outputs:surface
        }

        def Shader "Image_Texture"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @../../../textures/4.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </_materials/M_Cube_001_0/uvmap.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }

        def Shader "uvmap"
        {
            uniform token info:id = "UsdPrimvarReader_float2"
            token inputs:varname = "UVMap"
            float2 outputs:result
        }

        def Shader "Image_Texture_001"
        {
            uniform token info:id = "UsdUVTexture"
            asset inputs:file = @./textures/1NRM.png@
            token inputs:sourceColorSpace = "sRGB"
            float2 inputs:st.connect = </_materials/M_Cube_001_0/uvmap.outputs:result>
            token inputs:wrapS = "repeat"
            token inputs:wrapT = "repeat"
            float3 outputs:rgb
        }
    }
}

